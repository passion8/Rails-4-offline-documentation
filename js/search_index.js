var search_data = {"index":{"searchIndex":["abstractcontroller","actionnotfound","assetpaths","base","callbacks","classmethods","collector","doublerendererror","error","helpers","classmethods","layouts","classmethods","layoutconditions","logger","railties","routeshelpers","rendering","classmethods","translation","urlfor","classmethods","viewpaths","classmethods","actioncontroller","base","caching","actions","actioncachepath","classmethods","configmethods","fragments","pages","classmethods","sweeping","compatibility","conditionalget","cookies","datastreaming","flash","forcessl","classmethods","head","helpers","classmethods","hideactions","classmethods","httpauthentication","basic","controllermethods","classmethods","digest","controllermethods","token","controllermethods","implicitrender","instrumentation","classmethods","logsubscriber","metal","middleware","actionmiddleware","mimeresponds","classmethods","paramswrapper","classmethods","rackdelegation","railtie","railties","paths","recordidentifier","redirecting","renderers","all","classmethods","rendering","requestforgeryprotection","classmethods","rescue","responder","sessionmanagement","classmethods","streaming","templateassertions","testcase","behavior","classmethods","raiseactionexceptions","testresponse","testing","classmethods","urlfor","actiondispatch","assertions","domassertions","responseassertions","routingassertions","selectorassertions","tagassertions","beststandardssupport","bodyproxy","callbacks","cookies","cookieoverflow","debugexceptions","exceptionwrapper","filehandler","flash","flashhash","head","http","cache","request","response","filterparameters","headers","mimenegotiation","parameterfilter","parameters","url","upload","uploadedfile","integration","requesthelpers","runner","session","integrationtest","middlewarestack","middleware","paramsparser","performancetest","publicexceptions","railsentitystore","railsmetastore","railtie","reloader","remoteip","getip","ipspoofattackerror","request","requestid","rescue","response","routing","mapper","base","httphelpers","resources","scoping","polymorphicroutes","redirection","routeset","mountedhelpers","urlfor","session","abstractstore","cachestore","compatibility","cookiestore","destroyablesession","memcachestore","stalesessioncheck","showexceptions","static","testprocess","testrequest","testresponse","actionmailer","base","mailhelper","actionview","base","context","filesystemresolver","fixtureresolver","helpers","activemodelhelper","activemodelinstancetag","assetpaths","assettaghelper","assetincludetag","javascriptincludetag","javascripttaghelpers","classmethods","stylesheetincludetag","stylesheettaghelpers","classmethods","atomfeedhelper","atombuilder","atomfeedbuilder","cachehelper","capturehelper","csrfhelper","datehelper","datehelperinstancetag","debughelper","formbuilder","formhelper","formoptionshelper","formtaghelper","instancetag","javascripthelper","numberhelper","invalidnumbererror","outputsafetyhelper","recordtaghelper","renderinghelper","sanitizehelper","taghelper","texthelper","translationhelper","urlhelper","logsubscriber","lookupcontext","detailscache","viewpaths","nullresolver","partialrenderer","railtie","renderer","resolver","path","template","handlers","builder","erb","erubis","testcase","behavior","classmethods","locals","testcontroller","activemodel","attributemethods","classmethods","attributemethodmatcher","blockvalidator","callbacks","conversion","dirty","eachvalidator","errors","lint","tests","massassignmentsecurity","blacklist","classmethods","error","loggersanitizer","permissionset","sanitizer","strictsanitizer","whitelist","missingattributeerror","name","naming","observer","observerarray","observing","classmethods","securepassword","classmethods","instancemethodsonactivation","serialization","serializers","json","xml","strictvalidationfailed","translation","validations","acceptancevalidator","callbacks","classmethods","classmethods","confirmationvalidator","exclusionvalidator","formatvalidator","helpermethods","inclusionvalidator","lengthvalidator","numericalityvalidator","presencevalidator","withvalidator","validator","activerecord","activerecorderror","adapternotfound","adapternotspecified","aggregations","classmethods","associationtypemismatch","associations","classmethods","attributeassignment","classmethods","attributeassignmenterror","attributemethods","beforetypecast","classmethods","deprecatedunderscoreread","classmethods","dirty","primarykey","classmethods","query","read","classmethods","serialization","attribute","classmethods","timezoneconversion","classmethods","write","classmethods","autosaveassociation","classmethods","base","batches","calculations","callbacks","coders","yamlcolumn","configurationerror","connectionadapters","abstractadapter","abstractmysqladapter","column","format","connectionhandler","connectionmanagement","connectionpool","databaselimits","databasestatements","mysql2adapter","mysqladapter","statementpool","postgresqladapter","statementpool","tabledefinition","utils","postgresqlcolumn","querycache","quoting","sqliteadapter","explainprettyprinter","statementpool","version","schemacache","schemastatements","statementpool","table","tabledefinition","connectionnotestablished","connectiontimeouterror","countercache","dangerousattributeerror","delegation","dynamicfindermatch","dynamicmatchers","dynamicscopematch","explain","findermethods","fixtures","file","identitymap","middleware","inheritance","classmethods","integration","invalidforeignkey","irreversiblemigration","locking","optimistic","classmethods","pessimistic","logsubscriber","migration","commandrecorder","migrationproxy","modelschema","classmethods","multiparameterassignmenterrors","nestedattributes","classmethods","toomanyrecords","observer","persistence","classmethods","preparedstatementinvalid","querycache","classmethods","querymethods","querying","railtie","railties","controllerruntime","classmethods","readonlyrecord","readonlyattributes","classmethods","recordinvalid","recordnotfound","recordnotsaved","recordnotunique","reflection","classmethods","macroreflection","relation","result","rollback","sanitization","classmethods","schema","scoping","classmethods","default","classmethods","named","classmethods","serialization","serializationtypemismatch","sessionstore","session","sqlbypass","spawnmethods","staleobjecterror","statementinvalid","store","classmethods","testfixtures","classmethods","throwresult","timestamp","transactions","classmethods","translation","unknownattributeerror","unknownprimarykey","validations","associatedvalidator","classmethods","uniquenessvalidator","wrappeddatabaseexception","activeresource","base","connection","custommethods","classmethods","errors","formats","jsonformat","xmlformat","httpmock","invalidrequesterror","logsubscriber","observing","railtie","request","response","sslerror","timeouterror","validations","activesupport","autoload","backtracecleaner","base64","basicobject","benchmarkable","bufferedlogger","severity","cache","entry","filestore","memcachestore","memorystore","nullstore","store","strategy","localcache","localstore","callbacks","classmethods","concern","configurable","classmethods","configuration","dependencies","classcache","watchstack","deprecation","descendantstracker","duration","fileupdatechecker","filewatcher","backend","gzip","stream","hashwithindifferentaccess","inflector","inflections","inheritableoptions","json","encoding","circularreferenceerror","encoder","variable","logsubscriber","testhelper","mocklogger","memoizable","instancemethods","messageencryptor","invalidmessage","messageverifier","invalidsignature","multibyte","chars","encodingerror","unicode","codepoint","unicodedatabase","notifications","event","fanout","instrumenter","orderedhash","orderedoptions","railtie","rescuable","classmethods","safebuffer","safeconcaterror","stringinquirer","taggedlogging","testcase","testing","assertions","declarative","isolation","forking","minitest","subprocess","testunit","pending","performance","benchmarker","forclassictestunit","forminitest","metrics","amount","base","cputime","digitalinformationunit","gcruns","gctime","memory","objects","processtime","time","usertime","walltime","performer","profiler","proxytestresult","remoteerror","setupandteardown","classmethods","forclassictestunit","forminitest","timewithzone","timezone","xmlmini","xmlmini_libxmlsax","hashbuilder","xmlmini_nokogirisax","hashbuilder","arjdbcmysql","error","array","base64","benchmark","bigdecimal","class","css","generators","assetsgenerator","scaffoldgenerator","date","datetime","erb","util","enumerable","erb","generators","controllergenerator","mailergenerator","scaffoldgenerator","falseclass","file","float","html","fullsanitizer","linksanitizer","sanitizer","selector","tag","whitelistsanitizer","hash","i18n","exceptionhandler","railtie","io","integer","js","generators","assetsgenerator","kernel","loaderror","logger","simpleformatter","mime","mimes","type","module","mysql","result","stmt","time","nameerror","nilclass","numeric","object","hashwithindifferentaccess","integrationtest","missingsourcefile","plugin","process","qualifiedconstutils","rails","actionmethods","appbuilder","application","bootstrap","configuration","finisher","railties","routesreloader","backtracecleaner","commands","info","install","plugin","remove","configuration","console","consolemethods","dbconsole","engine","configuration","railties","generators","actions","activemodel","appbase","appgenerator","assetsgenerator","base","controllergenerator","error","generatedattribute","generatorgenerator","helpergenerator","integrationtestgenerator","migration","classmethods","migrationgenerator","modelgenerator","namedbase","observergenerator","performancetestgenerator","pluginnewgenerator","resourcegenerator","resourcehelpers","resourceroutegenerator","scaffoldcontrollergenerator","scaffoldgenerator","sessionmigrationgenerator","taskgenerator","testcase","info","infocontroller","initializable","classmethods","collection","initializer","paths","path","root","plugin","pluginbuilder","rack","debugger","logtailer","logger","railtie","configurable","classmethods","configuration","scriptrailsloader","server","options","subtesttask","testunitrailtie","railsenvironment","range","recursivehttpfetcher","regexp","sourceannotationextractor","annotation","string","symbol","test","unit","collector","objectspace","testunit","generators","controllergenerator","helpergenerator","integrationgenerator","mailergenerator","modelgenerator","observergenerator","performancegenerator","plugingenerator","scaffoldgenerator","time","trueclass","uri","+()","+()","+()","+()","+()","+()","-()","-()","-()","<<()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","===()","===()","===()","===()","=~()","=~()","=~()",">>()","get()","post()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","__callback_runner_name()","__replay__()","__reset_runner()","_all_autoload_once_paths()","_all_autoload_paths()","_all_load_paths()","_attribute()","_dasherize()","_dump()","_dump_without_utc_flag()","_dump_without_zone()","_field_changed?()","_get()","_handle_method_missing()","_handle_render_options()","_implied_layout_name()","_insert_callbacks()","_layout_for()","_layout_for()","_load()","_load_without_utc_flag()","_load_without_zone()","_normalize_callback_options()","_normalize_options()","_normalize_options()","_original_to_s()","_parse_file()","_prefixes()","_prepare_context()","_routes()","_routes()","_routes_context()","_routes_context()","_run_class_setup()","_save_fragment()","_set_detail()","_set_wrapper_defaults()","_to_partial_path()","_validates_default_keys()","_with_routes()","_write_layout_method()","abstract!()","abstract_class?()","abstract_railtie?()","accept=()","accepts()","accepts_nested_attributes_for()","accessible_attributes()","acronym()","action()","action=()","action_has_layout?()","action_methods()","action_methods()","action_methods()","action_methods()","active?()","active?()","active?()","active?()","active_authorizer()","active_authorizers()","active_connection?()","active_connections?()","acts_like?()","acts_like_date?()","acts_like_date?()","acts_like_string?()","acts_like_string?()","acts_like_time?()","acts_like_time?()","acts_like_time?()","adapter_name()","adapter_name()","add()","add()","add()","add()","add()","add()","add_column()","add_column()","add_column()","add_column_position!()","add_column_sql()","add_error()","add_expr()","add_expr_escaped()","add_expr_literal()","add_filter()","add_index()","add_index_length()","add_index_options()","add_index_sort_order()","add_index_sql()","add_observer()","add_observer!()","add_on_blank()","add_on_empty()","add_postamble()","add_preamble()","add_renderer()","add_resource_route()","add_routes()","add_shared_options_for()","add_shebang_option!()","add_silencer()","add_source()","add_text()","add_timestamps()","add_timestamps_sql()","add_to_transaction()","add_transaction_record()","add_whiner()","added?()","advance()","advance()","advance()","advance()","after()","after()","after_commit()","after_filter()","after_initialize()","after_rollback()","after_validation()","ago()","ago()","ago()","ago()","ago()","ago()","alert()","alert=()","alias_attribute()","alias_attribute()","alias_method_chain()","all()","all()","all()","all()","all()","all()","all()","all_day()","all_helpers_from_path()","all_month()","all_paths()","all_quarter()","all_week()","all_year()","announce()","anonymous?()","any?()","api_behavior()","api_location()","app()","app()","app()","app()","app()","app()","app()","app()","app()","app()","app=()","app=()","app_const()","app_const_base()","app_generators()","app_middleware()","app_name()","app_secret()","app_templates_dir()","append_after_filter()","append_around_filter()","append_before_filter()","append_features()","append_view_path()","append_view_path()","application()","application()","application=()","application_definition()","application_name()","application_trace()","apply_finder_options()","apply_join_dependency()","apply_rails_template()","arel()","arel_engine()","arel_table()","arguments()","around_filter()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","assert_blank()","assert_class_method()","assert_difference()","assert_directory()","assert_dom_equal()","assert_dom_not_equal()","assert_field_default_value()","assert_field_type()","assert_file()","assert_generates()","assert_index()","assert_instance_method()","assert_method()","assert_migration()","assert_no_difference()","assert_no_directory()","assert_no_file()","assert_no_migration()","assert_no_tag()","assert_present()","assert_recognizes()","assert_redirected_to()","assert_response()","assert_routing()","assert_select()","assert_select_email()","assert_select_encoded()","assert_tag()","assert_template()","assert_valid_keys()","asset_name()","asset_name()","asset_name()","asset_name()","asset_tag()","asset_tag()","asset_tag()","assets_gemfile_entry()","assign_attributes()","assign_shortcuts()","assigns()","assume_migrated_upto_version()","at()","at()","at_beginning_of_day()","at_beginning_of_day()","at_beginning_of_day()","at_beginning_of_hour()","at_beginning_of_hour()","at_beginning_of_month()","at_beginning_of_month()","at_beginning_of_quarter()","at_beginning_of_quarter()","at_beginning_of_week()","at_beginning_of_week()","at_beginning_of_year()","at_beginning_of_year()","at_end_of_month()","at_end_of_month()","at_end_of_quarter()","at_end_of_quarter()","at_end_of_week()","at_end_of_week()","at_end_of_year()","at_end_of_year()","at_midnight()","at_midnight()","at_midnight()","atom_feed()","atomic_write()","attach_to()","attachments()","attachments()","attr_accessible()","attr_internal()","attr_internal_accessor()","attr_internal_reader()","attr_internal_writer()","attr_protected()","attr_readonly()","attribute_cast_code()","attribute_match()","attribute_method?()","attribute_method?()","attribute_method?()","attribute_method_affix()","attribute_method_prefix()","attribute_method_suffix()","attribute_methods_generated?()","attribute_missing()","attribute_names()","attributes=()","attributes_before_type_cast()","attributes_before_type_cast()","attributes_protected_by_default()","attributes_protected_by_default()","audio_path()","audio_tag()","auth_type()","auth_type=()","auth_type=()","authenticate()","authenticate()","authenticate()","authenticate()","authenticate_or_request_with_http_basic()","authenticate_or_request_with_http_digest()","authenticate_or_request_with_http_token()","authenticate_with_http_basic()","authenticate_with_http_digest()","authenticate_with_http_token()","authentication_header()","authentication_request()","authentication_request()","authentication_request()","authorization()","auto_discovery_link_tag()","auto_flushing=()","autoload()","autoload_at()","autoload_once()","autoload_once_paths()","autoload_paths()","autoload_paths()","autoload_under()","autoloads()","available_action?()","available_views()","average()","backend()","backend=()","backend=()","backtrace_cleaner()","bang?()","banner()","banner()","banner()","base_class()","base_name()","base_root()","basename()","becomes()","before()","before()","before_configuration()","before_eager_load()","before_filter()","before_filters()","before_initialize()","before_validation()","begin_db_transaction()","begin_db_transaction()","begin_db_transaction()","beginning_of_day()","beginning_of_day()","beginning_of_day()","beginning_of_hour()","beginning_of_hour()","beginning_of_month()","beginning_of_month()","beginning_of_quarter()","beginning_of_quarter()","beginning_of_week()","beginning_of_week()","beginning_of_year()","beginning_of_year()","behavior()","behavior=()","belongs_to()","belongs_to()","belongs_to()","belongs_to?()","benchmark()","benchmark()","best_install_method()","between?()","bind()","bind()","blank?()","blank?()","blank?()","blank?()","blank?()","blank?()","block_format()","body()","body()","body=()","body_parts()","breakpoint()","build()","build()","build()","build()","build()","build()","build()","build()","build_arel()","build_mem_cache()","build_original_fullpath()","builder()","bundle_command()","button()","button_tag()","button_to()","button_to_function()","byte()","bytes()","cache()","cache()","cache()","cache()","cache()","cache_attribute?()","cache_attributes()","cache_fixtures()","cache_for_connection()","cache_key()","cache_page()","cache_page()","cache_store()","cache_store=()","cache_template_loading()","cache_template_loading=()","cached_attributes()","cached_fixtures()","caches_action()","caches_page()","caching_allowed?()","calculate()","calculate_ip()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call_app()","camelcase()","camelize()","camelize()","camelized()","camelized()","capify!()","capitalize()","capture()","capture()","case_insensitive_comparison()","case_insensitive_comparison()","case_sensitive_equality_operator()","case_sensitive_modifier()","case_sensitive_modifier()","cattr_accessor()","cattr_reader()","cattr_writer()","cdata_block()","cdata_section()","center()","change()","change()","change()","change()","change_column()","change_column()","change_column_default()","change_column_default()","change_column_default()","change_column_null()","change_column_null()","change_column_null()","change_column_sql()","change_default()","change_table()","changed()","changed?()","changed_attributes()","changed_for_autosave?()","changes()","characters()","charset()","check_box()","check_box()","check_box_checked?()","check_box_tag()","check_class_collision()","check_validity!()","check_validity!()","check_validity!()","check_validity!()","check_validity!()","check_validity!()","checkin()","checkout()","children()","civil_from_format()","class_attribute()","class_eval()","class_name()","class_name()","class_of_active_record_descendant()","class_path()","classify()","classify()","clean()","cleanup()","cleanup()","cleanup()","cleanup()","cleanup!()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear!()","clear!()","clear_action_methods!()","clear_active_connections!()","clear_active_connections!()","clear_all_connections!()","clear_cache()","clear_cache!()","clear_cache!()","clear_cache!()","clear_cache!()","clear_cache!()","clear_helpers()","clear_query_cache()","clear_reloadable_connections!()","clear_reloadable_connections!()","clear_respond_to()","clear_stale_cached_connections!()","clear_table_cache!()","clear_tags!()","client_encoding()","client_min_messages()","client_min_messages=()","clone()","clone_empty()","close()","close()","close()","close()","close()","closed?()","code()","collation()","collection()","collection_name()","collection_path()","collection_path()","collection_select()","collection_select()","color()","colorize_logging()","colorize_logging=()","column()","column()","column_defaults()","column_exists?()","column_exists?()","column_name_length()","column_names()","columns()","columns()","columns()","columns()","columns()","columns_for_remove()","columns_hash()","columns_hash()","columns_hash()","columns_per_multicolumn_index()","columns_per_table()","comment_if()","commit_db_transaction()","commit_db_transaction()","commit_transaction_records()","comparable_time()","compare_with_coercion()","compare_without_coercion()","compile_methods!()","compile_methods!()","compiled_asset_path()","compose()","compose_codepoints()","composed_of()","compress()","compressed?()","compute_tags()","compute_type()","concat()","concat()","conditional_layout?()","conditional_layout?()","config()","config()","config()","config()","config()","config()","config()","config()","config_accessor()","configru()","configuration()","configurations()","configure()","configure()","connected?()","connected?()","connected?()","connection()","connection()","connection()","connection()","connection()","connection()","connection()","connection_config()","connection_handler()","connection_id()","connection_id=()","connection_pool()","connection_pool()","consider_all_requests_local?()","console()","constantize()","constantize()","constraints()","construct_join_dependency_for_association_find()","construct_limited_ids_condition()","construct_relation_for_association_calculations()","construct_relation_for_association_find()","consumes?()","contains_bad_protocols?()","content_columns()","content_for()","content_for?()","content_length()","content_mime_type()","content_tag()","content_tag_for()","content_type()","content_type()","content_type=()","controller()","controller()","controller_class()","controller_class=()","controller_class_name()","controller_class_path()","controller_file_name()","controller_file_path()","controller_i18n_scope()","controller_name()","controller_name()","controller_path()","controller_path()","controller_path()","controller_path=()","convert_database_option_for_jruby()","convert_key()","convert_key()","convert_to_model()","convert_value()","convert_value()","cookie_jar()","cookies()","cookies()","cookies()","cookies()","copy()","copy_javascript()","copy_stylesheet()","copy_stylesheet()","copy_view_files()","copy_view_files()","count()","count()","count_by_sql()","count_observers()","create()","create()","create()","create()","create()","create()","create()","create!()","create!()","create_active_record_files()","create_app_files()","create_app_files()","create_boot_file()","create_config_files()","create_config_files()","create_controller_files()","create_controller_files()","create_database()","create_database()","create_db_files()","create_doc_files()","create_dummy_app()","create_fixture_file()","create_fixtures()","create_fixtures()","create_generated_attribute()","create_generator_files()","create_helper_files()","create_helper_files()","create_images_directory()","create_javascript_files()","create_lib_files()","create_lib_files()","create_log_files()","create_path_and_open_file()","create_public_files()","create_public_stylesheets_files()","create_reflection()","create_root()","create_root_files()","create_root_files()","create_root_folder()","create_savepoint()","create_savepoint()","create_savepoint()","create_savepoint()","create_script_files()","create_script_files()","create_table()","create_task_files()","create_test_dummy_files()","create_test_file()","create_test_files()","create_test_files()","create_test_files()","create_test_files()","create_test_files()","create_test_files()","create_test_files()","create_test_files()","create_test_files()","create_tmp_files()","create_vendor_files()","create_with()","creator?()","csrf_meta_tag()","csrf_meta_tags()","css_select()","current()","current()","current()","current_cycle()","current_database()","current_database()","current_hash()","current_hash()","current_page?()","current_savepoint_name()","current_schema()","custom_dir()","custom_dir()","custom_dir()","custom_method_collection_url()","cycle()","daemon()","dangerous_attribute_method?()","dangerous_attribute_method?()","dasherize()","dasherize()","data()","data()","data_column()","data_column_name()","data_column_name()","data_column_size_limit()","database_configuration()","database_gemfile_entry()","database_yml()","date_select()","date_select()","datetime_select()","datetime_select()","day()","days()","days_in_month()","days_to_week_start()","days_to_week_start()","db()","debug()","debug_protected_attribute_removal()","debugger()","decode()","decode()","decode()","decode64()","decode64()","decode_credentials()","decode_credentials()","decode_credentials_header()","decompose()","decompose_codepoints()","decompress()","deconstantize()","deconstantize()","decrement()","decrement()","decrement()","decrement()","decrement()","decrement!()","decrement_counter()","decrement_open_transactions()","decrypt()","decrypt_and_verify()","deep_dup()","deep_merge()","deep_merge!()","deep_munge()","default()","default()","default()","default()","default()","default=()","default_action()","default_aliases_for_option()","default_charset=()","default_for_option()","default_generator_root()","default_inspect()","default_inspect()","default_middleware_stack()","default_middleware_stack()","default_options()","default_primary_key_type()","default_render()","default_render()","default_scope()","default_sequence_name()","default_source_root()","default_timezone()","default_url_options()","default_url_options()","default_url_options=()","default_url_options=()","default_value_for_option()","defaults()","define()","define_attribute_method()","define_attribute_methods()","define_attribute_methods()","define_callbacks()","define_callbacks()","define_method__attribute()","define_method_attribute()","define_method_attribute()","define_method_attribute=()","define_method_attribute=()","define_model_callbacks()","defined_app_const_base()","defined_app_const_base?()","defined_app_name()","delegate()","delegate_to_scoped_klass()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete?()","delete_all()","delete_cookie()","delete_entry()","delete_entry()","delete_if()","delete_matched()","delete_matched()","delete_matched()","delete_matched()","delete_responses_to_replace()","delete_sql()","delete_via_redirect()","demodulize()","demodulize()","deny?()","deny?()","deny?()","deprecate()","deprecate_methods()","deprecated_method_warning()","desc()","desc()","descendants()","descendants()","descends_from_active_record?()","describe()","destination()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy_all()","destroy_session()","destroyed?()","detail_args_for()","details_for_lookup()","determine_default_controller_class()","determine_default_helper_class()","determine_install_method()","diff()","direct_descendants()","direct_descendants()","dirname()","dirties_query_cache()","disable()","disable_cache()","disable_query_cache!()","disable_referential_integrity()","disabled_for?()","disabled_for?()","disabled_observer_stack()","disabled_observers()","discard()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","dispatch()","display()","display()","display_errors()","distance_of_time_in_words()","distance_of_time_in_words_to_now()","distinct()","div_for()","doc()","dom_class()","dom_id()","domain()","down()","downcase()","download()","drop_table()","dst?()","dummy_path()","dup()","dup()","dup()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each_key()","each_pair()","each_subclass_array()","each_value()","each_with_object()","eager_autoload()","eager_autoload!()","eager_load()","eager_load()","eager_load!()","eager_load!()","eager_load_paths()","eager_loading?()","element_name()","element_path()","element_path()","email_field()","email_field_tag()","emitted_hidden_id?()","empty?()","empty?()","empty?()","empty?()","empty_directory_with_gitkeep()","empty_insert_statement_value()","empty_insert_statement_value()","emulate_booleans()","enable()","enable_query_cache!()","enable_warnings()","enabled()","enabled=()","enabled?()","encode()","encode()","encode()","encode()","encode()","encode!()","encode64()","encode64()","encode64s()","encode_credentials()","encode_credentials()","encode_credentials()","encode_json()","encode_json()","encode_json()","encode_json()","encode_json()","encode_json()","encode_json()","encode_with()","encode_with()","encode_with()","encode_with()","encode_with()","encoding()","encoding=()","encoding_aware?()","encrypt()","encrypt_and_sign()","end_document()","end_element()","end_of_day()","end_of_day()","end_of_day()","end_of_hour()","end_of_hour()","end_of_month()","end_of_month()","end_of_quarter()","end_of_quarter()","end_of_week()","end_of_week()","end_of_year()","end_of_year()","end_transaction()","endpoint()","endpoint()","engine()","engine=()","engines()","enlist_fixture_connections()","entry()","enumerate()","env()","env()","env=()","env_config()","env_config()","env_filter()","environment()","environment()","environment=()","eql?()","eql?()","eql?()","eql?()","eql?()","eql_with_coercion()","eql_without_coercion()","error()","error_message()","error_number()","error_wrapping()","errors()","errors()","errors()","escape()","escape_bytea()","escape_glob_chars()","escape_javascript()","escape_once()","establish_connection()","establish_connection()","etag=()","etag_matches?()","evaluate_default_scope()","exabyte()","exabytes()","except()","except()","except!()","excerpt()","exclude?()","exclude?()","exec_delete()","exec_delete()","exec_delete()","exec_delete()","exec_delete()","exec_insert()","exec_insert()","exec_query()","exec_query()","exec_query()","exec_query()","exec_query()","exec_script_rails!()","exec_update()","exec_update()","exec_update()","exec_update()","exec_update()","exec_without_stmt()","execute()","execute()","execute()","execute()","execute()","execute_and_free()","execute_hook()","execute_if_updated()","exist?()","exist?()","existent()","existent_directories()","exists?()","exists?()","exists?()","exists?()","exit_on_failure?()","expand_cache_key()","expand_hash_conditions_for_aggregates()","expanded()","expected_response()","expire()","expire_action()","expire_fragment()","expire_page()","expire_page()","expired?()","expires_at()","expires_at=()","expires_in()","expires_now()","explain()","explain()","explain()","explain()","ext()","extended()","extended()","extended()","extended()","extended()","extending()","extension()","extension()","extension()","extension()","extension()","externals()","externals=()","extify()","extract!()","extract_annotations_from()","extract_domain()","extract_options!()","extract_schema_and_table()","extract_session_id()","extract_subdomain()","extract_subdomains()","extractable_options?()","extractable_options?()","extractable_options?()","extractable_options?()","fallbacks()","favicon_link_tag()","fetch()","fetch()","fetch()","fetch()","fetch_dir()","field_set_tag()","field_type()","fields_for()","fields_for()","fifth()","file()","file_field()","file_field()","file_field_tag()","file_path()","filename()","filter()","filter_by()","filtered_env()","filtered_options()","filtered_parameters()","filtered_path()","filtered_query_string()","find()","find()","find()","find()","find()","find()","find()","find()","find_all()","find_all()","find_all_tag()","find_by_attributes()","find_by_session_id()","find_by_session_id()","find_by_sql()","find_cmd()","find_each()","find_first()","find_in()","find_in_batches()","find_last()","find_one()","find_or_instantiator_by_attributes()","find_root_with_flag()","find_some()","find_tag()","find_template()","find_tzinfo()","find_with_associations()","find_with_ids()","find_zone()","find_zone!()","finder?()","finish_template()","finish_template()","first()","first()","first()","first()","first!()","first_or_create()","first_or_create!()","first_or_initialize()","fixture_file_upload()","fixture_is_cached?()","fixtures()","flash()","flash()","flush()","flush()","flush()","flush_all!()","flush_cache()","flushable_loggers()","follow_redirect!()","font_path()","for_class()","for_id()","for_tag()","force_ssl()","foreign_key()","foreign_key()","forking_env?()","form_authenticity_param()","form_authenticity_token()","form_data?()","form_for()","form_tag()","format()","format()","format()","format()","format()","format()","format=()","format=()","format_paragraph()","formats()","formatted_offset()","formatted_offset()","formatted_offset()","formatted_offset()","fortnight()","fortnights()","forty_two()","fourth()","fragment_cache_key()","fragment_exist?()","framework_trace()","framework_version()","frameworks()","freeze()","freeze()","freeze_with_memoizable()","fresh?()","fresh_when()","from()","from()","from()","from_array()","from_json()","from_json()","from_now()","from_now()","from_rails_root()","from_response()","from_trusted_xml()","from_xml()","from_xml()","from_xml()","frozen?()","full?()","full_message()","full_messages()","full_profile_options()","full_test_name()","full_trace()","fullpath()","future?()","future?()","future?()","future?()","g_length()","g_pack()","g_unpack()","gem()","gem_for_database()","gem_group()","gemfile()","gemfile()","gemspec()","generate()","generate()","generate_message()","generate_method_for_mime()","generate_railtie_name()","generate_sid()","generate_test_dummy()","generated_external_attribute_methods()","generated_feature_methods()","generator()","generator_dir()","generator_name()","generators()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get?()","get_builder_class()","get_builder_class()","get_session()","get_via_redirect()","getgm()","getlocal()","getutc()","getutc()","gigabyte()","gigabytes()","git()","git_keep()","git_url?()","gitignore()","gitignore()","global_plugins()","gmt?()","gmt_offset()","gmtime()","gmtoff()","group()","group_by()","grouped_collection_select()","grouped_collection_select()","grouped_options_for_select()","groups()","h()","ha1()","halted_callback()","handle_unverified_request()","handler_for_rescue()","handles_encoding?()","has_and_belongs_to_many()","has_errors?()","has_index?()","has_key?()","has_key?()","has_key?()","has_many()","has_migrations?()","has_one()","has_secure_password()","has_uniq_index?()","hash()","hash()","hash()","having()","head()","head()","head()","head()","head?()","headers()","headers()","headers()","headers=()","help()","helper()","helper()","helper_attr()","helper_class()","helper_method()","helper_method()","helpers()","helpers()","helpers_paths()","hidden_actions()","hidden_field()","hidden_field()","hidden_field_tag()","hidden_namespaces()","hide_action()","hide_namespace()","hide_namespaces()","highlight()","hook_for()","host()","host()","host=()","host_with_port()","hour()","hours()","html?()","html_document()","html_escape()","html_safe()","html_safe?()","html_safe?()","html_safe?()","http_basic_authenticate_with()","httpdate()","https!()","https?()","human()","human()","human_attribute_name()","human_name()","human_name()","humanize()","humanize()","i18n_scope()","i18n_scope()","id()","id()","id()","id=()","id=()","id?()","id_from_response()","identify()","identity()","if_modified_since()","if_modified_since=()","if_none_match()","if_none_match=()","image_alt()","image_path()","image_submit_tag()","image_tag()","in()","in()","in()","in?()","in_char_class?()","in_clause_length()","in_groups()","in_groups_of()","in_rails_application?()","in_rails_application_subdirectory?()","in_time_zone()","in_time_zone()","in_time_zone()","include?()","include?()","include?()","include?()","include?()","include?()","include_all_railties?()","include_fallbacks_module()","include_tag()","include_with_range?()","included()","included()","included()","included()","included()","included()","includes()","increment()","increment()","increment()","increment()","increment()","increment!()","increment_counter()","increment_open_transactions()","indent()","index()","index()","index()","index_by()","index_exists?()","index_exists?()","index_helper()","index_name()","index_name_exists?()","index_name_for_remove()","index_name_length()","index_name_length()","indexes()","indexes_per_table()","inflections()","info()","inheritable_copy()","inheritance_column()","inheritance_column=()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","init_fallbacks()","init_with()","initialize!()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_dup()","initialize_dup()","initialize_dup()","initialize_generators()","initialize_i18n()","initialize_schema_migrations_table()","initialize_sid()","initialize_template_class()","initialized=()","initialized?()","initializer()","initializer()","initializers()","initializers()","initializers()","initializers_chain()","initializers_for()","inject_index_options()","inject_options()","inquiry()","insensitive_attributes()","insert()","insert()","insert()","insert()","insert_after()","insert_before()","insert_fixture()","insert_sql()","insert_sql()","insert_sql()","inside_template()","inside_template?()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","install()","install()","installed?()","instance()","instance()","instance_method_already_implemented?()","instance_method_already_implemented?()","instance_method_names()","instance_variable_names()","instantiate()","instantiate_all_loaded_fixtures()","instantiate_fixtures()","instantiate_observers()","instantiator?()","instrument()","instrument()","instrument()","instrument=()","instrument_fragment_cache()","instrumenter()","internal_methods()","invalid?()","inverse()","invert()","invoke()","ip()","ips_from()","irregular()","is_a?()","is_missing?()","is_missing?()","is_utf8?()","isdst()","iso8601()","iso8601()","isolate_namespace()","j()","j()","javascript_gemfile_entry()","javascript_include_tag()","javascript_path()","javascript_runtime_gemfile_entry()","javascript_tag()","javascripts()","joined_includes_values()","joins()","joins_per_query()","json_escape()","json_resource_errors()","keep()","key?()","key?()","key?()","key?()","key?()","key?()","key?()","key?()","key?()","key_matcher()","key_value()","key_value()","keys()","keys()","keys()","kilobyte()","kilobytes()","kind()","kind()","kind_of?()","klass()","klass()","known_attributes()","known_attributes()","l()","l()","label()","label()","label_tag()","last()","last()","last()","last()","last()","last!()","last_inserted_id()","last_inserted_id()","last_inserted_id()","last_inserted_id()","last_modified()","last_modified=()","last_modified?()","layout()","lease()","length()","length()","length()","length()","level()","level=()","lib()","lib()","lib()","license()","limit()","limit()","limited_update_conditions()","limited_update_conditions()","link_to()","link_to_function()","link_to_if()","link_to_unless()","link_to_unless_current()","links()","listeners_for()","listening?()","ljust()","load()","load()","load_attributes_from_response()","load_console()","load_console()","load_console()","load_generators()","load_generators()","load_paths()","load_seed()","load_session()","load_tasks()","load_tasks()","load_tasks()","loaded?()","loaded?()","local()","local?()","local_constant_names()","local_constants()","local_offset()","local_time()","local_to_utc()","localize()","localize()","locals()","localtime()","location()","location()","location=()","location=()","lock()","lock!()","locking_column()","locking_column=()","locking_enabled?()","log()","log()","log()","log_level()","log_path()","log_process_action()","log_subscribers()","logged()","logger()","logger()","logger()","logger()","logger()","logger()","logger()","logger()","logger=()","logger?()","lookup()","lookup_ancestors()","lookup_by_extension()","lookup_context()","lookup_store()","ls()","lstrip()","mail()","mail_to()","mailer()","mailer_name()","mailer_name()","many?()","many?()","mark_for_destruction()","marked_for_destruction?()","marshal_dump()","marshal_dump()","marshal_load()","marshal_load()","mass_assignment_authorizer()","mass_assignment_options()","mass_assignment_role()","mass_assignment_sanitizer=()","match()","match()","match()","match()","match()","match()","match?()","mattr_accessor()","mattr_reader()","mattr_writer()","maximum()","mb_chars()","measure()","measure()","measure()","measure()","measure()","measure()","measure()","measure()","measure()","measure_mode()","media_type()","megabyte()","megabytes()","member()","member?()","member?()","memoize()","memoize_all()","memoized_ivar_for()","merge()","merge()","merge()","merge()","merge!()","merge!()","merge!()","message()","message()","message()","message()","method()","method_added()","method_defined_within?()","method_for_action()","method_for_action()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_name()","method_names()","method_symbol()","middleware()","middleware()","middleware()","middleware()","midnight()","midnight()","midnight()","migrate()","migrate()","migration_template()","migrations_paths()","mime_type()","mime_type()","mime_type()","minimum()","minus_with_coercion()","minus_without_coercion()","minus_without_duration()","minute()","minutes()","missing_name()","missing_name?()","model_name()","module_namespacing()","modules_for_helpers()","modules_for_helpers()","monday()","monday()","month()","months()","months_ago()","months_ago()","months_since()","months_since()","mount()","mountable?()","ms()","multipart=()","multiple_of?()","mute()","mute()","mysql2_connection()","mysql_socket()","name()","name()","name()","names()","namespace()","namespace()","namespace()","namespace()","namespaced?()","namespaced_class_path()","namespaced_file_path()","native_database_types()","native_database_types()","navigation_behavior()","navigation_location()","negotiate_mime()","nested()","nested_under_indifferent_access()","nested_under_indifferent_access()","nested_under_indifferent_access()","nested_under_indifferent_access()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new?()","new_constants()","new_element_path()","new_element_path()","new_from_hash_copying_default()","new_from_hash_copying_default()","new_record?()","new_record?()","new_session()","next_element()","next_key()","next_migration_number()","next_month()","next_month()","next_selector()","next_week()","next_week()","next_year()","next_year()","no_color!()","nonce()","normalize()","normalize()","normalize_name()","normalize_path()","not_modified?()","notice()","notice=()","notify_observers()","now()","now()","now_is_loaded?()","nth_child()","number_field()","number_field_tag()","number_to_currency()","number_to_human()","number_to_human_size()","number_to_percentage()","number_to_phone()","number_with_delimiter()","number_with_precision()","object()","observe()","observed_class()","observed_classes()","observed_classes()","observer_class_for()","observer_instances()","observers()","observers=()","odd?()","offset()","on_cdata_block()","on_characters()","on_end_document()","on_end_element()","on_load()","on_start_document()","on_start_element()","only()","only_child()","opaque()","open()","open()","open_log()","open_session()","opt_parser()","option_groups_from_collection_for_select()","optional_port()","options()","options()","options()","options()","options()","options_for()","options_for_select()","options_from_collection_for_select()","options_include_default?()","ord()","ord()","order()","ordered_railties()","ordinalize()","ordinalize()","orig_delete()","original_concat()","original_fullpath()","original_name()","original_url()","orm_class()","orm_instance()","output_filename()","output_filename()","output_filename()","outside_transaction?()","outside_transaction?()","overlaps?()","param_key()","parameter_filter()","parameter_filter_for()","parameterize()","parameterize()","parameters()","paramify_values()","params()","params()","params=()","parent()","parent_name()","parent_of?()","parent_prefixes()","parents()","parse()","parse()","parse()","parse()","parse()","parse!()","parse!()","parse!()","parse!()","parse!()","parse!()","parse_data_with_trailing_star()","parse_error()","parse_query()","parse_raw_value_as_a_number()","parse_raw_value_as_an_integer()","parser()","password()","password=()","password=()","password=()","password_field()","password_field_tag()","past?()","past?()","past?()","past?()","path()","path()","path=()","path_parameters()","path_to_audio()","path_to_font()","path_to_image()","path_to_javascript()","path_to_stylesheet()","path_to_video()","paths()","paths()","pending()","perform_validations()","performed?()","period()","period_for_local()","period_for_utc()","persisted?()","persisted?()","petabyte()","petabytes()","phone_field()","phone_field_tag()","pk_and_sequence_for()","plain?()","pluck()","plugin()","plugins()","plural()","plural()","plural_file_name()","plural_name()","plural_table_name()","pluralize()","pluralize()","pluralize()","pluralize_table_names?()","polymorphic_path()","polymorphic_url()","pop_d()","pop_tags()","populate_with_current_scope_attributes()","port()","port=()","port_string()","post()","post()","post()","post()","post()","post()","post?()","post_via_redirect()","postgresql_version()","precisionless_round()","prefetch_primary_key?()","prefix()","prefix=()","prefix_source()","preload()","prepare!()","prepare!()","prepare_controller_class()","prepare_destination()","prepend_after_filter()","prepend_around_filter()","prepend_before_filter()","prepend_view_path()","prepend_view_path()","presence()","present?()","prev_month()","prev_month()","prev_week()","prev_week()","prev_year()","prev_year()","previous_changes()","primary_key()","primary_key()","primary_key()","primary_key()","primary_key()","primary_key=()","primary_keys()","prime_cache()","process()","process()","process()","process()","process_action()","process_action()","process_action()","process_action()","process_attributes_for()","process_node()","process_node()","process_node()","process_node()","process_removed_attributes()","process_removed_attributes()","process_removed_attributes()","process_view_paths()","process_with_new_base_test()","profile()","properties()","property()","protect_against_forgery?()","protect_from_forgery()","protected_attributes()","protocol()","provide()","proxy()","proxy=()","proxy=()","proxy_class()","proxy_class=()","prune()","pruning?()","public_directory()","public_path()","publish()","publish()","push_d()","push_tags()","put()","put()","put()","put()","put()","put()","put?()","put_via_redirect()","qualified_const_defined?()","qualified_const_get()","qualified_const_set()","query()","query_attribute()","query_parameters()","quietly()","quote()","quote()","quote_column_name()","quote_string()","quote_string()","quote_table_name()","quote_table_name()","quote_table_name()","quoted_columns_for_index()","quoted_columns_for_index()","quoted_date()","quoted_false()","quoted_false()","quoted_locking_column()","quoted_primary_key()","quoted_table_name()","quoted_true()","quoted_true()","rack_cookies()","radio_button()","radio_button()","radio_button_checked?()","radio_button_tag()","rails_gemfile_entry()","railtie_name()","railtie_name()","railtie_namespace()","railties()","railties()","raise()","raise_if_absolute()","rake()","rake_tasks()","rakefile()","rakefile()","rakefile()","rakefile_test_tasks()","range_field()","range_field_tag()","raw()","raw_connection()","raw_host_with_port()","raw_post()","raw_value()","raw_write_attribute()","read()","read()","read()","read()","read_attribute()","read_attribute_before_type_cast()","read_attribute_before_type_cast()","read_entry()","read_entry()","read_fragment()","read_multi()","read_multi()","readable_inspect()","readable_inspect()","readme()","readme()","readme()","readonly()","readonly!()","readonly?()","readonly_attributes()","receive()","reconnect!()","reconnect!()","reconnect!()","reconnect!()","record()","record()","record()","record_key_for_dom_id()","recreate_database()","recycle!()","recycle!()","redefine_method()","redirect()","redirect_to()","redirect_to()","redirect_to()","redirect_to()","redirect_to_url()","redirect_url()","ref()","reference?()","references()","references()","reflect_on_aggregation()","reflect_on_all_aggregations()","reflect_on_all_associations()","reflect_on_all_autosave_associations()","reflect_on_association()","refresh()","register()","register_alias()","register_interceptor()","register_interceptors()","register_javascript_expansion()","register_observer()","register_observers()","register_stylesheet_expansion()","regular_class_path()","regular_update()","regular_update()","regular_writer()","regular_writer()","reinit_with()","reject()","reject!()","release_connection()","release_savepoint()","release_savepoint()","release_savepoint()","release_savepoint()","reload()","reload()","reload()","reload()","reload!()","reload!()","reload_dependencies?()","reload_routes!()","reloader()","reloader_paths()","remote_addr=()","remote_ip()","remove()","remove()","remove_belongs_to()","remove_by_id()","remove_column()","remove_column_sql()","remove_columns()","remove_connection()","remove_connection()","remove_filters!()","remove_hook_for()","remove_index()","remove_index()","remove_index_sql()","remove_multiparameter_id()","remove_possible_method()","remove_references()","remove_root()","remove_silencers!()","remove_timestamps()","remove_timestamps()","remove_timestamps_sql()","rename()","rename_column()","rename_column()","rename_column_sql()","rename_index()","rename_index()","rename_key()","rename_table()","rename_table()","rename_table()","rename_table()","render()","render()","render()","render()","render()","render()","render()","render()","render_body()","render_collection()","render_collection()","render_partial()","render_partial()","render_template()","render_to_body()","render_to_body()","render_to_body()","render_to_string()","render_to_string()","reorder()","reorder_characters()","replace()","report()","repository()","request()","request_http_basic_authentication()","request_http_digest_authentication()","request_http_token_authentication()","request_method()","request_method=()","request_method_symbol()","request_parameters()","request_uri=()","request_via_redirect()","requests()","requests()","require_engine()","require_fixture_classes()","require_tzinfo()","requires_reloading?()","requires_reloading?()","rescue_action()","rescue_action_without_handler()","rescue_from()","rescue_from()","rescue_responses()","rescue_template()","rescue_templates()","rescue_with_handler()","rescue_with_handler()","reset()","reset!()","reset!()","reset!()","reset!()","reset!()","reset!()","reset!()","reset_cache()","reset_callbacks()","reset_column_information()","reset_counters()","reset_cycle()","reset_locking_column()","reset_runtime()","reset_sequence!()","reset_session()","reset_session()","resolve()","resolve()","resource()","resource_errors()","resource_location()","resourceful?()","resources()","resources_path_names()","respond()","respond_to()","respond_to()","respond_to()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to_without_attributes?()","respond_to_without_attributes?()","respond_with()","response_body=()","response_body=()","response_code()","response_from_page()","response_overridden?()","responses()","retrieve_autoindex()","retrieve_connection()","retrieve_connection_pool()","retrieve_object()","reverse()","reverse_merge()","reverse_merge()","reverse_merge()","reverse_merge!()","reverse_merge!()","reverse_merge!()","reverse_order()","reverse_update()","revert()","reverting?()","rfc2822()","rfc3339()","rfc822()","rindex()","rjust()","rollback_active_record_state!()","rollback_db_transaction()","rollback_db_transaction()","rollback_to_savepoint()","rollback_to_savepoint()","rollback_to_savepoint()","rollback_to_savepoint()","rollback_transaction_records()","root()","root()","root()","root=()","round()","route()","route_key()","route_url()","routes()","routes?()","routes_url_helpers()","rstrip()","ruby_debugger_gemfile_entry()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run_bundle()","run_callbacks()","run_gc()","run_generator()","run_in_isolation()","run_in_isolation()","run_in_transaction?()","run_initializers()","run_load_hooks()","run_profile()","run_test()","run_test()","run_validations!()","run_validations!()","run_warmup()","runtime()","runtime=()","safe_concat()","safe_concat()","safe_constantize()","safe_constantize()","safe_get()","safe_join()","sample()","sanitize()","sanitize()","sanitize()","sanitize()","sanitize_conditions()","sanitize_css()","sanitize_css()","sanitize_dom_id()","sanitize_for_mass_assignment()","sanitize_limit()","sanitize_sql()","sanitize_sql_array()","sanitize_sql_for_assignment()","sanitize_sql_for_conditions()","sanitize_sql_hash()","sanitize_sql_hash_for_assignment()","sanitize_sql_hash_for_conditions()","sanitizeable?()","sanitizeable?()","save()","save()","save()","save()","save()","save!()","save!()","save!()","save_method()","save_record?()","save_with_validation()","say()","say_with_time()","schema()","schema()","schema=()","schema_exists?()","schema_format()","schema_search_path()","schema_search_path=()","scope()","scope()","scope_for_create()","scoped()","scoping()","script()","script()","search_field()","search_field_tag()","second()","second()","seconds()","seconds_since_midnight()","seconds_since_midnight()","seconds_to_utc_offset()","secret_token()","select()","select()","select()","select()","select()","select()","select()","select_all()","select_all()","select_date()","select_datetime()","select_day()","select_first()","select_hour()","select_minute()","select_month()","select_one()","select_rows()","select_rows()","select_rows()","select_rows()","select_rows()","select_second()","select_tag()","select_time()","select_value()","select_values()","select_year()","selector()","send_action()","send_data()","send_data()","send_data()","send_file()","send_file()","send_file()","sequence_name()","sequence_name=()","serial_sequence()","serializable_hash()","serializable_hash()","serialize()","serialize()","serialized_value()","server_port()","server_software()","session()","session_auth=()","session_id_column()","session_options=()","session_store()","set()","set_callback()","set_content_type()","set_cookie()","set_default_accessors!()","set_enablement()","set_environment()","set_fixture_class()","set_locking_column()","set_logger()","set_prefix()","set_session()","set_standard_conforming_strings()","setup()","setup()","setup()","setup()","setup()","setup_controller_request_and_response()","setup_fixture_accessors()","setup_fixtures()","setup_subscriptions()","setup_with_controller()","shallow()","shallow?()","shift()","show_detailed_exceptions?()","show_variable()","silence()","silence()","silence()","silence()","silence()","silence!()","silence_auto_explain()","silence_stream()","silence_warnings()","silencer()","simple_format()","simple_selector()","since()","since()","since()","since()","since()","since()","singleton_class()","singular()","singular()","singular_route_key()","singular_table_name()","singularize()","singularize()","site()","site=()","site=()","size()","size()","size()","size()","size()","size()","skip_after_filter()","skip_around_filter()","skip_before_filter()","skip_callback()","skip_filter()","slice()","slice()","slice!()","source_root()","split()","split()","split_args()","sql()","sql_for_insert()","sql_for_insert()","sql_query_length()","sqlite_version()","squish()","squish!()","ssl_options()","ssl_options=()","ssl_options=()","stale?()","stale_session_check!()","standard_port()","standard_port?()","start()","start()","start()","start()","start()","start_document()","start_element()","start_processing()","start_transaction()","started_request_message()","stats()","status()","status=()","status=()","status_code()","status_code_for_exception()","status_message()","step_with_blockless()","sti_name()","store()","store()","store()","store()","store_accessor()","store_application_definition!()","strftime()","strict_encode64()","stringify_keys()","stringify_keys()","stringify_keys()","stringify_keys!()","stringify_keys!()","stringify_keys!()","strip()","strip_heredoc()","strip_links()","strip_tags()","structure_dump()","stylesheet_link_tag()","stylesheet_path()","stylesheets()","subclasses()","subclasses()","subdomain()","subdomains()","submit()","submit_tag()","subscribe()","subscribe()","subscribed()","substitute_at()","substitute_at()","success?()","sum()","sum()","sunday()","sunday()","superclass_delegating_accessor()","supports_add_column?()","supports_bulk_alter?()","supports_count_distinct?()","supports_ddl_transactions?()","supports_ddl_transactions?()","supports_ddl_transactions?()","supports_explain?()","supports_explain?()","supports_explain?()","supports_explain?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_insert_with_returning?()","supports_migrations?()","supports_migrations?()","supports_migrations?()","supports_primary_key?()","supports_primary_key?()","supports_savepoints?()","supports_savepoints?()","supports_savepoints?()","supports_savepoints?()","supports_statement_cache?()","supports_statement_cache?()","supports_statement_cache?()","supports_statement_cache?()","supports_streaming?()","supports_streaming?()","suppress()","suppress_messages()","svn_url?()","swap()","symbolize_keys()","symbolize_keys()","symbolize_keys()","symbolize_keys!()","symbolized_base_class()","symbolized_path_parameters()","symbolized_sti_name()","symbols()","sync_keys!()","synchronize()","t()","t()","table_alias_for()","table_alias_length()","table_alias_length()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_name()","table_name()","table_name()","table_name=()","table_name_length()","table_rows()","table_structure()","tableize()","tableize()","tables()","tag()","tag()","tagged()","tail!()","teardown()","teardown()","teardown_fixtures()","teardown_subscriptions()","telephone_field()","telephone_field_tag()","template()","template_exists?()","templates_path()","terabyte()","terabytes()","test()","test()","test()","test_dummy_clean()","test_dummy_config()","test_errors_aref()","test_errors_full_messages()","test_model_naming()","test_persisted?()","test_to_key()","test_to_param()","test_to_partial_path()","test_valid?()","tests()","tests()","tests()","text_area()","text_area_tag()","text_field()","text_field_tag()","third()","threadsafe!()","tidy_bytes()","tidy_bytes()","time()","time_ago_in_words()","time_select()","time_select()","time_tag()","time_with_block()","time_with_datetime_fallback()","time_zone_options_for_select()","time_zone_select()","time_zone_select()","timeout()","timeout=()","timeout=()","timestamped_migrations()","timestamps()","timestamps()","titlecase()","titlecase()","titleize()","titleize()","titleize()","tmp()","to()","to()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_app()","to_ary()","to_boolean_select_tag()","to_check_box_tag()","to_cleanup()","to_content_tag()","to_d()","to_date()","to_date()","to_date()","to_date()","to_date()","to_date_select_tag()","to_datetime()","to_datetime()","to_datetime()","to_datetime()","to_datetime()","to_datetime_select_tag()","to_default_s()","to_default_s()","to_default_s()","to_default_s()","to_default_s()","to_f()","to_f()","to_format()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_html()","to_html()","to_i()","to_i()","to_input_field_tag()","to_js()","to_json()","to_json()","to_key()","to_key()","to_label_tag()","to_model()","to_model()","to_number_field_tag()","to_options()","to_options!()","to_options!()","to_options!()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_partial_path()","to_partial_path()","to_path()","to_path()","to_prepare()","to_prepare()","to_prepare_blocks()","to_query()","to_query()","to_query()","to_radio_button_tag()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_sentence()","to_sql()","to_sql()","to_sql()","to_str()","to_sym()","to_tag()","to_text_area_tag()","to_time()","to_time()","to_time()","to_time()","to_time()","to_time_in_current_zone()","to_time_select_tag()","to_xml()","to_xml()","to_xml()","to_xml()","to_xml()","to_xml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml_type()","today()","today?()","today?()","today?()","toggle()","toggle!()","token_and_options()","tokenize()","tokenize()","tomorrow()","tomorrow()","tomorrow()","touch()","transaction()","transaction()","transaction()","transaction()","transaction_joinable=()","translate()","translate()","translate_exception()","translate_exception()","translate_exception()","translate_exception()","transliterate()","trigger()","trigger()","truncate()","truncate()","try()","try()","try_to_load_dependency()","tsort_each_child()","tsvector()","tv_sec()","type_cast()","type_cast()","type_cast()","type_cast_attribute_for_write()","type_to_sql()","type_to_sql()","u_unpack()","uncached()","uncached()","uncountable()","uncountable?()","uncountable?()","undefine_attribute_methods()","undefine_attribute_methods()","undefine_attribute_methods()","underscore()","underscore()","unescape()","unescape_bytea()","unescape_path()","uninstall()","uniq()","uniq_by()","uniq_by!()","unmemoize_all()","unregister()","unserialize()","unserialized_value()","unsubscribe()","unsubscribe()","until()","until()","up()","upcase()","update()","update()","update()","update()","update()","update_all()","update_attribute()","update_attribute()","update_attributes()","update_attributes()","update_attributes()","update_attributes!()","update_column()","update_counters()","update_counters()","update_sql()","update_sql()","updated()","updated?()","url()","url_field()","url_field_tag()","url_for()","url_for()","url_for()","url_for()","url_options()","url_options()","url_options()","url_options()","url_options()","url_options()","us_zones()","usage_path()","use()","use()","use()","use()","use_accept_header()","use_checkout?()","use_externals?()","use_renderer()","use_renderers()","use_svn?()","use_zone()","usec()","user()","user=()","user=()","user_agent=()","user_name_and_password()","uses_transaction()","uses_transaction?()","using_limitable_reflections?()","using_match_shorthand?()","utc()","utc()","utc?()","utc?()","utc_offset()","utc_offset()","utc_offset()","utc_time()","utc_to_local()","utf8_enforcer_tag()","uuid()","valid?()","valid?()","valid?()","valid_accept_header()","valid_alter_table_options()","valid_const?()","valid_const?()","valid_scope_name?()","validate()","validate()","validate()","validate()","validate_digest_response()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_fallbacks()","validate_nonce()","validates()","validates!()","validates_acceptance_of()","validates_associated()","validates_confirmation_of()","validates_each()","validates_exclusion_of()","validates_format_of()","validates_inclusion_of()","validates_length_of()","validates_numericality_of()","validates_presence_of()","validates_size_of()","validates_uniqueness_of()","validates_with()","validates_with()","validators()","validators_on()","value()","value()","value()","value_before_type_cast()","value_before_type_cast()","values()","values()","values_at()","values_at()","vendor()","vendor()","vendor_javascripts()","vendor_plugins()","vendor_stylesheets()","verified_request?()","verify()","verify!()","verify_authenticity_token()","verify_request?()","version()","video_path()","video_tag()","view_assigns()","view_context()","view_context_class()","view_context_class()","view_paths()","view_paths=()","view_paths=()","view_renderer()","visible_action?()","wait()","wait()","wants?()","warn()","watch()","watch_namespaces()","watchable_args()","watchable_dirs()","watchable_files()","watching?()","week()","weeks()","weeks_ago()","weeks_ago()","where()","where_values_hash()","with()","with()","with_backend()","with_backend()","with_connection()","with_default_scope()","with_dummy_app?()","with_exclusive_scope()","with_exclusive_scope()","with_fallbacks()","with_gc_stats()","with_indifferent_access()","with_indifferent_access()","with_indifferent_access()","with_local_cache()","with_lock()","with_options()","with_output_file()","with_routing()","with_scope()","with_scope_level()","with_transaction_returning_status()","with_warnings()","without()","without_modules()","word_wrap()","wrap()","wrap_parameters()","wrap_with_namespace()","write()","write()","write()","write()","write_attribute()","write_entry()","write_entry()","write_fragment()","xhr()","xhr()","xhr?()","xml()","xml()","xml_http_request()","xml_http_request()","xml_http_request?()","xmlschema()","xmlschema()","xmlschema()","year()","years()","years_ago()","years_ago()","years_since()","years_since()","yesterday()","yesterday()","yesterday()","zone()","zone()","zone=()","zones_map()","rdoc_main","readme","readme","readme","readme","readme","readme","mit-license","readme"],"longSearchIndex":["abstractcontroller","abstractcontroller::actionnotfound","abstractcontroller::assetpaths","abstractcontroller::base","abstractcontroller::callbacks","abstractcontroller::callbacks::classmethods","abstractcontroller::collector","abstractcontroller::doublerendererror","abstractcontroller::error","abstractcontroller::helpers","abstractcontroller::helpers::classmethods","abstractcontroller::layouts","abstractcontroller::layouts::classmethods","abstractcontroller::layouts::classmethods::layoutconditions","abstractcontroller::logger","abstractcontroller::railties","abstractcontroller::railties::routeshelpers","abstractcontroller::rendering","abstractcontroller::rendering::classmethods","abstractcontroller::translation","abstractcontroller::urlfor","abstractcontroller::urlfor::classmethods","abstractcontroller::viewpaths","abstractcontroller::viewpaths::classmethods","actioncontroller","actioncontroller::base","actioncontroller::caching","actioncontroller::caching::actions","actioncontroller::caching::actions::actioncachepath","actioncontroller::caching::actions::classmethods","actioncontroller::caching::configmethods","actioncontroller::caching::fragments","actioncontroller::caching::pages","actioncontroller::caching::pages::classmethods","actioncontroller::caching::sweeping","actioncontroller::compatibility","actioncontroller::conditionalget","actioncontroller::cookies","actioncontroller::datastreaming","actioncontroller::flash","actioncontroller::forcessl","actioncontroller::forcessl::classmethods","actioncontroller::head","actioncontroller::helpers","actioncontroller::helpers::classmethods","actioncontroller::hideactions","actioncontroller::hideactions::classmethods","actioncontroller::httpauthentication","actioncontroller::httpauthentication::basic","actioncontroller::httpauthentication::basic::controllermethods","actioncontroller::httpauthentication::basic::controllermethods::classmethods","actioncontroller::httpauthentication::digest","actioncontroller::httpauthentication::digest::controllermethods","actioncontroller::httpauthentication::token","actioncontroller::httpauthentication::token::controllermethods","actioncontroller::implicitrender","actioncontroller::instrumentation","actioncontroller::instrumentation::classmethods","actioncontroller::logsubscriber","actioncontroller::metal","actioncontroller::middleware","actioncontroller::middleware::actionmiddleware","actioncontroller::mimeresponds","actioncontroller::mimeresponds::classmethods","actioncontroller::paramswrapper","actioncontroller::paramswrapper::classmethods","actioncontroller::rackdelegation","actioncontroller::railtie","actioncontroller::railties","actioncontroller::railties::paths","actioncontroller::recordidentifier","actioncontroller::redirecting","actioncontroller::renderers","actioncontroller::renderers::all","actioncontroller::renderers::classmethods","actioncontroller::rendering","actioncontroller::requestforgeryprotection","actioncontroller::requestforgeryprotection::classmethods","actioncontroller::rescue","actioncontroller::responder","actioncontroller::sessionmanagement","actioncontroller::sessionmanagement::classmethods","actioncontroller::streaming","actioncontroller::templateassertions","actioncontroller::testcase","actioncontroller::testcase::behavior","actioncontroller::testcase::behavior::classmethods","actioncontroller::testcase::raiseactionexceptions","actioncontroller::testresponse","actioncontroller::testing","actioncontroller::testing::classmethods","actioncontroller::urlfor","actiondispatch","actiondispatch::assertions","actiondispatch::assertions::domassertions","actiondispatch::assertions::responseassertions","actiondispatch::assertions::routingassertions","actiondispatch::assertions::selectorassertions","actiondispatch::assertions::tagassertions","actiondispatch::beststandardssupport","actiondispatch::bodyproxy","actiondispatch::callbacks","actiondispatch::cookies","actiondispatch::cookies::cookieoverflow","actiondispatch::debugexceptions","actiondispatch::exceptionwrapper","actiondispatch::filehandler","actiondispatch::flash","actiondispatch::flash::flashhash","actiondispatch::head","actiondispatch::http","actiondispatch::http::cache","actiondispatch::http::cache::request","actiondispatch::http::cache::response","actiondispatch::http::filterparameters","actiondispatch::http::headers","actiondispatch::http::mimenegotiation","actiondispatch::http::parameterfilter","actiondispatch::http::parameters","actiondispatch::http::url","actiondispatch::http::upload","actiondispatch::http::uploadedfile","actiondispatch::integration","actiondispatch::integration::requesthelpers","actiondispatch::integration::runner","actiondispatch::integration::session","actiondispatch::integrationtest","actiondispatch::middlewarestack","actiondispatch::middlewarestack::middleware","actiondispatch::paramsparser","actiondispatch::performancetest","actiondispatch::publicexceptions","actiondispatch::railsentitystore","actiondispatch::railsmetastore","actiondispatch::railtie","actiondispatch::reloader","actiondispatch::remoteip","actiondispatch::remoteip::getip","actiondispatch::remoteip::ipspoofattackerror","actiondispatch::request","actiondispatch::requestid","actiondispatch::rescue","actiondispatch::response","actiondispatch::routing","actiondispatch::routing::mapper","actiondispatch::routing::mapper::base","actiondispatch::routing::mapper::httphelpers","actiondispatch::routing::mapper::resources","actiondispatch::routing::mapper::scoping","actiondispatch::routing::polymorphicroutes","actiondispatch::routing::redirection","actiondispatch::routing::routeset","actiondispatch::routing::routeset::mountedhelpers","actiondispatch::routing::urlfor","actiondispatch::session","actiondispatch::session::abstractstore","actiondispatch::session::cachestore","actiondispatch::session::compatibility","actiondispatch::session::cookiestore","actiondispatch::session::destroyablesession","actiondispatch::session::memcachestore","actiondispatch::session::stalesessioncheck","actiondispatch::showexceptions","actiondispatch::static","actiondispatch::testprocess","actiondispatch::testrequest","actiondispatch::testresponse","actionmailer","actionmailer::base","actionmailer::mailhelper","actionview","actionview::base","actionview::context","actionview::filesystemresolver","actionview::fixtureresolver","actionview::helpers","actionview::helpers::activemodelhelper","actionview::helpers::activemodelinstancetag","actionview::helpers::assetpaths","actionview::helpers::assettaghelper","actionview::helpers::assettaghelper::assetincludetag","actionview::helpers::assettaghelper::javascriptincludetag","actionview::helpers::assettaghelper::javascripttaghelpers","actionview::helpers::assettaghelper::javascripttaghelpers::classmethods","actionview::helpers::assettaghelper::stylesheetincludetag","actionview::helpers::assettaghelper::stylesheettaghelpers","actionview::helpers::assettaghelper::stylesheettaghelpers::classmethods","actionview::helpers::atomfeedhelper","actionview::helpers::atomfeedhelper::atombuilder","actionview::helpers::atomfeedhelper::atomfeedbuilder","actionview::helpers::cachehelper","actionview::helpers::capturehelper","actionview::helpers::csrfhelper","actionview::helpers::datehelper","actionview::helpers::datehelperinstancetag","actionview::helpers::debughelper","actionview::helpers::formbuilder","actionview::helpers::formhelper","actionview::helpers::formoptionshelper","actionview::helpers::formtaghelper","actionview::helpers::instancetag","actionview::helpers::javascripthelper","actionview::helpers::numberhelper","actionview::helpers::numberhelper::invalidnumbererror","actionview::helpers::outputsafetyhelper","actionview::helpers::recordtaghelper","actionview::helpers::renderinghelper","actionview::helpers::sanitizehelper","actionview::helpers::taghelper","actionview::helpers::texthelper","actionview::helpers::translationhelper","actionview::helpers::urlhelper","actionview::logsubscriber","actionview::lookupcontext","actionview::lookupcontext::detailscache","actionview::lookupcontext::viewpaths","actionview::nullresolver","actionview::partialrenderer","actionview::railtie","actionview::renderer","actionview::resolver","actionview::resolver::path","actionview::template","actionview::template::handlers","actionview::template::handlers::builder","actionview::template::handlers::erb","actionview::template::handlers::erubis","actionview::testcase","actionview::testcase::behavior","actionview::testcase::behavior::classmethods","actionview::testcase::behavior::locals","actionview::testcase::testcontroller","activemodel","activemodel::attributemethods","activemodel::attributemethods::classmethods","activemodel::attributemethods::classmethods::attributemethodmatcher","activemodel::blockvalidator","activemodel::callbacks","activemodel::conversion","activemodel::dirty","activemodel::eachvalidator","activemodel::errors","activemodel::lint","activemodel::lint::tests","activemodel::massassignmentsecurity","activemodel::massassignmentsecurity::blacklist","activemodel::massassignmentsecurity::classmethods","activemodel::massassignmentsecurity::error","activemodel::massassignmentsecurity::loggersanitizer","activemodel::massassignmentsecurity::permissionset","activemodel::massassignmentsecurity::sanitizer","activemodel::massassignmentsecurity::strictsanitizer","activemodel::massassignmentsecurity::whitelist","activemodel::missingattributeerror","activemodel::name","activemodel::naming","activemodel::observer","activemodel::observerarray","activemodel::observing","activemodel::observing::classmethods","activemodel::securepassword","activemodel::securepassword::classmethods","activemodel::securepassword::instancemethodsonactivation","activemodel::serialization","activemodel::serializers","activemodel::serializers::json","activemodel::serializers::xml","activemodel::strictvalidationfailed","activemodel::translation","activemodel::validations","activemodel::validations::acceptancevalidator","activemodel::validations::callbacks","activemodel::validations::callbacks::classmethods","activemodel::validations::classmethods","activemodel::validations::confirmationvalidator","activemodel::validations::exclusionvalidator","activemodel::validations::formatvalidator","activemodel::validations::helpermethods","activemodel::validations::inclusionvalidator","activemodel::validations::lengthvalidator","activemodel::validations::numericalityvalidator","activemodel::validations::presencevalidator","activemodel::validations::withvalidator","activemodel::validator","activerecord","activerecord::activerecorderror","activerecord::adapternotfound","activerecord::adapternotspecified","activerecord::aggregations","activerecord::aggregations::classmethods","activerecord::associationtypemismatch","activerecord::associations","activerecord::associations::classmethods","activerecord::attributeassignment","activerecord::attributeassignment::classmethods","activerecord::attributeassignmenterror","activerecord::attributemethods","activerecord::attributemethods::beforetypecast","activerecord::attributemethods::classmethods","activerecord::attributemethods::deprecatedunderscoreread","activerecord::attributemethods::deprecatedunderscoreread::classmethods","activerecord::attributemethods::dirty","activerecord::attributemethods::primarykey","activerecord::attributemethods::primarykey::classmethods","activerecord::attributemethods::query","activerecord::attributemethods::read","activerecord::attributemethods::read::classmethods","activerecord::attributemethods::serialization","activerecord::attributemethods::serialization::attribute","activerecord::attributemethods::serialization::classmethods","activerecord::attributemethods::timezoneconversion","activerecord::attributemethods::timezoneconversion::classmethods","activerecord::attributemethods::write","activerecord::attributemethods::write::classmethods","activerecord::autosaveassociation","activerecord::autosaveassociation::classmethods","activerecord::base","activerecord::batches","activerecord::calculations","activerecord::callbacks","activerecord::coders","activerecord::coders::yamlcolumn","activerecord::configurationerror","activerecord::connectionadapters","activerecord::connectionadapters::abstractadapter","activerecord::connectionadapters::abstractmysqladapter","activerecord::connectionadapters::column","activerecord::connectionadapters::column::format","activerecord::connectionadapters::connectionhandler","activerecord::connectionadapters::connectionmanagement","activerecord::connectionadapters::connectionpool","activerecord::connectionadapters::databaselimits","activerecord::connectionadapters::databasestatements","activerecord::connectionadapters::mysql2adapter","activerecord::connectionadapters::mysqladapter","activerecord::connectionadapters::mysqladapter::statementpool","activerecord::connectionadapters::postgresqladapter","activerecord::connectionadapters::postgresqladapter::statementpool","activerecord::connectionadapters::postgresqladapter::tabledefinition","activerecord::connectionadapters::postgresqladapter::utils","activerecord::connectionadapters::postgresqlcolumn","activerecord::connectionadapters::querycache","activerecord::connectionadapters::quoting","activerecord::connectionadapters::sqliteadapter","activerecord::connectionadapters::sqliteadapter::explainprettyprinter","activerecord::connectionadapters::sqliteadapter::statementpool","activerecord::connectionadapters::sqliteadapter::version","activerecord::connectionadapters::schemacache","activerecord::connectionadapters::schemastatements","activerecord::connectionadapters::statementpool","activerecord::connectionadapters::table","activerecord::connectionadapters::tabledefinition","activerecord::connectionnotestablished","activerecord::connectiontimeouterror","activerecord::countercache","activerecord::dangerousattributeerror","activerecord::delegation","activerecord::dynamicfindermatch","activerecord::dynamicmatchers","activerecord::dynamicscopematch","activerecord::explain","activerecord::findermethods","activerecord::fixtures","activerecord::fixtures::file","activerecord::identitymap","activerecord::identitymap::middleware","activerecord::inheritance","activerecord::inheritance::classmethods","activerecord::integration","activerecord::invalidforeignkey","activerecord::irreversiblemigration","activerecord::locking","activerecord::locking::optimistic","activerecord::locking::optimistic::classmethods","activerecord::locking::pessimistic","activerecord::logsubscriber","activerecord::migration","activerecord::migration::commandrecorder","activerecord::migrationproxy","activerecord::modelschema","activerecord::modelschema::classmethods","activerecord::multiparameterassignmenterrors","activerecord::nestedattributes","activerecord::nestedattributes::classmethods","activerecord::nestedattributes::toomanyrecords","activerecord::observer","activerecord::persistence","activerecord::persistence::classmethods","activerecord::preparedstatementinvalid","activerecord::querycache","activerecord::querycache::classmethods","activerecord::querymethods","activerecord::querying","activerecord::railtie","activerecord::railties","activerecord::railties::controllerruntime","activerecord::railties::controllerruntime::classmethods","activerecord::readonlyrecord","activerecord::readonlyattributes","activerecord::readonlyattributes::classmethods","activerecord::recordinvalid","activerecord::recordnotfound","activerecord::recordnotsaved","activerecord::recordnotunique","activerecord::reflection","activerecord::reflection::classmethods","activerecord::reflection::macroreflection","activerecord::relation","activerecord::result","activerecord::rollback","activerecord::sanitization","activerecord::sanitization::classmethods","activerecord::schema","activerecord::scoping","activerecord::scoping::classmethods","activerecord::scoping::default","activerecord::scoping::default::classmethods","activerecord::scoping::named","activerecord::scoping::named::classmethods","activerecord::serialization","activerecord::serializationtypemismatch","activerecord::sessionstore","activerecord::sessionstore::session","activerecord::sessionstore::sqlbypass","activerecord::spawnmethods","activerecord::staleobjecterror","activerecord::statementinvalid","activerecord::store","activerecord::store::classmethods","activerecord::testfixtures","activerecord::testfixtures::classmethods","activerecord::throwresult","activerecord::timestamp","activerecord::transactions","activerecord::transactions::classmethods","activerecord::translation","activerecord::unknownattributeerror","activerecord::unknownprimarykey","activerecord::validations","activerecord::validations::associatedvalidator","activerecord::validations::classmethods","activerecord::validations::uniquenessvalidator","activerecord::wrappeddatabaseexception","activeresource","activeresource::base","activeresource::connection","activeresource::custommethods","activeresource::custommethods::classmethods","activeresource::errors","activeresource::formats","activeresource::formats::jsonformat","activeresource::formats::xmlformat","activeresource::httpmock","activeresource::invalidrequesterror","activeresource::logsubscriber","activeresource::observing","activeresource::railtie","activeresource::request","activeresource::response","activeresource::sslerror","activeresource::timeouterror","activeresource::validations","activesupport","activesupport::autoload","activesupport::backtracecleaner","activesupport::base64","activesupport::basicobject","activesupport::benchmarkable","activesupport::bufferedlogger","activesupport::bufferedlogger::severity","activesupport::cache","activesupport::cache::entry","activesupport::cache::filestore","activesupport::cache::memcachestore","activesupport::cache::memorystore","activesupport::cache::nullstore","activesupport::cache::store","activesupport::cache::strategy","activesupport::cache::strategy::localcache","activesupport::cache::strategy::localcache::localstore","activesupport::callbacks","activesupport::callbacks::classmethods","activesupport::concern","activesupport::configurable","activesupport::configurable::classmethods","activesupport::configurable::configuration","activesupport::dependencies","activesupport::dependencies::classcache","activesupport::dependencies::watchstack","activesupport::deprecation","activesupport::descendantstracker","activesupport::duration","activesupport::fileupdatechecker","activesupport::filewatcher","activesupport::filewatcher::backend","activesupport::gzip","activesupport::gzip::stream","activesupport::hashwithindifferentaccess","activesupport::inflector","activesupport::inflector::inflections","activesupport::inheritableoptions","activesupport::json","activesupport::json::encoding","activesupport::json::encoding::circularreferenceerror","activesupport::json::encoding::encoder","activesupport::json::variable","activesupport::logsubscriber","activesupport::logsubscriber::testhelper","activesupport::logsubscriber::testhelper::mocklogger","activesupport::memoizable","activesupport::memoizable::instancemethods","activesupport::messageencryptor","activesupport::messageencryptor::invalidmessage","activesupport::messageverifier","activesupport::messageverifier::invalidsignature","activesupport::multibyte","activesupport::multibyte::chars","activesupport::multibyte::encodingerror","activesupport::multibyte::unicode","activesupport::multibyte::unicode::codepoint","activesupport::multibyte::unicode::unicodedatabase","activesupport::notifications","activesupport::notifications::event","activesupport::notifications::fanout","activesupport::notifications::instrumenter","activesupport::orderedhash","activesupport::orderedoptions","activesupport::railtie","activesupport::rescuable","activesupport::rescuable::classmethods","activesupport::safebuffer","activesupport::safebuffer::safeconcaterror","activesupport::stringinquirer","activesupport::taggedlogging","activesupport::testcase","activesupport::testing","activesupport::testing::assertions","activesupport::testing::declarative","activesupport::testing::isolation","activesupport::testing::isolation::forking","activesupport::testing::isolation::minitest","activesupport::testing::isolation::subprocess","activesupport::testing::isolation::testunit","activesupport::testing::pending","activesupport::testing::performance","activesupport::testing::performance::benchmarker","activesupport::testing::performance::forclassictestunit","activesupport::testing::performance::forminitest","activesupport::testing::performance::metrics","activesupport::testing::performance::metrics::amount","activesupport::testing::performance::metrics::base","activesupport::testing::performance::metrics::cputime","activesupport::testing::performance::metrics::digitalinformationunit","activesupport::testing::performance::metrics::gcruns","activesupport::testing::performance::metrics::gctime","activesupport::testing::performance::metrics::memory","activesupport::testing::performance::metrics::objects","activesupport::testing::performance::metrics::processtime","activesupport::testing::performance::metrics::time","activesupport::testing::performance::metrics::usertime","activesupport::testing::performance::metrics::walltime","activesupport::testing::performance::performer","activesupport::testing::performance::profiler","activesupport::testing::proxytestresult","activesupport::testing::remoteerror","activesupport::testing::setupandteardown","activesupport::testing::setupandteardown::classmethods","activesupport::testing::setupandteardown::forclassictestunit","activesupport::testing::setupandteardown::forminitest","activesupport::timewithzone","activesupport::timezone","activesupport::xmlmini","activesupport::xmlmini_libxmlsax","activesupport::xmlmini_libxmlsax::hashbuilder","activesupport::xmlmini_nokogirisax","activesupport::xmlmini_nokogirisax::hashbuilder","arjdbcmysql","arjdbcmysql::error","array","base64","benchmark","bigdecimal","class","css","css::generators","css::generators::assetsgenerator","css::generators::scaffoldgenerator","date","datetime","erb","erb::util","enumerable","erb","erb::generators","erb::generators::controllergenerator","erb::generators::mailergenerator","erb::generators::scaffoldgenerator","falseclass","file","float","html","html::fullsanitizer","html::linksanitizer","html::sanitizer","html::selector","html::tag","html::whitelistsanitizer","hash","i18n","i18n::exceptionhandler","i18n::railtie","io","integer","js","js::generators","js::generators::assetsgenerator","kernel","loaderror","logger","logger::simpleformatter","mime","mime::mimes","mime::type","module","mysql","mysql::result","mysql::stmt","mysql::time","nameerror","nilclass","numeric","object","object::hashwithindifferentaccess","object::integrationtest","object::missingsourcefile","plugin","process","qualifiedconstutils","rails","rails::actionmethods","rails::appbuilder","rails::application","rails::application::bootstrap","rails::application::configuration","rails::application::finisher","rails::application::railties","rails::application::routesreloader","rails::backtracecleaner","rails::commands","rails::commands::info","rails::commands::install","rails::commands::plugin","rails::commands::remove","rails::configuration","rails::console","rails::consolemethods","rails::dbconsole","rails::engine","rails::engine::configuration","rails::engine::railties","rails::generators","rails::generators::actions","rails::generators::activemodel","rails::generators::appbase","rails::generators::appgenerator","rails::generators::assetsgenerator","rails::generators::base","rails::generators::controllergenerator","rails::generators::error","rails::generators::generatedattribute","rails::generators::generatorgenerator","rails::generators::helpergenerator","rails::generators::integrationtestgenerator","rails::generators::migration","rails::generators::migration::classmethods","rails::generators::migrationgenerator","rails::generators::modelgenerator","rails::generators::namedbase","rails::generators::observergenerator","rails::generators::performancetestgenerator","rails::generators::pluginnewgenerator","rails::generators::resourcegenerator","rails::generators::resourcehelpers","rails::generators::resourceroutegenerator","rails::generators::scaffoldcontrollergenerator","rails::generators::scaffoldgenerator","rails::generators::sessionmigrationgenerator","rails::generators::taskgenerator","rails::generators::testcase","rails::info","rails::infocontroller","rails::initializable","rails::initializable::classmethods","rails::initializable::collection","rails::initializable::initializer","rails::paths","rails::paths::path","rails::paths::root","rails::plugin","rails::pluginbuilder","rails::rack","rails::rack::debugger","rails::rack::logtailer","rails::rack::logger","rails::railtie","rails::railtie::configurable","rails::railtie::configurable::classmethods","rails::railtie::configuration","rails::scriptrailsloader","rails::server","rails::server::options","rails::subtesttask","rails::testunitrailtie","railsenvironment","range","recursivehttpfetcher","regexp","sourceannotationextractor","sourceannotationextractor::annotation","string","symbol","test","test::unit","test::unit::collector","test::unit::collector::objectspace","testunit","testunit::generators","testunit::generators::controllergenerator","testunit::generators::helpergenerator","testunit::generators::integrationgenerator","testunit::generators::mailergenerator","testunit::generators::modelgenerator","testunit::generators::observergenerator","testunit::generators::performancegenerator","testunit::generators::plugingenerator","testunit::generators::scaffoldgenerator","time","trueclass","uri","activemodel::massassignmentsecurity::permissionset#+()","activesupport::duration#+()","activesupport::multibyte::chars#+()","activesupport::safebuffer#+()","activesupport::timewithzone#+()","rails::initializable::collection#+()","activesupport::duration#-()","activesupport::timewithzone#-()","time#-()","activesupport::safebuffer#<<()","activerecord::base#<=>()","activerecord::connectionadapters::sqliteadapter::version#<=>()","activesupport::multibyte::chars#<=>()","activesupport::timewithzone#<=>()","activesupport::timezone#<=>()","datetime#<=>()","time#<=>()","actiondispatch::middlewarestack::middleware#==()","actionview::filesystemresolver#==()","activerecord::base#==()","activerecord::reflection::macroreflection#==()","activerecord::relation#==()","activeresource::base#==()","activeresource::request#==()","activeresource::response#==()","activesupport::duration#==()","mime::type#==()","activerecord::base::===()","activesupport::multibyte::unicode::unicodedatabase#===()","mime::type#===()","time::===()","activesupport::multibyte::chars#=~()","activesupport::timezone#=~()","mime::type#=~()","date#>>()","actiondispatch::request#get()","actiondispatch::request#post()","actiondispatch::flash::flashhash#[]()","actiondispatch::http::headers#[]()","actiondispatch::middlewarestack#[]()","activemodel::errors#[]()","activerecord::connectionadapters::mysqladapter::statementpool#[]()","activerecord::connectionadapters::postgresqladapter::statementpool#[]()","activerecord::connectionadapters::sqliteadapter::statementpool#[]()","activerecord::connectionadapters::statementpool#[]()","activerecord::connectionadapters::tabledefinition#[]()","activerecord::fixtures#[]()","activeresource::formats::[]()","activeresource::response#[]()","activesupport::dependencies::classcache#[]()","activesupport::multibyte::chars#[]()","activesupport::orderedhash::[]()","activesupport::orderedoptions#[]()","activesupport::safebuffer#[]()","activesupport::testing::performance::metrics::[]()","activesupport::timezone::[]()","mime::[]()","activemodel::errors#[]=()","activerecord::connectionadapters::mysqladapter::statementpool#[]=()","activerecord::connectionadapters::postgresqladapter::statementpool#[]=()","activerecord::connectionadapters::sqliteadapter::statementpool#[]=()","activerecord::connectionadapters::statementpool#[]=()","activerecord::fixtures#[]=()","activeresource::response#[]=()","activesupport::hashwithindifferentaccess#[]=()","activesupport::hashwithindifferentaccess#[]=()","activesupport::multibyte::chars#[]=()","activesupport::orderedhash#[]=()","activesupport::orderedoptions#[]=()","rails::paths::root#[]=()","activesupport::callbacks::classmethods#__callback_runner_name()","activesupport::testing::proxytestresult#__replay__()","activesupport::callbacks::classmethods#__reset_runner()","rails::engine#_all_autoload_once_paths()","rails::engine#_all_autoload_paths()","rails::engine#_all_load_paths()","activerecord::attributemethods::deprecatedunderscoreread#_attribute()","activesupport::xmlmini#_dasherize()","time#_dump()","time#_dump_without_utc_flag()","time#_dump_without_zone()","activerecord::attributemethods::serialization#_field_changed?()","activesupport::orderedoptions#_get()","actioncontroller::compatibility#_handle_method_missing()","actioncontroller::renderers#_handle_render_options()","abstractcontroller::layouts::classmethods#_implied_layout_name()","abstractcontroller::callbacks::classmethods#_insert_callbacks()","actionview::context#_layout_for()","actionview::helpers::renderinghelper#_layout_for()","time::_load()","time::_load_without_utc_flag()","time::_load_without_zone()","abstractcontroller::callbacks::classmethods#_normalize_callback_options()","abstractcontroller::layouts#_normalize_options()","actioncontroller::compatibility#_normalize_options()","bigdecimal#_original_to_s()","activesupport::xmlmini#_parse_file()","abstractcontroller::viewpaths#_prefixes()","actionview::context#_prepare_context()","abstractcontroller::urlfor#_routes()","abstractcontroller::urlfor::classmethods#_routes()","actiondispatch::routing::urlfor#_routes_context()","actionview::helpers::urlhelper#_routes_context()","activesupport::testing::isolation#_run_class_setup()","actioncontroller::caching::actions#_save_fragment()","actionview::lookupcontext::detailscache#_set_detail()","actioncontroller::paramswrapper::classmethods#_set_wrapper_defaults()","actionview::helpers::formbuilder::_to_partial_path()","activemodel::validations::classmethods#_validates_default_keys()","actiondispatch::routing::urlfor#_with_routes()","abstractcontroller::layouts::classmethods#_write_layout_method()","abstractcontroller::base::abstract!()","activerecord::inheritance::classmethods#abstract_class?()","rails::railtie::abstract_railtie?()","actiondispatch::testrequest#accept=()","actiondispatch::http::mimenegotiation#accepts()","activerecord::nestedattributes::classmethods#accepts_nested_attributes_for()","activemodel::massassignmentsecurity::classmethods#accessible_attributes()","activesupport::inflector::inflections#acronym()","actioncontroller::metal::action()","actiondispatch::testrequest#action=()","abstractcontroller::layouts#action_has_layout?()","abstractcontroller::base::action_methods()","abstractcontroller::base#action_methods()","abstractcontroller::urlfor::classmethods#action_methods()","actioncontroller::hideactions::classmethods#action_methods()","activerecord::connectionadapters::abstractadapter#active?()","activerecord::connectionadapters::mysql2adapter#active?()","activerecord::connectionadapters::mysqladapter#active?()","activerecord::connectionadapters::postgresqladapter#active?()","activemodel::massassignmentsecurity::classmethods#active_authorizer()","activemodel::massassignmentsecurity::classmethods#active_authorizers()","activerecord::connectionadapters::connectionpool#active_connection?()","activerecord::connectionadapters::connectionhandler#active_connections?()","object#acts_like?()","date#acts_like_date?()","datetime#acts_like_date?()","activesupport::multibyte::chars#acts_like_string?()","string#acts_like_string?()","activesupport::timewithzone#acts_like_time?()","datetime#acts_like_time?()","time#acts_like_time?()","activerecord::connectionadapters::abstractadapter#adapter_name()","activerecord::connectionadapters::postgresqladapter#adapter_name()","actioncontroller::renderers::add()","activemodel::errors#add()","activerecord::identitymap::add()","activesupport::bufferedlogger#add()","activesupport::taggedlogging#add()","rails::paths::root#add()","activerecord::connectionadapters::abstractmysqladapter#add_column()","activerecord::connectionadapters::postgresqladapter#add_column()","activerecord::connectionadapters::schemastatements#add_column()","activerecord::connectionadapters::abstractmysqladapter#add_column_position!()","activerecord::connectionadapters::abstractmysqladapter#add_column_sql()","activesupport::testing::proxytestresult#add_error()","actionview::template::handlers::erubis#add_expr()","actionview::template::handlers::erubis#add_expr_escaped()","actionview::template::handlers::erubis#add_expr_literal()","activesupport::backtracecleaner#add_filter()","activerecord::connectionadapters::schemastatements#add_index()","activerecord::connectionadapters::abstractmysqladapter#add_index_length()","activerecord::connectionadapters::schemastatements#add_index_options()","activerecord::connectionadapters::schemastatements#add_index_sort_order()","activerecord::connectionadapters::abstractmysqladapter#add_index_sql()","activemodel::observing::classmethods#add_observer()","activerecord::observer#add_observer!()","activemodel::errors#add_on_blank()","activemodel::errors#add_on_empty()","actionview::template::handlers::erubis#add_postamble()","actionview::template::handlers::erubis#add_preamble()","actioncontroller::add_renderer()","rails::generators::resourceroutegenerator#add_resource_route()","rails::generators::controllergenerator#add_routes()","rails::generators::appbase::add_shared_options_for()","rails::generators::base::add_shebang_option!()","activesupport::backtracecleaner#add_silencer()","rails::generators::actions#add_source()","actionview::template::handlers::erubis#add_text()","activerecord::connectionadapters::schemastatements#add_timestamps()","activerecord::connectionadapters::abstractmysqladapter#add_timestamps_sql()","activerecord::transactions#add_to_transaction()","activerecord::connectionadapters::databasestatements#add_transaction_record()","nilclass::add_whiner()","activemodel::errors#added?()","activesupport::timewithzone#advance()","date#advance()","datetime#advance()","time#advance()","actiondispatch::callbacks::after()","rails::initializable::initializer#after()","activerecord::transactions::classmethods#after_commit()","abstractcontroller::callbacks::classmethods#after_filter()","rails::railtie::configuration#after_initialize()","activerecord::transactions::classmethods#after_rollback()","activemodel::validations::callbacks::classmethods#after_validation()","activesupport::duration#ago()","activesupport::timewithzone#ago()","date#ago()","datetime#ago()","numeric#ago()","time#ago()","actiondispatch::flash::flashhash#alert()","actiondispatch::flash::flashhash#alert=()","activemodel::attributemethods::classmethods#alias_attribute()","module#alias_attribute()","module#alias_method_chain()","activerecord::findermethods#all()","activeresource::base::all()","activesupport::timezone::all()","rails::application::railties#all()","rails::engine::railties#all()","rails::generators::activemodel::all()","rails::plugin::all()","time#all_day()","actioncontroller::helpers::classmethods#all_helpers_from_path()","time#all_month()","rails::paths::root#all_paths()","time#all_quarter()","time#all_week()","time#all_year()","activerecord::migration#announce()","module#anonymous?()","activerecord::relation#any?()","actioncontroller::responder#api_behavior()","actioncontroller::responder#api_location()","actiondispatch::integration::runner#app()","actiondispatch::integrationtest::app()","actiondispatch::integrationtest::app()","actiondispatch::integrationtest#app()","actiondispatch::integrationtest#app()","rails::appbuilder#app()","rails::consolemethods#app()","rails::engine#app()","rails::pluginbuilder#app()","rails::server#app()","actiondispatch::integrationtest::app=()","actiondispatch::integrationtest::app=()","rails::generators::appgenerator#app_const()","rails::generators::appgenerator#app_const_base()","rails::railtie::configuration#app_generators()","rails::railtie::configuration#app_middleware()","rails::generators::appgenerator#app_name()","rails::generators::appgenerator#app_secret()","rails::generators::pluginnewgenerator#app_templates_dir()","abstractcontroller::callbacks::classmethods#append_after_filter()","abstractcontroller::callbacks::classmethods#append_around_filter()","abstractcontroller::callbacks::classmethods#append_before_filter()","activesupport::concern#append_features()","abstractcontroller::viewpaths#append_view_path()","abstractcontroller::viewpaths::classmethods#append_view_path()","rails::application()","rails::generators::actions#application()","rails::application=()","rails::generators::pluginnewgenerator#application_definition()","rails::generators::namedbase#application_name()","actiondispatch::exceptionwrapper#application_trace()","activerecord::spawnmethods#apply_finder_options()","activerecord::findermethods#apply_join_dependency()","rails::generators::appbase#apply_rails_template()","activerecord::querymethods#arel()","activerecord::base::arel_engine()","activerecord::base::arel_table()","rails::generators::testcase::arguments()","abstractcontroller::callbacks::classmethods#around_filter()","activemodel::errors#as_json()","activemodel::serializers::json#as_json()","activesupport::json::encoding::encoder#as_json()","activesupport::json::variable#as_json()","activesupport::timewithzone#as_json()","bigdecimal#as_json()","falseclass#as_json()","nilclass#as_json()","numeric#as_json()","regexp#as_json()","string#as_json()","symbol#as_json()","trueclass#as_json()","activesupport::testing::assertions#assert_blank()","rails::generators::testcase#assert_class_method()","activesupport::testing::assertions#assert_difference()","rails::generators::testcase#assert_directory()","actiondispatch::assertions::domassertions#assert_dom_equal()","actiondispatch::assertions::domassertions#assert_dom_not_equal()","rails::generators::testcase#assert_field_default_value()","rails::generators::testcase#assert_field_type()","rails::generators::testcase#assert_file()","actiondispatch::assertions::routingassertions#assert_generates()","actiondispatch::middlewarestack#assert_index()","rails::generators::testcase#assert_instance_method()","rails::generators::testcase#assert_method()","rails::generators::testcase#assert_migration()","activesupport::testing::assertions#assert_no_difference()","rails::generators::testcase#assert_no_directory()","rails::generators::testcase#assert_no_file()","rails::generators::testcase#assert_no_migration()","actiondispatch::assertions::tagassertions#assert_no_tag()","activesupport::testing::assertions#assert_present()","actiondispatch::assertions::routingassertions#assert_recognizes()","actiondispatch::assertions::responseassertions#assert_redirected_to()","actiondispatch::assertions::responseassertions#assert_response()","actiondispatch::assertions::routingassertions#assert_routing()","actiondispatch::assertions::selectorassertions#assert_select()","actiondispatch::assertions::selectorassertions#assert_select_email()","actiondispatch::assertions::selectorassertions#assert_select_encoded()","actiondispatch::assertions::tagassertions#assert_tag()","actioncontroller::templateassertions#assert_template()","hash#assert_valid_keys()","actionview::helpers::assettaghelper::assetincludetag#asset_name()","actionview::helpers::assettaghelper::javascriptincludetag#asset_name()","actionview::helpers::assettaghelper::stylesheetincludetag#asset_name()","rails::generators::assetsgenerator#asset_name()","actionview::helpers::assettaghelper::assetincludetag#asset_tag()","actionview::helpers::assettaghelper::javascriptincludetag#asset_tag()","actionview::helpers::assettaghelper::stylesheetincludetag#asset_tag()","rails::generators::appbase#assets_gemfile_entry()","activerecord::attributeassignment#assign_attributes()","actioncontroller::compatibility#assign_shortcuts()","actiondispatch::testprocess#assigns()","activerecord::connectionadapters::schemastatements#assume_migrated_upto_version()","activesupport::timezone#at()","string#at()","date#at_beginning_of_day()","datetime#at_beginning_of_day()","time#at_beginning_of_day()","datetime#at_beginning_of_hour()","time#at_beginning_of_hour()","date#at_beginning_of_month()","time#at_beginning_of_month()","date#at_beginning_of_quarter()","time#at_beginning_of_quarter()","date#at_beginning_of_week()","time#at_beginning_of_week()","date#at_beginning_of_year()","time#at_beginning_of_year()","date#at_end_of_month()","time#at_end_of_month()","date#at_end_of_quarter()","time#at_end_of_quarter()","date#at_end_of_week()","time#at_end_of_week()","date#at_end_of_year()","time#at_end_of_year()","date#at_midnight()","datetime#at_midnight()","time#at_midnight()","actionview::helpers::atomfeedhelper#atom_feed()","file::atomic_write()","activesupport::logsubscriber::attach_to()","actionmailer::base#attachments()","actionmailer::mailhelper#attachments()","activemodel::massassignmentsecurity::classmethods#attr_accessible()","module#attr_internal()","module#attr_internal_accessor()","module#attr_internal_reader()","module#attr_internal_writer()","activemodel::massassignmentsecurity::classmethods#attr_protected()","activerecord::readonlyattributes::classmethods#attr_readonly()","activerecord::attributemethods::timezoneconversion::classmethods#attribute_cast_code()","html::selector#attribute_match()","activemodel::attributemethods#attribute_method?()","activemodel::validations::classmethods#attribute_method?()","activerecord::attributemethods::classmethods#attribute_method?()","activemodel::attributemethods::classmethods#attribute_method_affix()","activemodel::attributemethods::classmethods#attribute_method_prefix()","activemodel::attributemethods::classmethods#attribute_method_suffix()","activerecord::attributemethods::classmethods#attribute_methods_generated?()","activemodel::attributemethods#attribute_missing()","activerecord::attributemethods::classmethods#attribute_names()","activerecord::attributeassignment#attributes=()","activerecord::attributemethods::beforetypecast#attributes_before_type_cast()","activerecord::attributemethods::serialization#attributes_before_type_cast()","activemodel::massassignmentsecurity::classmethods#attributes_protected_by_default()","activemodel::securepassword::classmethods::attributes_protected_by_default()","actionview::helpers::assettaghelper#audio_path()","actionview::helpers::assettaghelper#audio_tag()","activeresource::base::auth_type()","activeresource::base::auth_type=()","activeresource::connection#auth_type=()","actioncontroller::httpauthentication::basic#authenticate()","actioncontroller::httpauthentication::digest#authenticate()","actioncontroller::httpauthentication::token#authenticate()","activemodel::securepassword::instancemethodsonactivation#authenticate()","actioncontroller::httpauthentication::basic::controllermethods#authenticate_or_request_with_http_basic()","actioncontroller::httpauthentication::digest::controllermethods#authenticate_or_request_with_http_digest()","actioncontroller::httpauthentication::token::controllermethods#authenticate_or_request_with_http_token()","actioncontroller::httpauthentication::basic::controllermethods#authenticate_with_http_basic()","actioncontroller::httpauthentication::digest::controllermethods#authenticate_with_http_digest()","actioncontroller::httpauthentication::token::controllermethods#authenticate_with_http_token()","actioncontroller::httpauthentication::digest#authentication_header()","actioncontroller::httpauthentication::basic#authentication_request()","actioncontroller::httpauthentication::digest#authentication_request()","actioncontroller::httpauthentication::token#authentication_request()","actiondispatch::request#authorization()","actionview::helpers::assettaghelper#auto_discovery_link_tag()","activesupport::bufferedlogger#auto_flushing=()","activesupport::autoload#autoload()","activesupport::autoload#autoload_at()","rails::paths::root#autoload_once()","rails::engine::configuration#autoload_once_paths()","rails::engine::configuration#autoload_paths()","rails::paths::root#autoload_paths()","activesupport::autoload#autoload_under()","activesupport::autoload#autoloads()","abstractcontroller::base#available_action?()","erb::generators::scaffoldgenerator#available_views()","activerecord::calculations#average()","activesupport::json::backend()","activesupport::json::backend=()","activesupport::xmlmini#backend=()","rails::backtrace_cleaner()","activerecord::dynamicfindermatch#bang?()","rails::generators::appgenerator::banner()","rails::generators::base::banner()","rails::generators::pluginnewgenerator::banner()","activerecord::inheritance::classmethods#base_class()","rails::generators::base::base_name()","rails::generators::base::base_root()","activerecord::migrationproxy#basename()","activerecord::persistence#becomes()","actiondispatch::callbacks::before()","rails::initializable::initializer#before()","rails::railtie::configuration#before_configuration()","rails::railtie::configuration#before_eager_load()","abstractcontroller::callbacks::classmethods#before_filter()","actioncontroller::testing::classmethods#before_filters()","rails::railtie::configuration#before_initialize()","activemodel::validations::callbacks::classmethods#before_validation()","activerecord::connectionadapters::abstractmysqladapter#begin_db_transaction()","activerecord::connectionadapters::databasestatements#begin_db_transaction()","activerecord::connectionadapters::postgresqladapter#begin_db_transaction()","date#beginning_of_day()","datetime#beginning_of_day()","time#beginning_of_day()","datetime#beginning_of_hour()","time#beginning_of_hour()","date#beginning_of_month()","time#beginning_of_month()","date#beginning_of_quarter()","time#beginning_of_quarter()","date#beginning_of_week()","time#beginning_of_week()","date#beginning_of_year()","time#beginning_of_year()","activesupport::deprecation::behavior()","activesupport::deprecation::behavior=()","activerecord::associations::classmethods#belongs_to()","activerecord::connectionadapters::table#belongs_to()","activerecord::connectionadapters::tabledefinition#belongs_to()","rails::initializable::initializer#belongs_to?()","activesupport::benchmarkable#benchmark()","activesupport::testing::performance::metrics::base#benchmark()","railsenvironment#best_install_method()","activesupport::timewithzone#between?()","activerecord::querymethods#bind()","rails::initializable::initializer#bind()","activemodel::errors#blank?()","falseclass#blank?()","nilclass#blank?()","object#blank?()","string#blank?()","trueclass#blank?()","actionmailer::mailhelper#block_format()","actiondispatch::request#body()","actiondispatch::response#body()","actiondispatch::response#body=()","actiondispatch::response#body_parts()","kernel#breakpoint()","actioncontroller::middleware::build()","actiondispatch::middlewarestack#build()","actiondispatch::middlewarestack::middleware#build()","actionview::resolver::path::build()","activerecord::relation#build()","activeresource::base::build()","rails::generators::activemodel::build()","rails::generators::appbase#build()","activerecord::querymethods#build_arel()","activesupport::cache::memcachestore::build_mem_cache()","rails::application#build_original_fullpath()","rails::generators::appbase#builder()","rails::generators::appbase#bundle_command()","actionview::helpers::formbuilder#button()","actionview::helpers::formtaghelper#button_tag()","actionview::helpers::urlhelper#button_to()","actionview::helpers::javascripthelper#button_to_function()","numeric#byte()","numeric#bytes()","actioncontroller::caching#cache()","actionview::helpers::cachehelper#cache()","activerecord::connectionadapters::querycache#cache()","activerecord::querycache::classmethods#cache()","rails::cache()","activerecord::attributemethods::read::classmethods#cache_attribute?()","activerecord::attributemethods::read::classmethods#cache_attributes()","activerecord::fixtures::cache_fixtures()","activerecord::fixtures::cache_for_connection()","activerecord::integration#cache_key()","actioncontroller::caching::pages#cache_page()","actioncontroller::caching::pages::classmethods#cache_page()","actioncontroller::caching::configmethods#cache_store()","actioncontroller::caching::configmethods#cache_store=()","actionview::base::cache_template_loading()","actionview::base::cache_template_loading=()","activerecord::attributemethods::read::classmethods#cached_attributes()","activerecord::fixtures::cached_fixtures()","actioncontroller::caching::actions::classmethods#caches_action()","actioncontroller::caching::pages::classmethods#caches_page()","actioncontroller::caching#caching_allowed?()","activerecord::calculations#calculate()","actiondispatch::remoteip::getip#calculate_ip()","actioncontroller::metal::call()","actioncontroller::middleware::actionmiddleware#call()","actioncontroller::responder::call()","actiondispatch::beststandardssupport#call()","actiondispatch::callbacks#call()","actiondispatch::cookies#call()","actiondispatch::debugexceptions#call()","actiondispatch::filehandler#call()","actiondispatch::flash#call()","actiondispatch::head#call()","actiondispatch::paramsparser#call()","actiondispatch::publicexceptions#call()","actiondispatch::reloader#call()","actiondispatch::remoteip#call()","actiondispatch::requestid#call()","actiondispatch::rescue#call()","actiondispatch::showexceptions#call()","actiondispatch::static#call()","actionview::template::handlers::builder#call()","actionview::template::handlers::erb#call()","actionview::template::handlers::erb::call()","activerecord::connectionadapters::connectionmanagement#call()","activerecord::identitymap::middleware#call()","activerecord::querycache#call()","activesupport::logsubscriber#call()","i18n::exceptionhandler#call()","logger::simpleformatter#call()","rails::application#call()","rails::engine#call()","rails::rack::debugger#call()","rails::rack::logtailer#call()","rails::rack::logger#call()","rails::rack::logger#call_app()","string#camelcase()","activesupport::inflector#camelize()","string#camelize()","rails::generators::appgenerator#camelized()","rails::generators::pluginnewgenerator#camelized()","rails::generators::actions#capify!()","activesupport::multibyte::chars#capitalize()","actionview::helpers::capturehelper#capture()","kernel#capture()","activerecord::connectionadapters::abstractadapter#case_insensitive_comparison()","activerecord::connectionadapters::abstractmysqladapter#case_insensitive_comparison()","activerecord::connectionadapters::databasestatements#case_sensitive_equality_operator()","activerecord::connectionadapters::abstractadapter#case_sensitive_modifier()","activerecord::connectionadapters::abstractmysqladapter#case_sensitive_modifier()","class#cattr_accessor()","class#cattr_reader()","class#cattr_writer()","activesupport::xmlmini_nokogirisax::hashbuilder#cdata_block()","actionview::helpers::taghelper#cdata_section()","activesupport::multibyte::chars#center()","activerecord::connectionadapters::table#change()","date#change()","datetime#change()","time#change()","activerecord::connectionadapters::postgresqladapter#change_column()","activerecord::connectionadapters::schemastatements#change_column()","activerecord::connectionadapters::abstractmysqladapter#change_column_default()","activerecord::connectionadapters::postgresqladapter#change_column_default()","activerecord::connectionadapters::schemastatements#change_column_default()","activerecord::connectionadapters::abstractmysqladapter#change_column_null()","activerecord::connectionadapters::postgresqladapter#change_column_null()","activerecord::connectionadapters::sqliteadapter#change_column_null()","activerecord::connectionadapters::abstractmysqladapter#change_column_sql()","activerecord::connectionadapters::table#change_default()","activerecord::connectionadapters::schemastatements#change_table()","activemodel::dirty#changed()","activemodel::dirty#changed?()","activemodel::dirty#changed_attributes()","activerecord::autosaveassociation#changed_for_autosave?()","activemodel::dirty#changes()","activesupport::xmlmini_nokogirisax::hashbuilder#characters()","activerecord::connectionadapters::abstractmysqladapter#charset()","actionview::helpers::formbuilder#check_box()","actionview::helpers::formhelper#check_box()","actionview::helpers::instancetag::check_box_checked?()","actionview::helpers::formtaghelper#check_box_tag()","rails::generators::namedbase::check_class_collision()","activemodel::eachvalidator#check_validity!()","activemodel::validations::exclusionvalidator#check_validity!()","activemodel::validations::formatvalidator#check_validity!()","activemodel::validations::inclusionvalidator#check_validity!()","activemodel::validations::lengthvalidator#check_validity!()","activemodel::validations::numericalityvalidator#check_validity!()","activerecord::connectionadapters::connectionpool#checkin()","activerecord::connectionadapters::connectionpool#checkout()","rails::paths::path#children()","datetime::civil_from_format()","class#class_attribute()","kernel#class_eval()","activerecord::reflection::macroreflection#class_name()","rails::generators::namedbase#class_name()","activerecord::inheritance::classmethods#class_of_active_record_descendant()","rails::generators::namedbase#class_path()","activesupport::inflector#classify()","string#classify()","activesupport::backtracecleaner#clean()","activesupport::cache::filestore#cleanup()","activesupport::cache::memorystore#cleanup()","activesupport::cache::nullstore#cleanup()","activesupport::cache::store#cleanup()","actiondispatch::reloader::cleanup!()","actiondispatch::flash::flashhash#clear()","activemodel::errors#clear()","activerecord::connectionadapters::mysqladapter::statementpool#clear()","activerecord::connectionadapters::postgresqladapter::statementpool#clear()","activerecord::connectionadapters::sqliteadapter::statementpool#clear()","activerecord::connectionadapters::statementpool#clear()","activerecord::identitymap::clear()","activesupport::cache::filestore#clear()","activesupport::cache::memcachestore#clear()","activesupport::cache::memorystore#clear()","activesupport::cache::nullstore#clear()","activesupport::cache::store#clear()","activesupport::cache::strategy::localcache::localstore#clear()","activesupport::descendantstracker::clear()","activesupport::inflector::inflections#clear()","activesupport::orderedhash#clear()","activerecord::connectionadapters::schemacache#clear!()","activesupport::dependencies::classcache#clear!()","abstractcontroller::base::clear_action_methods!()","activerecord::base::clear_active_connections!()","activerecord::connectionadapters::connectionhandler#clear_active_connections!()","activerecord::connectionadapters::connectionhandler#clear_all_connections!()","actionview::resolver#clear_cache()","activerecord::connectionadapters::abstractadapter#clear_cache!()","activerecord::connectionadapters::connectionpool#clear_cache!()","activerecord::connectionadapters::mysqladapter#clear_cache!()","activerecord::connectionadapters::postgresqladapter#clear_cache!()","activerecord::connectionadapters::sqliteadapter#clear_cache!()","abstractcontroller::helpers::classmethods#clear_helpers()","activerecord::connectionadapters::querycache#clear_query_cache()","activerecord::connectionadapters::connectionhandler#clear_reloadable_connections!()","activerecord::connectionadapters::connectionpool#clear_reloadable_connections!()","actioncontroller::mimeresponds::classmethods#clear_respond_to()","activerecord::connectionadapters::connectionpool#clear_stale_cached_connections!()","activerecord::connectionadapters::schemacache#clear_table_cache!()","activesupport::taggedlogging#clear_tags!()","activerecord::connectionadapters::mysqladapter#client_encoding()","activerecord::connectionadapters::postgresqladapter#client_min_messages()","activerecord::connectionadapters::postgresqladapter#client_min_messages=()","activeresource::base#clone()","activesupport::safebuffer#clone_empty()","actiondispatch::bodyproxy#close()","actiondispatch::response#close()","activerecord::connectionadapters::abstractadapter#close()","activesupport::bufferedlogger#close()","activesupport::gzip::stream#close()","actiondispatch::bodyproxy#closed?()","actiondispatch::response#code()","activerecord::connectionadapters::abstractmysqladapter#collation()","actiondispatch::routing::mapper::resources#collection()","activeresource::base::collection_name()","activeresource::base#collection_path()","activeresource::base::collection_path()","actionview::helpers::formbuilder#collection_select()","actionview::helpers::formoptionshelper#collection_select()","activesupport::logsubscriber#color()","rails::application::configuration#colorize_logging()","rails::application::configuration#colorize_logging=()","activerecord::connectionadapters::table#column()","activerecord::connectionadapters::tabledefinition#column()","activerecord::modelschema::classmethods#column_defaults()","activerecord::connectionadapters::schemastatements#column_exists?()","activerecord::connectionadapters::table#column_exists?()","activerecord::connectionadapters::databaselimits#column_name_length()","activerecord::modelschema::classmethods#column_names()","activerecord::connectionadapters::connectionpool#columns()","activerecord::connectionadapters::postgresqladapter#columns()","activerecord::connectionadapters::schemacache#columns()","activerecord::connectionadapters::schemastatements#columns()","activerecord::modelschema::classmethods#columns()","activerecord::connectionadapters::schemastatements#columns_for_remove()","activerecord::connectionadapters::connectionpool#columns_hash()","activerecord::connectionadapters::schemacache#columns_hash()","activerecord::modelschema::classmethods#columns_hash()","activerecord::connectionadapters::databaselimits#columns_per_multicolumn_index()","activerecord::connectionadapters::databaselimits#columns_per_table()","rails::generators::appbase#comment_if()","activerecord::connectionadapters::databasestatements#commit_db_transaction()","activerecord::connectionadapters::postgresqladapter#commit_db_transaction()","activerecord::connectionadapters::databasestatements#commit_transaction_records()","activesupport::timewithzone#comparable_time()","time#compare_with_coercion()","time#compare_without_coercion()","activesupport::configurable::configuration#compile_methods!()","activesupport::configurable::configuration::compile_methods!()","rails::application::configuration#compiled_asset_path()","activesupport::multibyte::chars#compose()","activesupport::multibyte::unicode#compose_codepoints()","activerecord::aggregations::classmethods#composed_of()","activesupport::gzip::compress()","activesupport::cache::entry#compressed?()","rails::rack::logger#compute_tags()","activerecord::inheritance::classmethods#compute_type()","actionview::helpers::texthelper#concat()","activesupport::safebuffer#concat()","abstractcontroller::layouts#conditional_layout?()","abstractcontroller::layouts::classmethods::layoutconditions#conditional_layout?()","actionview::testcase::behavior#config()","activesupport::configurable#config()","activesupport::configurable::classmethods#config()","rails::appbuilder#config()","rails::engine#config()","rails::plugin#config()","rails::pluginbuilder#config()","rails::railtie#config()","activesupport::configurable::classmethods#config_accessor()","rails::appbuilder#configru()","rails::configuration()","activerecord::base::configurations()","activesupport::configurable::classmethods#configure()","rails::railtie::configurable::classmethods#configure()","activerecord::base::connected?()","activerecord::connectionadapters::connectionhandler#connected?()","activerecord::connectionadapters::connectionpool#connected?()","activerecord::base::connection()","activerecord::base#connection()","activerecord::connectionadapters::connectionpool#connection()","activerecord::migration#connection()","activerecord::sessionstore::sqlbypass::connection()","activeresource::base#connection()","activeresource::base::connection()","activerecord::base::connection_config()","activerecord::base::connection_handler()","activerecord::base::connection_id()","activerecord::base::connection_id=()","activerecord::base::connection_pool()","activerecord::sessionstore::sqlbypass::connection_pool()","rails::infocontroller#consider_all_requests_local?()","rails::railtie::console()","activesupport::inflector#constantize()","string#constantize()","actiondispatch::routing::mapper::scoping#constraints()","activerecord::findermethods#construct_join_dependency_for_association_find()","activerecord::findermethods#construct_limited_ids_condition()","activerecord::findermethods#construct_relation_for_association_calculations()","activerecord::findermethods#construct_relation_for_association_find()","activesupport::multibyte::chars::consumes?()","html::whitelistsanitizer#contains_bad_protocols?()","activerecord::modelschema::classmethods#content_columns()","actionview::helpers::capturehelper#content_for()","actionview::helpers::capturehelper#content_for?()","actiondispatch::request#content_length()","actiondispatch::http::mimenegotiation#content_mime_type()","actionview::helpers::taghelper#content_tag()","actionview::helpers::recordtaghelper#content_tag_for()","actioncontroller::metal#content_type()","actiondispatch::http::mimenegotiation#content_type()","actioncontroller::metal#content_type=()","actiondispatch::routing::mapper::scoping#controller()","rails::consolemethods#controller()","actioncontroller::testcase::behavior::classmethods#controller_class()","actioncontroller::testcase::behavior::classmethods#controller_class=()","rails::generators::resourcehelpers#controller_class_name()","rails::generators::resourcehelpers#controller_class_path()","rails::generators::resourcehelpers#controller_file_name()","rails::generators::resourcehelpers#controller_file_path()","rails::generators::resourcehelpers#controller_i18n_scope()","actioncontroller::metal::controller_name()","actioncontroller::metal#controller_name()","abstractcontroller::base::controller_path()","abstractcontroller::base#controller_path()","actionmailer::base::controller_path()","actionview::testcase::testcontroller#controller_path=()","rails::generators::appbase#convert_database_option_for_jruby()","activesupport::hashwithindifferentaccess#convert_key()","activesupport::hashwithindifferentaccess#convert_key()","actionview::helpers::formhelper#convert_to_model()","activesupport::hashwithindifferentaccess#convert_value()","activesupport::hashwithindifferentaccess#convert_value()","actiondispatch::request#cookie_jar()","actiondispatch::integration::session#cookies()","actiondispatch::response#cookies()","actiondispatch::testprocess#cookies()","actiondispatch::testrequest#cookies()","activerecord::migration#copy()","js::generators::assetsgenerator#copy_javascript()","css::generators::assetsgenerator#copy_stylesheet()","css::generators::scaffoldgenerator#copy_stylesheet()","erb::generators::controllergenerator#copy_view_files()","erb::generators::scaffoldgenerator#copy_view_files()","activemodel::errors#count()","activerecord::calculations#count()","activerecord::querying#count_by_sql()","activemodel::observing::classmethods#count_observers()","activerecord::connectionadapters::mysql2adapter#create()","activerecord::persistence::classmethods#create()","activerecord::relation#create()","activeresource::base::create()","activeresource::base#create()","activesupport::cache::entry::create()","activesupport::timezone::create()","activerecord::relation#create!()","activerecord::validations::classmethods#create!()","rails::generators::appgenerator#create_active_record_files()","rails::generators::appgenerator#create_app_files()","rails::generators::pluginnewgenerator#create_app_files()","rails::generators::appgenerator#create_boot_file()","rails::generators::appgenerator#create_config_files()","rails::generators::pluginnewgenerator#create_config_files()","rails::generators::controllergenerator#create_controller_files()","rails::generators::scaffoldcontrollergenerator#create_controller_files()","activerecord::connectionadapters::abstractmysqladapter#create_database()","activerecord::connectionadapters::postgresqladapter#create_database()","rails::generators::appgenerator#create_db_files()","rails::generators::appgenerator#create_doc_files()","rails::generators::pluginnewgenerator#create_dummy_app()","testunit::generators::modelgenerator#create_fixture_file()","activerecord::fixtures::create_fixtures()","object#create_fixtures()","rails::generators::testcase#create_generated_attribute()","rails::generators::generatorgenerator#create_generator_files()","rails::generators::helpergenerator#create_helper_files()","testunit::generators::helpergenerator#create_helper_files()","rails::generators::pluginnewgenerator#create_images_directory()","rails::generators::pluginnewgenerator#create_javascript_files()","rails::generators::appgenerator#create_lib_files()","rails::generators::pluginnewgenerator#create_lib_files()","rails::generators::appgenerator#create_log_files()","activesupport::testing::performance::profiler#create_path_and_open_file()","rails::generators::appgenerator#create_public_files()","rails::generators::pluginnewgenerator#create_public_stylesheets_files()","activerecord::reflection::classmethods#create_reflection()","rails::generators::appbase#create_root()","rails::generators::appgenerator#create_root_files()","rails::generators::pluginnewgenerator#create_root_files()","erb::generators::scaffoldgenerator#create_root_folder()","activerecord::connectionadapters::abstractadapter#create_savepoint()","activerecord::connectionadapters::abstractmysqladapter#create_savepoint()","activerecord::connectionadapters::postgresqladapter#create_savepoint()","activerecord::connectionadapters::sqliteadapter#create_savepoint()","rails::generators::appgenerator#create_script_files()","rails::generators::pluginnewgenerator#create_script_files()","activerecord::connectionadapters::schemastatements#create_table()","rails::generators::taskgenerator#create_task_files()","rails::generators::pluginnewgenerator#create_test_dummy_files()","testunit::generators::modelgenerator#create_test_file()","rails::generators::appgenerator#create_test_files()","rails::generators::pluginnewgenerator#create_test_files()","testunit::generators::controllergenerator#create_test_files()","testunit::generators::integrationgenerator#create_test_files()","testunit::generators::mailergenerator#create_test_files()","testunit::generators::observergenerator#create_test_files()","testunit::generators::performancegenerator#create_test_files()","testunit::generators::plugingenerator#create_test_files()","testunit::generators::scaffoldgenerator#create_test_files()","rails::generators::appgenerator#create_tmp_files()","rails::generators::appgenerator#create_vendor_files()","activerecord::querymethods#create_with()","activerecord::dynamicfindermatch#creator?()","actionview::helpers::csrfhelper#csrf_meta_tag()","actionview::helpers::csrfhelper#csrf_meta_tags()","actiondispatch::assertions::selectorassertions#css_select()","date::current()","datetime::current()","time::current()","actionview::helpers::texthelper#current_cycle()","activerecord::connectionadapters::abstractmysqladapter#current_database()","activerecord::connectionadapters::postgresqladapter#current_database()","activesupport::xmlmini_libxmlsax::hashbuilder#current_hash()","activesupport::xmlmini_nokogirisax::hashbuilder#current_hash()","actionview::helpers::urlhelper#current_page?()","activerecord::connectionadapters::abstractadapter#current_savepoint_name()","activerecord::connectionadapters::postgresqladapter#current_schema()","actionview::helpers::assettaghelper::assetincludetag#custom_dir()","actionview::helpers::assettaghelper::javascriptincludetag#custom_dir()","actionview::helpers::assettaghelper::stylesheetincludetag#custom_dir()","activeresource::custommethods::classmethods#custom_method_collection_url()","actionview::helpers::texthelper#cycle()","process::daemon()","activerecord::attributemethods::classmethods#dangerous_attribute_method?()","activerecord::attributemethods::primarykey::classmethods#dangerous_attribute_method?()","activesupport::inflector#dasherize()","string#dasherize()","activerecord::sessionstore::session#data()","activerecord::sessionstore::sqlbypass#data()","activerecord::sessionstore::sqlbypass::data_column()","activerecord::sessionstore::session::data_column_name()","activerecord::sessionstore::sqlbypass::data_column_name()","activerecord::sessionstore::session::data_column_size_limit()","rails::application::configuration#database_configuration()","rails::generators::appbase#database_gemfile_entry()","rails::appbuilder#database_yml()","actionview::helpers::datehelper#date_select()","actionview::helpers::formbuilder#date_select()","actionview::helpers::datehelper#datetime_select()","actionview::helpers::formbuilder#datetime_select()","numeric#day()","numeric#days()","time::days_in_month()","date#days_to_week_start()","time#days_to_week_start()","rails::appbuilder#db()","actionview::helpers::debughelper#debug()","activemodel::massassignmentsecurity::sanitizer#debug_protected_attribute_removal()","kernel#debugger()","activeresource::formats::jsonformat#decode()","activeresource::formats::xmlformat#decode()","activesupport::json::decode()","activesupport::base64::decode64()","base64::decode64()","actioncontroller::httpauthentication::basic#decode_credentials()","actioncontroller::httpauthentication::digest#decode_credentials()","actioncontroller::httpauthentication::digest#decode_credentials_header()","activesupport::multibyte::chars#decompose()","activesupport::multibyte::unicode#decompose_codepoints()","activesupport::gzip::decompress()","activesupport::inflector#deconstantize()","string#deconstantize()","activerecord::persistence#decrement()","activesupport::cache::filestore#decrement()","activesupport::cache::memorystore#decrement()","activesupport::cache::nullstore#decrement()","activesupport::cache::store#decrement()","activerecord::persistence#decrement!()","activerecord::countercache#decrement_counter()","activerecord::connectionadapters::abstractadapter#decrement_open_transactions()","activesupport::messageencryptor#decrypt()","activesupport::messageencryptor#decrypt_and_verify()","hash#deep_dup()","hash#deep_merge()","hash#deep_merge!()","actiondispatch::request#deep_munge()","actionmailer::base::default()","activesupport::hashwithindifferentaccess#default()","activesupport::hashwithindifferentaccess#default()","rails::generators::generatedattribute#default()","railsenvironment::default()","railsenvironment::default=()","actioncontroller::responder#default_action()","rails::generators::base::default_aliases_for_option()","actioncontroller::compatibility::default_charset=()","rails::generators::base::default_for_option()","rails::generators::base::default_generator_root()","date#default_inspect()","datetime#default_inspect()","rails::application#default_middleware_stack()","rails::engine#default_middleware_stack()","rails::server#default_options()","activerecord::connectionadapters::sqliteadapter#default_primary_key_type()","actioncontroller::implicitrender#default_render()","actioncontroller::responder#default_render()","activerecord::scoping::default::classmethods#default_scope()","activerecord::connectionadapters::databasestatements#default_sequence_name()","rails::generators::base::default_source_root()","activerecord::base::default_timezone()","actiondispatch::integration::runner#default_url_options()","actiondispatch::routing::mapper::base#default_url_options()","actiondispatch::integration::runner#default_url_options=()","actiondispatch::routing::mapper::base#default_url_options=()","rails::generators::base::default_value_for_option()","actiondispatch::routing::mapper::scoping#defaults()","activerecord::schema::define()","activemodel::attributemethods::classmethods#define_attribute_method()","activemodel::attributemethods::classmethods#define_attribute_methods()","activerecord::attributemethods::classmethods#define_attribute_methods()","activerecord::observer#define_callbacks()","activesupport::callbacks::classmethods#define_callbacks()","activerecord::attributemethods::deprecatedunderscoreread::classmethods#define_method__attribute()","activerecord::attributemethods::primarykey::classmethods#define_method_attribute()","activerecord::attributemethods::read::classmethods#define_method_attribute()","activerecord::attributemethods::timezoneconversion::classmethods#define_method_attribute=()","activerecord::attributemethods::write::classmethods#define_method_attribute=()","activemodel::callbacks#define_model_callbacks()","rails::generators::appgenerator#defined_app_const_base()","rails::generators::appgenerator#defined_app_const_base?()","rails::generators::appgenerator#defined_app_name()","module#delegate()","activerecord::delegation::delegate_to_scoped_klass()","actioncontroller::testcase::behavior#delete()","actiondispatch::flash::flashhash#delete()","actiondispatch::integration::requesthelpers#delete()","actiondispatch::middlewarestack#delete()","actiondispatch::routing::mapper::httphelpers#delete()","activemodel::errors#delete()","activerecord::connectionadapters::databasestatements#delete()","activerecord::connectionadapters::mysqladapter::statementpool#delete()","activerecord::connectionadapters::postgresqladapter::statementpool#delete()","activerecord::connectionadapters::statementpool#delete()","activerecord::persistence#delete()","activerecord::relation#delete()","activeresource::base::delete()","activeresource::connection#delete()","activeresource::custommethods#delete()","activeresource::custommethods::delete()","activesupport::cache::store#delete()","activesupport::hashwithindifferentaccess#delete()","activesupport::hashwithindifferentaccess#delete()","activesupport::orderedhash#delete()","actiondispatch::request#delete?()","activerecord::relation#delete_all()","actiondispatch::response#delete_cookie()","activesupport::cache::filestore#delete_entry()","activesupport::cache::strategy::localcache::localstore#delete_entry()","activesupport::orderedhash#delete_if()","activesupport::cache::filestore#delete_matched()","activesupport::cache::memorystore#delete_matched()","activesupport::cache::nullstore#delete_matched()","activesupport::cache::store#delete_matched()","activeresource::httpmock::delete_responses_to_replace()","activerecord::connectionadapters::databasestatements#delete_sql()","actiondispatch::integration::requesthelpers#delete_via_redirect()","activesupport::inflector#demodulize()","string#demodulize()","activemodel::massassignmentsecurity::blacklist#deny?()","activemodel::massassignmentsecurity::permissionset#deny?()","activemodel::massassignmentsecurity::whitelist#deny?()","module#deprecate()","activesupport::deprecation::deprecate_methods()","activesupport::deprecation::deprecated_method_warning()","rails::generators::base::desc()","rails::subtesttask#desc()","activesupport::descendantstracker#descendants()","activesupport::descendantstracker::descendants()","activerecord::inheritance::classmethods#descends_from_active_record?()","activesupport::testing::declarative::describe()","rails::generators::testcase::destination()","actiondispatch::session::destroyablesession#destroy()","activerecord::persistence#destroy()","activerecord::relation#destroy()","activerecord::sessionstore::sqlbypass#destroy()","activeresource::base#destroy()","rails::generators::activemodel#destroy()","activerecord::relation#destroy_all()","actiondispatch::session::cachestore#destroy_session()","activerecord::persistence#destroyed?()","actionview::lookupcontext::viewpaths#detail_args_for()","abstractcontroller::viewpaths#details_for_lookup()","actioncontroller::testcase::behavior::classmethods#determine_default_controller_class()","actionview::testcase::behavior::classmethods#determine_default_helper_class()","rails::commands::install#determine_install_method()","hash#diff()","activesupport::descendantstracker#direct_descendants()","activesupport::descendantstracker::direct_descendants()","activesupport::multibyte::unicode::unicodedatabase::dirname()","activerecord::connectionadapters::querycache::dirties_query_cache()","activemodel::observerarray#disable()","actionview::lookupcontext::detailscache#disable_cache()","activerecord::connectionadapters::querycache#disable_query_cache!()","activerecord::connectionadapters::abstractadapter#disable_referential_integrity()","activemodel::observer#disabled_for?()","activemodel::observerarray#disabled_for?()","activemodel::observerarray#disabled_observer_stack()","activemodel::observerarray#disabled_observers()","actiondispatch::flash::flashhash#discard()","activerecord::connectionadapters::abstractadapter#disconnect!()","activerecord::connectionadapters::connectionpool#disconnect!()","activerecord::connectionadapters::mysql2adapter#disconnect!()","activerecord::connectionadapters::mysqladapter#disconnect!()","activerecord::connectionadapters::postgresqladapter#disconnect!()","activerecord::connectionadapters::sqliteadapter#disconnect!()","actioncontroller::rackdelegation#dispatch()","actioncontroller::responder#display()","sourceannotationextractor#display()","actioncontroller::responder#display_errors()","actionview::helpers::datehelper#distance_of_time_in_words()","actionview::helpers::datehelper#distance_of_time_in_words_to_now()","activerecord::connectionadapters::schemastatements#distinct()","actionview::helpers::recordtaghelper#div_for()","rails::appbuilder#doc()","actioncontroller::recordidentifier#dom_class()","actioncontroller::recordidentifier#dom_id()","actiondispatch::http::url#domain()","activerecord::migration#down()","activesupport::multibyte::chars#downcase()","recursivehttpfetcher#download()","activerecord::connectionadapters::schemastatements#drop_table()","activesupport::timewithzone#dst?()","rails::generators::pluginnewgenerator#dummy_path()","activeresource::base#dup()","activesupport::hashwithindifferentaccess#dup()","activesupport::hashwithindifferentaccess#dup()","bigdecimal#duplicable?()","class#duplicable?()","falseclass#duplicable?()","module#duplicable?()","nilclass#duplicable?()","numeric#duplicable?()","object#duplicable?()","symbol#duplicable?()","trueclass#duplicable?()","actiondispatch::flash::flashhash#each()","actiondispatch::middlewarestack#each()","activemodel::errors#each()","activerecord::connectionadapters::mysqladapter::statementpool#each()","activerecord::connectionadapters::postgresqladapter::statementpool#each()","activerecord::connectionadapters::sqliteadapter::statementpool#each()","activerecord::connectionadapters::statementpool#each()","activerecord::fixtures#each()","activerecord::fixtures::file#each()","activerecord::result#each()","activesupport::dependencies::watchstack#each()","activesupport::orderedhash#each()","activesupport::orderedhash#each_key()","activesupport::orderedhash#each_pair()","activemodel::observerarray#each_subclass_array()","activesupport::orderedhash#each_value()","enumerable#each_with_object()","activesupport::autoload#eager_autoload()","activesupport::autoload::eager_autoload!()","activerecord::querymethods#eager_load()","rails::paths::root#eager_load()","rails::engine#eager_load!()","rails::railtie#eager_load!()","rails::engine::configuration#eager_load_paths()","activerecord::relation#eager_loading?()","activeresource::base::element_name()","activeresource::base#element_path()","activeresource::base::element_path()","actionview::helpers::formhelper#email_field()","actionview::helpers::formtaghelper#email_field_tag()","actionview::helpers::formbuilder#emitted_hidden_id?()","actiondispatch::flash::flashhash#empty?()","activemodel::errors#empty?()","activerecord::relation#empty?()","activesupport::dependencies::classcache#empty?()","rails::generators::appbase#empty_directory_with_gitkeep()","activerecord::connectionadapters::databasestatements#empty_insert_statement_value()","activerecord::connectionadapters::sqliteadapter#empty_insert_statement_value()","activerecord::connectionadapters::abstractmysqladapter::emulate_booleans()","activemodel::observerarray#enable()","activerecord::connectionadapters::querycache#enable_query_cache!()","kernel#enable_warnings()","activerecord::identitymap::enabled()","activerecord::identitymap::enabled=()","activerecord::identitymap::enabled?()","activeresource::base#encode()","activeresource::formats::jsonformat#encode()","activeresource::formats::xmlformat#encode()","activesupport::json::encode()","activesupport::json::encoding::encoder#encode()","actionview::template#encode!()","activesupport::base64::encode64()","base64::encode64()","activesupport::base64::encode64s()","actioncontroller::httpauthentication::basic#encode_credentials()","actioncontroller::httpauthentication::digest#encode_credentials()","actioncontroller::httpauthentication::token#encode_credentials()","activesupport::json::variable#encode_json()","falseclass#encode_json()","hash#encode_json()","nilclass#encode_json()","numeric#encode_json()","string#encode_json()","trueclass#encode_json()","activerecord::base#encode_with()","activesupport::orderedhash#encode_with()","activesupport::safebuffer#encode_with()","activesupport::timewithzone#encode_with()","bigdecimal#encode_with()","activerecord::connectionadapters::postgresqladapter#encoding()","rails::application::configuration#encoding=()","string#encoding_aware?()","activesupport::messageencryptor#encrypt()","activesupport::messageencryptor#encrypt_and_sign()","activesupport::xmlmini_nokogirisax::hashbuilder#end_document()","activesupport::xmlmini_nokogirisax::hashbuilder#end_element()","date#end_of_day()","datetime#end_of_day()","time#end_of_day()","datetime#end_of_hour()","time#end_of_hour()","date#end_of_month()","time#end_of_month()","date#end_of_quarter()","time#end_of_quarter()","date#end_of_week()","time#end_of_week()","date#end_of_year()","time#end_of_year()","activemodel::observerarray#end_transaction()","rails::engine#endpoint()","rails::engine::endpoint()","activesupport::json::engine()","activesupport::json::engine=()","rails::engine::railties::engines()","activerecord::testfixtures#enlist_fixture_connections()","actionview::helpers::atomfeedhelper::atomfeedbuilder#entry()","sourceannotationextractor::enumerate()","actioncontroller::metal#env()","rails::env()","rails::env=()","rails::application#env_config()","rails::engine#env_config()","actiondispatch::http::filterparameters#env_filter()","activesupport::testing::performance::benchmarker#environment()","rails::generators::actions#environment()","rails::commands::plugin#environment=()","actionview::filesystemresolver#eql?()","activerecord::base#eql?()","activeresource::base#eql?()","activesupport::timewithzone#eql?()","time#eql?()","time#eql_with_coercion()","time#eql_without_coercion()","activesupport::xmlmini_nokogirisax::hashbuilder#error()","actionview::helpers::activemodelinstancetag#error_message()","activerecord::connectionadapters::mysql2adapter#error_number()","actionview::helpers::activemodelinstancetag#error_wrapping()","activemodel::validations#errors()","activeresource::validations#errors()","rails::generators::activemodel#errors()","activesupport::json::encoding::encoder#escape()","activerecord::connectionadapters::postgresqladapter#escape_bytea()","actiondispatch::filehandler#escape_glob_chars()","actionview::helpers::javascripthelper#escape_javascript()","actionview::helpers::taghelper#escape_once()","activerecord::base::establish_connection()","activerecord::connectionadapters::connectionhandler#establish_connection()","actiondispatch::http::cache::response#etag=()","actiondispatch::http::cache::request#etag_matches?()","activerecord::scoping::default::classmethods#evaluate_default_scope()","numeric#exabyte()","numeric#exabytes()","activerecord::spawnmethods#except()","hash#except()","hash#except!()","actionview::helpers::texthelper#excerpt()","enumerable#exclude?()","string#exclude?()","activerecord::connectionadapters::databasestatements#exec_delete()","activerecord::connectionadapters::mysql2adapter#exec_delete()","activerecord::connectionadapters::mysqladapter#exec_delete()","activerecord::connectionadapters::postgresqladapter#exec_delete()","activerecord::connectionadapters::sqliteadapter#exec_delete()","activerecord::connectionadapters::databasestatements#exec_insert()","activerecord::connectionadapters::mysql2adapter#exec_insert()","activerecord::connectionadapters::databasestatements#exec_query()","activerecord::connectionadapters::mysql2adapter#exec_query()","activerecord::connectionadapters::mysqladapter#exec_query()","activerecord::connectionadapters::postgresqladapter#exec_query()","activerecord::connectionadapters::sqliteadapter#exec_query()","rails::scriptrailsloader::exec_script_rails!()","activerecord::connectionadapters::databasestatements#exec_update()","activerecord::connectionadapters::mysql2adapter#exec_update()","activerecord::connectionadapters::mysqladapter#exec_update()","activerecord::connectionadapters::postgresqladapter#exec_update()","activerecord::connectionadapters::sqliteadapter#exec_update()","activerecord::connectionadapters::mysql2adapter#exec_without_stmt()","activerecord::connectionadapters::abstractmysqladapter#execute()","activerecord::connectionadapters::databasestatements#execute()","activerecord::connectionadapters::mysql2adapter#execute()","activerecord::connectionadapters::postgresqladapter#execute()","activesupport::fileupdatechecker#execute()","activerecord::connectionadapters::mysqladapter#execute_and_free()","activesupport::execute_hook()","activesupport::fileupdatechecker#execute_if_updated()","actiondispatch::railsentitystore#exist?()","activesupport::cache::store#exist?()","rails::paths::path#existent()","rails::paths::path#existent_directories()","actionview::lookupcontext::viewpaths#exists?()","activerecord::findermethods#exists?()","activeresource::base#exists?()","activeresource::base::exists?()","rails::generators::appgenerator::exit_on_failure?()","activesupport::cache::expand_cache_key()","activerecord::sanitization::classmethods#expand_hash_conditions_for_aggregates()","rails::paths::path#expanded()","actioncontroller::httpauthentication::digest#expected_response()","activerecord::connectionadapters::abstractadapter#expire()","actioncontroller::caching::actions#expire_action()","actioncontroller::caching::fragments#expire_fragment()","actioncontroller::caching::pages#expire_page()","actioncontroller::caching::pages::classmethods#expire_page()","activesupport::cache::entry#expired?()","activesupport::cache::entry#expires_at()","activesupport::cache::entry#expires_at=()","actioncontroller::conditionalget#expires_in()","actioncontroller::conditionalget#expires_now()","activerecord::connectionadapters::mysql2adapter#explain()","activerecord::connectionadapters::postgresqladapter#explain()","activerecord::connectionadapters::sqliteadapter#explain()","activerecord::relation#explain()","actiondispatch::filehandler#ext()","activemodel::callbacks::extended()","activerecord::explain::extended()","activesupport::concern::extended()","activesupport::memoizable::extended()","activesupport::testing::declarative::extended()","activerecord::querymethods#extending()","actionview::helpers::assettaghelper::assetincludetag#extension()","actionview::helpers::assettaghelper::javascriptincludetag#extension()","actionview::helpers::assettaghelper::stylesheetincludetag#extension()","activeresource::formats::jsonformat#extension()","activeresource::formats::xmlformat#extension()","railsenvironment#externals()","railsenvironment#externals=()","rails::generators::actions#extify()","hash#extract!()","sourceannotationextractor#extract_annotations_from()","actiondispatch::http::url::extract_domain()","array#extract_options!()","activerecord::connectionadapters::postgresqladapter::utils#extract_schema_and_table()","actiondispatch::session::stalesessioncheck#extract_session_id()","actiondispatch::http::url::extract_subdomain()","actiondispatch::http::url::extract_subdomains()","activesupport::hashwithindifferentaccess#extractable_options?()","activesupport::hashwithindifferentaccess#extractable_options?()","activesupport::orderedhash#extractable_options?()","hash#extractable_options?()","rails::generators::fallbacks()","actionview::helpers::assettaghelper#favicon_link_tag()","activesupport::cache::store#fetch()","activesupport::hashwithindifferentaccess#fetch()","activesupport::hashwithindifferentaccess#fetch()","recursivehttpfetcher#fetch()","recursivehttpfetcher#fetch_dir()","actionview::helpers::formtaghelper#field_set_tag()","rails::generators::generatedattribute#field_type()","actionview::helpers::formbuilder#fields_for()","actionview::helpers::formhelper#fields_for()","array#fifth()","rails::generators::appgenerator#file()","actionview::helpers::formbuilder#file_field()","actionview::helpers::formhelper#file_field()","actionview::helpers::formtaghelper#file_field_tag()","rails::generators::namedbase#file_path()","activesupport::multibyte::unicode::unicodedatabase::filename()","actiondispatch::http::parameterfilter#filter()","rails::paths::root#filter_by()","actiondispatch::http::filterparameters#filtered_env()","activemodel::validations::numericalityvalidator#filtered_options()","actiondispatch::http::filterparameters#filtered_parameters()","actiondispatch::http::filterparameters#filtered_path()","actiondispatch::http::filterparameters#filtered_query_string()","actionview::lookupcontext::viewpaths#find()","activerecord::findermethods#find()","activeresource::base::find()","plugin::find()","rails::engine::find()","rails::generators::activemodel::find()","railsenvironment::find()","sourceannotationextractor#find()","actionview::lookupcontext::viewpaths#find_all()","actionview::resolver#find_all()","actiondispatch::assertions::tagassertions#find_all_tag()","activerecord::findermethods#find_by_attributes()","activerecord::sessionstore::session::find_by_session_id()","activerecord::sessionstore::sqlbypass::find_by_session_id()","activerecord::querying#find_by_sql()","rails::dbconsole#find_cmd()","activerecord::batches#find_each()","activerecord::findermethods#find_first()","sourceannotationextractor#find_in()","activerecord::batches#find_in_batches()","activerecord::findermethods#find_last()","activerecord::findermethods#find_one()","activerecord::findermethods#find_or_instantiator_by_attributes()","rails::engine#find_root_with_flag()","activerecord::findermethods#find_some()","actiondispatch::assertions::tagassertions#find_tag()","actionview::lookupcontext::viewpaths#find_template()","activesupport::timezone::find_tzinfo()","activerecord::findermethods#find_with_associations()","activerecord::findermethods#find_with_ids()","time::find_zone()","time::find_zone!()","activerecord::dynamicfindermatch#finder?()","rails::generators::appgenerator#finish_template()","rails::generators::pluginnewgenerator#finish_template()","activerecord::findermethods#first()","activeresource::base::first()","rails::paths::path#first()","string#first()","activerecord::findermethods#first!()","activerecord::relation#first_or_create()","activerecord::relation#first_or_create!()","activerecord::relation#first_or_initialize()","actiondispatch::testprocess#fixture_file_upload()","activerecord::fixtures::fixture_is_cached?()","activerecord::testfixtures::classmethods#fixtures()","actiondispatch::request#flash()","actiondispatch::testprocess#flash()","activesupport::bufferedlogger#flush()","activesupport::logsubscriber::testhelper::mocklogger#flush()","activesupport::taggedlogging#flush()","activesupport::logsubscriber::flush_all!()","activesupport::memoizable::instancemethods#flush_cache()","activesupport::logsubscriber::flushable_loggers()","actiondispatch::integration::requesthelpers#follow_redirect!()","actionview::helpers::assettaghelper#font_path()","html::selector::for_class()","html::selector::for_id()","activesupport::testcase::for_tag()","actioncontroller::forcessl::classmethods#force_ssl()","activesupport::inflector#foreign_key()","string#foreign_key()","activesupport::testing::isolation::forking_env?()","actioncontroller::requestforgeryprotection#form_authenticity_param()","actioncontroller::requestforgeryprotection#form_authenticity_token()","actiondispatch::request#form_data?()","actionview::helpers::formhelper#form_for()","actionview::helpers::formtaghelper#form_tag()","actiondispatch::http::mimenegotiation#format()","activeresource::base::format()","activesupport::testing::performance::metrics::amount#format()","activesupport::testing::performance::metrics::digitalinformationunit#format()","activesupport::testing::performance::metrics::time#format()","erb::generators::mailergenerator#format()","actiondispatch::http::mimenegotiation#format=()","activeresource::base::format=()","actionmailer::mailhelper#format_paragraph()","actiondispatch::http::mimenegotiation#formats()","activesupport::timewithzone#formatted_offset()","activesupport::timezone#formatted_offset()","datetime#formatted_offset()","time#formatted_offset()","numeric#fortnight()","numeric#fortnights()","array#forty_two()","array#fourth()","actioncontroller::caching::fragments#fragment_cache_key()","actioncontroller::caching::fragments#fragment_exist?()","actiondispatch::exceptionwrapper#framework_trace()","rails::info::framework_version()","rails::info::frameworks()","activerecord::base#freeze()","activesupport::timewithzone#freeze()","activesupport::memoizable::instancemethods#freeze_with_memoizable()","actiondispatch::http::cache::request#fresh?()","actioncontroller::conditionalget#fresh_when()","activerecord::querymethods#from()","array#from()","string#from()","activeresource::errors#from_array()","activemodel::serializers::json#from_json()","activeresource::errors#from_json()","activesupport::duration#from_now()","numeric#from_now()","actionview::logsubscriber#from_rails_root()","actiondispatch::testresponse::from_response()","hash::from_trusted_xml()","activemodel::serializers::xml#from_xml()","activeresource::errors#from_xml()","hash::from_xml()","activerecord::base#frozen?()","rails::generators::pluginnewgenerator#full?()","activemodel::errors#full_message()","activemodel::errors#full_messages()","activesupport::testing::performance#full_profile_options()","activesupport::testing::performance#full_test_name()","actiondispatch::exceptionwrapper#full_trace()","actiondispatch::request#fullpath()","activesupport::timewithzone#future?()","date#future?()","datetime#future?()","time#future?()","activesupport::multibyte::chars#g_length()","activesupport::multibyte::unicode#g_pack()","activesupport::multibyte::unicode#g_unpack()","rails::generators::actions#gem()","rails::generators::appbase#gem_for_database()","rails::generators::actions#gem_group()","rails::appbuilder#gemfile()","rails::pluginbuilder#gemfile()","rails::pluginbuilder#gemspec()","activesupport::messageverifier#generate()","rails::generators::actions#generate()","activemodel::errors#generate_message()","abstractcontroller::collector::generate_method_for_mime()","rails::railtie::generate_railtie_name()","actiondispatch::session::compatibility#generate_sid()","rails::pluginbuilder#generate_test_dummy()","activerecord::attributemethods::classmethods#generated_external_attribute_methods()","activerecord::base::generated_feature_methods()","rails::generators::testcase#generator()","rails::generators::generatorgenerator#generator_dir()","rails::generators::base::generator_name()","rails::railtie::generators()","actioncontroller::testcase::behavior#get()","actiondispatch::integration::requesthelpers#get()","actiondispatch::routing::mapper::httphelpers#get()","activemodel::errors#get()","activerecord::identitymap::get()","activeresource::connection#get()","activeresource::custommethods#get()","activeresource::custommethods::get()","activesupport::dependencies::classcache#get()","actiondispatch::request#get?()","rails::generators::appgenerator#get_builder_class()","rails::generators::pluginnewgenerator#get_builder_class()","actiondispatch::session::cachestore#get_session()","actiondispatch::integration::requesthelpers#get_via_redirect()","activesupport::timewithzone#getgm()","activesupport::timewithzone#getlocal()","activesupport::timewithzone#getutc()","datetime#getutc()","numeric#gigabyte()","numeric#gigabytes()","rails::generators::actions#git()","rails::generators::appbase#git_keep()","plugin#git_url?()","rails::appbuilder#gitignore()","rails::pluginbuilder#gitignore()","rails::plugin::global_plugins()","activesupport::timewithzone#gmt?()","activesupport::timewithzone#gmt_offset()","activesupport::timewithzone#gmtime()","activesupport::timewithzone#gmtoff()","activerecord::querymethods#group()","enumerable#group_by()","actionview::helpers::formbuilder#grouped_collection_select()","actionview::helpers::formoptionshelper#grouped_collection_select()","actionview::helpers::formoptionshelper#grouped_options_for_select()","rails::groups()","erb::util::h()","actioncontroller::httpauthentication::digest#ha1()","actioncontroller::logsubscriber#halted_callback()","actioncontroller::requestforgeryprotection#handle_unverified_request()","activesupport::rescuable#handler_for_rescue()","actionview::template::handlers::erb#handles_encoding?()","activerecord::associations::classmethods#has_and_belongs_to_many()","actioncontroller::responder#has_errors?()","rails::generators::generatedattribute#has_index?()","activemodel::errors#has_key?()","activesupport::hashwithindifferentaccess#has_key?()","activesupport::hashwithindifferentaccess#has_key?()","activerecord::associations::classmethods#has_many()","rails::engine#has_migrations?()","activerecord::associations::classmethods#has_one()","activemodel::securepassword::classmethods#has_secure_password()","rails::generators::generatedattribute#has_uniq_index?()","activerecord::base#hash()","activeresource::base#hash()","activesupport::timewithzone#hash()","activerecord::querymethods#having()","actioncontroller::head#head()","actioncontroller::testcase::behavior#head()","actiondispatch::integration::requesthelpers#head()","activeresource::connection#head()","actiondispatch::request#head?()","actiondispatch::request#headers()","actionmailer::base#headers()","activeresource::base::headers()","actioncontroller::testing#headers=()","rails::generators::help()","abstractcontroller::helpers::classmethods#helper()","rails::consolemethods#helper()","actioncontroller::helpers::classmethods#helper_attr()","actionview::testcase::behavior::classmethods#helper_class()","abstractcontroller::helpers::classmethods#helper_method()","actionview::testcase::behavior::classmethods#helper_method()","actioncontroller::helpers::classmethods#helpers()","rails::engine#helpers()","rails::engine#helpers_paths()","abstractcontroller::base::hidden_actions()","actionview::helpers::formbuilder#hidden_field()","actionview::helpers::formhelper#hidden_field()","actionview::helpers::formtaghelper#hidden_field_tag()","rails::generators::hidden_namespaces()","actioncontroller::hideactions::classmethods#hide_action()","rails::generators::hide_namespace()","rails::generators::hide_namespaces()","actionview::helpers::texthelper#highlight()","rails::generators::base::hook_for()","actiondispatch::http::url#host()","actiondispatch::integration::session#host()","actiondispatch::testrequest#host=()","actiondispatch::http::url#host_with_port()","numeric#hour()","numeric#hours()","mime::type#html?()","actiondispatch::assertions::tagassertions#html_document()","erb::util::html_escape()","string#html_safe()","activesupport::safebuffer#html_safe?()","numeric#html_safe?()","object#html_safe?()","actioncontroller::httpauthentication::basic::controllermethods::classmethods#http_basic_authenticate_with()","activesupport::timewithzone#httpdate()","actiondispatch::integration::session#https!()","actiondispatch::integration::session#https?()","activemodel::name#human()","activesupport::inflector::inflections#human()","activemodel::translation#human_attribute_name()","rails::generators::generatedattribute#human_name()","rails::generators::namedbase#human_name()","activesupport::inflector#humanize()","string#humanize()","activemodel::translation#i18n_scope()","rails::generators::namedbase#i18n_scope()","activerecord::attributemethods::primarykey#id()","activeresource::base#id()","nilclass#id()","activerecord::attributemethods::primarykey#id=()","activeresource::base#id=()","activerecord::attributemethods::primarykey#id?()","activeresource::base#id_from_response()","activerecord::fixtures::identify()","activerecord::logsubscriber#identity()","actiondispatch::http::cache::request#if_modified_since()","actiondispatch::testrequest#if_modified_since=()","actiondispatch::http::cache::request#if_none_match()","actiondispatch::testrequest#if_none_match=()","actionview::helpers::assettaghelper#image_alt()","actionview::helpers::assettaghelper#image_path()","actionview::helpers::formtaghelper#image_submit_tag()","actionview::helpers::assettaghelper#image_tag()","date#in()","datetime#in()","time#in()","object#in?()","activesupport::multibyte::unicode#in_char_class?()","activerecord::connectionadapters::databaselimits#in_clause_length()","array#in_groups()","array#in_groups_of()","rails::scriptrailsloader::in_rails_application?()","rails::scriptrailsloader::in_rails_application_subdirectory?()","activesupport::timewithzone#in_time_zone()","datetime#in_time_zone()","time#in_time_zone()","activemodel::errors#include?()","activemodel::massassignmentsecurity::permissionset#include?()","activesupport::hashwithindifferentaccess#include?()","activesupport::hashwithindifferentaccess#include?()","activesupport::multibyte::chars#include?()","test::unit::collector::objectspace#include?()","rails::generators::appbase#include_all_railties?()","i18n::railtie::include_fallbacks_module()","actionview::helpers::assettaghelper::assetincludetag#include_tag()","range#include_with_range?()","actioncontroller::testcase::raiseactionexceptions::included()","activerecord::connectionadapters::querycache::included()","activesupport::concern#included()","activesupport::memoizable::instancemethods::included()","activesupport::testing::isolation::included()","rails::initializable::included()","activerecord::querymethods#includes()","activerecord::persistence#increment()","activesupport::cache::filestore#increment()","activesupport::cache::memorystore#increment()","activesupport::cache::nullstore#increment()","activesupport::cache::store#increment()","activerecord::persistence#increment!()","activerecord::countercache#increment_counter()","activerecord::connectionadapters::abstractadapter#increment_open_transactions()","rails::generators::namedbase#indent()","actioncontroller::middleware#index()","activerecord::connectionadapters::table#index()","activesupport::multibyte::chars#index()","enumerable#index_by()","activerecord::connectionadapters::schemastatements#index_exists?()","activerecord::connectionadapters::table#index_exists?()","rails::generators::namedbase#index_helper()","rails::generators::generatedattribute#index_name()","activerecord::connectionadapters::schemastatements#index_name_exists?()","activerecord::connectionadapters::schemastatements#index_name_for_remove()","activerecord::connectionadapters::databaselimits#index_name_length()","activerecord::connectionadapters::postgresqladapter#index_name_length()","activerecord::connectionadapters::postgresqladapter#indexes()","activerecord::connectionadapters::databaselimits#indexes_per_table()","activesupport::inflector#inflections()","plugin#info()","activesupport::inheritableoptions#inheritable_copy()","activerecord::modelschema::classmethods#inheritance_column()","activerecord::modelschema::classmethods#inheritance_column=()","abstractcontroller::helpers::classmethods#inherited()","abstractcontroller::layouts::classmethods#inherited()","actioncontroller::paramswrapper::classmethods#inherited()","actionview::helpers::assettaghelper::assetincludetag::inherited()","activemodel::observing::classmethods#inherited()","activemodel::validations::classmethods#inherited()","activesupport::descendantstracker#inherited()","rails::application::inherited()","rails::engine::inherited()","rails::plugin::inherited()","rails::railtie::inherited()","rails::railtie::configurable::classmethods#inherited()","i18n::railtie::init_fallbacks()","activerecord::base#init_with()","rails::initialize!()","actiondispatch::flash::flashhash#initialize_copy()","actiondispatch::middlewarestack#initialize_copy()","activerecord::relation#initialize_copy()","activesupport::orderedhash#initialize_copy()","activesupport::safebuffer#initialize_copy()","activemodel::errors#initialize_dup()","activerecord::base#initialize_dup()","activerecord::timestamp#initialize_dup()","rails::engine#initialize_generators()","i18n::railtie::initialize_i18n()","activerecord::connectionadapters::schemastatements#initialize_schema_migrations_table()","actiondispatch::session::compatibility#initialize_sid()","actioncontroller::compatibility#initialize_template_class()","rails::initialized=()","rails::initialized?()","rails::generators::actions#initializer()","rails::initializable::classmethods#initializer()","rails::engine#initializers()","rails::initializable#initializers()","rails::initializable::classmethods#initializers()","rails::initializable::classmethods#initializers_chain()","rails::initializable::classmethods#initializers_for()","rails::generators::generatedattribute#inject_index_options()","rails::generators::generatedattribute#inject_options()","string#inquiry()","activemodel::massassignmentsecurity::strictsanitizer#insensitive_attributes()","actiondispatch::middlewarestack#insert()","activerecord::connectionadapters::databasestatements#insert()","activerecord::relation#insert()","activesupport::multibyte::chars#insert()","actiondispatch::middlewarestack#insert_after()","actiondispatch::middlewarestack#insert_before()","activerecord::connectionadapters::databasestatements#insert_fixture()","activerecord::connectionadapters::databasestatements#insert_sql()","activerecord::connectionadapters::mysql2adapter#insert_sql()","activerecord::connectionadapters::postgresqladapter#insert_sql()","rails::generators::namedbase#inside_template()","rails::generators::namedbase#inside_template?()","actiondispatch::middlewarestack::middleware#inspect()","actionview::template#inspect()","activerecord::base#inspect()","activerecord::base::inspect()","activerecord::relation#inspect()","activesupport::orderedhash#inspect()","activesupport::timewithzone#inspect()","date#inspect()","datetime#inspect()","rails::info::inspect()","plugin#install()","railsenvironment#install()","plugin#installed?()","activesupport::inflector::inflections::instance()","rails::railtie::configurable::classmethods#instance()","activemodel::attributemethods::classmethods#instance_method_already_implemented?()","activerecord::attributemethods::classmethods#instance_method_already_implemented?()","module#instance_method_names()","object#instance_variable_names()","activerecord::inheritance::classmethods#instantiate()","activerecord::fixtures::instantiate_all_loaded_fixtures()","activerecord::fixtures::instantiate_fixtures()","activemodel::observing::classmethods#instantiate_observers()","activerecord::dynamicfindermatch#instantiator?()","activesupport::cache::store::instrument()","activesupport::notifications::instrument()","activesupport::notifications::instrumenter#instrument()","activesupport::cache::store::instrument=()","actioncontroller::caching::fragments#instrument_fragment_cache()","activesupport::notifications::instrumenter()","abstractcontroller::base::internal_methods()","activemodel::validations#invalid?()","activerecord::migration::commandrecorder#inverse()","activesupport::orderedhash#invert()","rails::generators::invoke()","actiondispatch::request#ip()","actiondispatch::remoteip::getip#ips_from()","activesupport::inflector::inflections#irregular()","activesupport::timewithzone#is_a?()","loaderror#is_missing?()","loaderror#is_missing?()","string#is_utf8?()","activesupport::timewithzone#isdst()","activesupport::timewithzone#iso8601()","date#iso8601()","rails::engine::isolate_namespace()","actionview::helpers::javascripthelper#j()","erb::util::j()","rails::generators::appbase#javascript_gemfile_entry()","actionview::helpers::assettaghelper::javascripttaghelpers#javascript_include_tag()","actionview::helpers::assettaghelper::javascripttaghelpers#javascript_path()","rails::generators::appbase#javascript_runtime_gemfile_entry()","actionview::helpers::javascripthelper#javascript_tag()","rails::pluginbuilder#javascripts()","activerecord::relation#joined_includes_values()","activerecord::querymethods#joins()","activerecord::connectionadapters::databaselimits#joins_per_query()","erb::util::json_escape()","actioncontroller::responder#json_resource_errors()","actiondispatch::flash::flashhash#keep()","actiondispatch::flash::flashhash#key?()","actiondispatch::request#key?()","activerecord::connectionadapters::mysqladapter::statementpool#key?()","activerecord::connectionadapters::postgresqladapter::statementpool#key?()","activerecord::connectionadapters::sqliteadapter::statementpool#key?()","activerecord::connectionadapters::statementpool#key?()","activesupport::dependencies::classcache#key?()","activesupport::hashwithindifferentaccess#key?()","activesupport::hashwithindifferentaccess#key?()","activesupport::cache::store#key_matcher()","rails::generators::appbase#key_value()","rails::generators::namedbase#key_value()","actiondispatch::flash::flashhash#keys()","activemodel::errors#keys()","activesupport::orderedhash#keys()","numeric#kilobyte()","numeric#kilobytes()","activemodel::validator::kind()","activemodel::validator#kind()","activesupport::timewithzone#kind_of?()","actiondispatch::middlewarestack::middleware#klass()","activerecord::reflection::macroreflection#klass()","activeresource::base::known_attributes()","activeresource::base#known_attributes()","abstractcontroller::translation#l()","actionview::helpers::translationhelper#l()","actionview::helpers::formbuilder#label()","actionview::helpers::formhelper#label()","actionview::helpers::formtaghelper#label_tag()","actiondispatch::middlewarestack#last()","activerecord::findermethods#last()","activeresource::base::last()","rails::paths::path#last()","string#last()","activerecord::findermethods#last!()","activerecord::connectionadapters::databasestatements#last_inserted_id()","activerecord::connectionadapters::mysql2adapter#last_inserted_id()","activerecord::connectionadapters::mysqladapter#last_inserted_id()","activerecord::connectionadapters::sqliteadapter#last_inserted_id()","actiondispatch::http::cache::response#last_modified()","actiondispatch::http::cache::response#last_modified=()","actiondispatch::http::cache::response#last_modified?()","abstractcontroller::layouts::classmethods#layout()","activerecord::connectionadapters::abstractadapter#lease()","activerecord::connectionadapters::mysqladapter::statementpool#length()","activerecord::connectionadapters::postgresqladapter::statementpool#length()","activerecord::connectionadapters::sqliteadapter::statementpool#length()","activerecord::connectionadapters::statementpool#length()","activesupport::bufferedlogger#level()","activesupport::bufferedlogger#level=()","rails::appbuilder#lib()","rails::generators::actions#lib()","rails::pluginbuilder#lib()","rails::pluginbuilder#license()","activerecord::querymethods#limit()","activesupport::multibyte::chars#limit()","activerecord::connectionadapters::abstractmysqladapter#limited_update_conditions()","activerecord::connectionadapters::databasestatements#limited_update_conditions()","actionview::helpers::urlhelper#link_to()","actionview::helpers::javascripthelper#link_to_function()","actionview::helpers::urlhelper#link_to_if()","actionview::helpers::urlhelper#link_to_unless()","actionview::helpers::urlhelper#link_to_unless_current()","recursivehttpfetcher#links()","activesupport::notifications::fanout#listeners_for()","activesupport::notifications::fanout#listening?()","activesupport::multibyte::chars#ljust()","activeresource::base#load()","activesupport::multibyte::unicode::unicodedatabase#load()","activeresource::base#load_attributes_from_response()","rails::application#load_console()","rails::engine#load_console()","rails::railtie#load_console()","rails::engine#load_generators()","rails::railtie#load_generators()","rails::paths::root#load_paths()","rails::engine#load_seed()","actiondispatch::session::stalesessioncheck#load_session()","rails::application#load_tasks()","rails::engine#load_tasks()","rails::railtie#load_tasks()","activerecord::sessionstore::session#loaded?()","activerecord::sessionstore::sqlbypass#loaded?()","activesupport::timezone#local()","actiondispatch::request#local?()","module#local_constant_names()","module#local_constants()","datetime::local_offset()","time::local_time()","activesupport::timezone#local_to_utc()","abstractcontroller::translation#localize()","actionview::helpers::translationhelper#localize()","actionview::testcase::behavior#locals()","activesupport::timewithzone#localtime()","actioncontroller::metal#location()","actiondispatch::response#location()","actioncontroller::metal#location=()","actiondispatch::response#location=()","activerecord::querymethods#lock()","activerecord::locking::pessimistic#lock!()","activerecord::locking::optimistic::classmethods#locking_column()","activerecord::locking::optimistic::classmethods#locking_column=()","activerecord::locking::optimistic::classmethods#locking_enabled?()","activerecord::connectionadapters::abstractadapter#log()","rails::appbuilder#log()","rails::generators::actions#log()","rails::application::configuration#log_level()","rails::server#log_path()","activerecord::railties::controllerruntime::classmethods#log_process_action()","activesupport::logsubscriber::log_subscribers()","activesupport::logsubscriber::testhelper::mocklogger#logged()","actioncontroller::logsubscriber#logger()","actionview::logsubscriber#logger()","activerecord::base::logger()","activerecord::logsubscriber#logger()","activeresource::base::logger()","activeresource::logsubscriber#logger()","activesupport::logsubscriber::logger()","rails::logger()","rails::logger=()","activemodel::massassignmentsecurity::loggersanitizer#logger?()","mime::type::lookup()","activemodel::translation#lookup_ancestors()","mime::type::lookup_by_extension()","abstractcontroller::viewpaths#lookup_context()","activesupport::cache::lookup_store()","recursivehttpfetcher#ls()","activesupport::multibyte::chars#lstrip()","actionmailer::base#mail()","actionview::helpers::urlhelper#mail_to()","actionmailer::mailhelper#mailer()","actionmailer::base::mailer_name()","actionmailer::base#mailer_name()","activerecord::relation#many?()","enumerable#many?()","activerecord::autosaveassociation#mark_for_destruction()","activerecord::autosaveassociation#marked_for_destruction?()","activesupport::testing::proxytestresult#marshal_dump()","activesupport::timewithzone#marshal_dump()","activesupport::testing::proxytestresult#marshal_load()","activesupport::timewithzone#marshal_load()","activemodel::massassignmentsecurity#mass_assignment_authorizer()","activerecord::attributeassignment#mass_assignment_options()","activerecord::attributeassignment#mass_assignment_role()","activemodel::massassignmentsecurity::classmethods#mass_assignment_sanitizer=()","actiondispatch::routing::mapper::base#match()","actiondispatch::routing::mapper::resources#match()","activemodel::attributemethods::classmethods::attributemethodmatcher#match()","activerecord::dynamicfindermatch::match()","activerecord::dynamicscopematch::match()","html::selector#match()","actiondispatch::filehandler#match?()","module#mattr_accessor()","module#mattr_reader()","module#mattr_writer()","activerecord::calculations#maximum()","string#mb_chars()","activesupport::testing::performance::metrics::cputime#measure()","activesupport::testing::performance::metrics::gcruns#measure()","activesupport::testing::performance::metrics::gctime#measure()","activesupport::testing::performance::metrics::memory#measure()","activesupport::testing::performance::metrics::objects#measure()","activesupport::testing::performance::metrics::processtime#measure()","activesupport::testing::performance::metrics::time#measure()","activesupport::testing::performance::metrics::usertime#measure()","activesupport::testing::performance::metrics::walltime#measure()","activesupport::testing::performance::metrics::base#measure_mode()","actiondispatch::request#media_type()","numeric#megabyte()","numeric#megabytes()","actiondispatch::routing::mapper::resources#member()","activesupport::hashwithindifferentaccess#member?()","activesupport::hashwithindifferentaccess#member?()","activesupport::memoizable#memoize()","activesupport::memoizable::instancemethods#memoize_all()","activesupport::memoizable::memoized_ivar_for()","activerecord::spawnmethods#merge()","activesupport::hashwithindifferentaccess#merge()","activesupport::hashwithindifferentaccess#merge()","activesupport::orderedhash#merge()","activesupport::hashwithindifferentaccess#merge!()","activesupport::hashwithindifferentaccess#merge!()","activesupport::orderedhash#merge!()","actiondispatch::response#message()","actionmailer::mailhelper#message()","activerecord::staleobjecterror#message()","activerecord::unknownprimarykey#message()","actiondispatch::request#method()","abstractcontroller::base::method_added()","activerecord::attributemethods::classmethods#method_defined_within?()","actioncontroller::compatibility#method_for_action()","actioncontroller::implicitrender#method_for_action()","abstractcontroller::collector#method_missing()","actiondispatch::assertions::routingassertions#method_missing()","actiondispatch::bodyproxy#method_missing()","actiondispatch::integration::runner#method_missing()","activemodel::attributemethods#method_missing()","activerecord::delegation#method_missing()","activerecord::migration#method_missing()","activesupport::logsubscriber::testhelper::mocklogger#method_missing()","activesupport::multibyte::chars#method_missing()","activesupport::orderedoptions#method_missing()","activesupport::stringinquirer#method_missing()","activesupport::taggedlogging#method_missing()","activesupport::testing::proxytestresult#method_missing()","activesupport::timewithzone#method_missing()","rails::railtie::configurable::classmethods#method_missing()","activemodel::attributemethods::classmethods::attributemethodmatcher#method_name()","module#method_names()","actiondispatch::request#method_symbol()","actioncontroller::metal::middleware()","activesupport::cache::strategy::localcache#middleware()","rails::engine::configuration#middleware()","rails::server#middleware()","date#midnight()","datetime#midnight()","time#midnight()","activerecord::migration::migrate()","activerecord::migration#migrate()","rails::generators::migration#migration_template()","activerecord::schema#migrations_paths()","actionview::template#mime_type()","activeresource::formats::jsonformat#mime_type()","activeresource::formats::xmlformat#mime_type()","activerecord::calculations#minimum()","time#minus_with_coercion()","time#minus_without_coercion()","time#minus_without_duration()","numeric#minute()","numeric#minutes()","nameerror#missing_name()","nameerror#missing_name?()","activemodel::naming#model_name()","rails::generators::namedbase#module_namespacing()","abstractcontroller::helpers::classmethods#modules_for_helpers()","actioncontroller::helpers::classmethods#modules_for_helpers()","date#monday()","time#monday()","integer#month()","integer#months()","date#months_ago()","time#months_ago()","date#months_since()","time#months_since()","actiondispatch::routing::mapper::base#mount()","rails::generators::pluginnewgenerator#mountable?()","benchmark::ms()","actionview::helpers::formbuilder#multipart=()","integer#multiple_of?()","activesupport::cache::store#mute()","rails::generators::pluginnewgenerator#mute()","activerecord::base::mysql2_connection()","rails::generators::appgenerator#mysql_socket()","activesupport::testing::performance::metrics::base#name()","activesupport::timewithzone::name()","rails::generators::pluginnewgenerator#name()","qualifiedconstutils::names()","actiondispatch::routing::mapper::resources#namespace()","actiondispatch::routing::mapper::scoping#namespace()","rails::generators::base::namespace()","rails::generators::namedbase#namespace()","rails::generators::namedbase#namespaced?()","rails::generators::namedbase#namespaced_class_path()","rails::generators::namedbase#namespaced_file_path()","activerecord::connectionadapters::abstractmysqladapter#native_database_types()","activerecord::connectionadapters::schemastatements#native_database_types()","actioncontroller::responder#navigation_behavior()","actioncontroller::responder#navigation_location()","actiondispatch::http::mimenegotiation#negotiate_mime()","actiondispatch::routing::mapper::resources#nested()","activesupport::hashwithindifferentaccess#nested_under_indifferent_access()","activesupport::hashwithindifferentaccess#nested_under_indifferent_access()","activesupport::orderedhash#nested_under_indifferent_access()","hash#nested_under_indifferent_access()","abstractcontroller::doublerendererror::new()","abstractcontroller::layouts::new()","actioncontroller::caching::actions::actioncachepath::new()","actioncontroller::metal::new()","actioncontroller::middleware::new()","actioncontroller::middleware::new()","actioncontroller::middleware::actionmiddleware::new()","actioncontroller::responder::new()","actiondispatch::beststandardssupport::new()","actiondispatch::bodyproxy::new()","actiondispatch::callbacks::new()","actiondispatch::cookies::new()","actiondispatch::debugexceptions::new()","actiondispatch::exceptionwrapper::new()","actiondispatch::filehandler::new()","actiondispatch::flash::new()","actiondispatch::head::new()","actiondispatch::http::headers::new()","actiondispatch::http::parameterfilter::new()","actiondispatch::http::uploadedfile::new()","actiondispatch::integration::session::new()","actiondispatch::middlewarestack::new()","actiondispatch::middlewarestack::middleware::new()","actiondispatch::paramsparser::new()","actiondispatch::publicexceptions::new()","actiondispatch::railsentitystore::new()","actiondispatch::railsmetastore::new()","actiondispatch::reloader::new()","actiondispatch::remoteip::new()","actiondispatch::remoteip::getip::new()","actiondispatch::requestid::new()","actiondispatch::rescue::new()","actiondispatch::response::new()","actiondispatch::routing::mapper::resources#new()","actiondispatch::routing::urlfor::new()","actiondispatch::session::cachestore::new()","actiondispatch::session::compatibility::new()","actiondispatch::session::memcachestore::new()","actiondispatch::showexceptions::new()","actiondispatch::static::new()","actiondispatch::testrequest::new()","actiondispatch::testrequest::new()","actionmailer::base::new()","actionview::filesystemresolver::new()","actionview::fixtureresolver::new()","actionview::helpers::assettaghelper::assetincludetag::new()","actionview::helpers::atomfeedhelper::atombuilder::new()","actionview::helpers::atomfeedhelper::atomfeedbuilder::new()","actionview::helpers::formbuilder::new()","actionview::helpers::instancetag::new()","actionview::helpers::numberhelper::invalidnumbererror::new()","actionview::partialrenderer::new()","actionview::renderer::new()","actionview::resolver::new()","actionview::resolver::path::new()","actionview::template::new()","actionview::testcase::behavior::classmethods#new()","actionview::testcase::testcontroller::new()","activemodel::attributemethods::classmethods::attributemethodmatcher::new()","activemodel::blockvalidator::new()","activemodel::eachvalidator::new()","activemodel::errors::new()","activemodel::massassignmentsecurity::loggersanitizer::new()","activemodel::massassignmentsecurity::sanitizer::new()","activemodel::name::new()","activemodel::observer::new()","activemodel::observerarray::new()","activemodel::validations::acceptancevalidator::new()","activemodel::validations::lengthvalidator::new()","activemodel::validator::new()","activerecord::attributeassignmenterror::new()","activerecord::base::new()","activerecord::connectionadapters::abstractmysqladapter::new()","activerecord::connectionadapters::connectionhandler::new()","activerecord::connectionadapters::connectionmanagement::new()","activerecord::connectionadapters::connectionpool::new()","activerecord::connectionadapters::mysql2adapter::new()","activerecord::connectionadapters::mysqladapter::new()","activerecord::connectionadapters::mysqladapter::statementpool::new()","activerecord::connectionadapters::postgresqladapter::new()","activerecord::connectionadapters::postgresqladapter::statementpool::new()","activerecord::connectionadapters::sqliteadapter::new()","activerecord::connectionadapters::sqliteadapter::statementpool::new()","activerecord::connectionadapters::sqliteadapter::version::new()","activerecord::connectionadapters::schemacache::new()","activerecord::connectionadapters::statementpool::new()","activerecord::connectionadapters::table::new()","activerecord::connectionadapters::tabledefinition::new()","activerecord::dynamicfindermatch::new()","activerecord::dynamicscopematch::new()","activerecord::fixtures::new()","activerecord::fixtures::file::new()","activerecord::identitymap::middleware::new()","activerecord::logsubscriber::new()","activerecord::migration::new()","activerecord::migration::commandrecorder::new()","activerecord::migrationproxy::new()","activerecord::multiparameterassignmenterrors::new()","activerecord::querycache::new()","activerecord::recordinvalid::new()","activerecord::reflection::macroreflection::new()","activerecord::relation::new()","activerecord::relation#new()","activerecord::result::new()","activerecord::sessionstore::session::new()","activerecord::sessionstore::sqlbypass::new()","activerecord::staleobjecterror::new()","activerecord::unknownprimarykey::new()","activerecord::validations::uniquenessvalidator::new()","activerecord::wrappeddatabaseexception::new()","activeresource::base::new()","activeresource::connection::new()","activeresource::request::new()","activeresource::response::new()","activeresource::sslerror::new()","activeresource::timeouterror::new()","activesupport::backtracecleaner::new()","activesupport::bufferedlogger::new()","activesupport::cache::entry::new()","activesupport::cache::filestore::new()","activesupport::cache::memcachestore::new()","activesupport::cache::memorystore::new()","activesupport::cache::nullstore::new()","activesupport::cache::store::new()","activesupport::cache::strategy::localcache::localstore::new()","activesupport::dependencies::classcache::new()","activesupport::dependencies::watchstack::new()","activesupport::fileupdatechecker::new()","activesupport::filewatcher::new()","activesupport::filewatcher::backend::new()","activesupport::gzip::stream::new()","activesupport::hashwithindifferentaccess::new()","activesupport::hashwithindifferentaccess::new()","activesupport::inflector::inflections::new()","activesupport::inheritableoptions::new()","activesupport::json::encoding::encoder::new()","activesupport::logsubscriber::testhelper::mocklogger::new()","activesupport::messageencryptor::new()","activesupport::messageverifier::new()","activesupport::multibyte::chars::new()","activesupport::multibyte::unicode::unicodedatabase::new()","activesupport::notifications::event::new()","activesupport::notifications::fanout::new()","activesupport::notifications::instrumenter::new()","activesupport::orderedhash::new()","activesupport::safebuffer::new()","activesupport::safebuffer::safeconcaterror::new()","activesupport::taggedlogging::new()","activesupport::testing::performance::benchmarker::new()","activesupport::testing::performance::metrics::base::new()","activesupport::testing::performance::metrics::cputime::new()","activesupport::testing::performance::performer::new()","activesupport::testing::performance::profiler::new()","activesupport::testing::proxytestresult::new()","activesupport::testing::remoteerror::new()","activesupport::timewithzone::new()","activesupport::timezone::new()","activesupport::timezone::new()","arjdbcmysql::error::new()","html::selector::new()","mime::type::new()","plugin::new()","rails::actionmethods::new()","rails::application::new()","rails::application::configuration::new()","rails::application::routesreloader::new()","rails::backtracecleaner::new()","rails::commands::info::new()","rails::commands::install::new()","rails::commands::plugin::new()","rails::commands::remove::new()","rails::console::new()","rails::dbconsole::new()","rails::engine::configuration::new()","rails::engine::railties::new()","rails::generators::activemodel::new()","rails::generators::appbase::new()","rails::generators::appgenerator::new()","rails::generators::generatedattribute::new()","rails::generators::pluginnewgenerator::new()","rails::initializable::initializer::new()","rails::paths::path::new()","rails::paths::root::new()","rails::plugin::new()","rails::rack::debugger::new()","rails::rack::logtailer::new()","rails::rack::logger::new()","rails::railtie::configuration::new()","rails::server::new()","railsenvironment::new()","recursivehttpfetcher::new()","sourceannotationextractor::new()","activeresource::base#new?()","activesupport::dependencies::watchstack#new_constants()","activeresource::base::new_element_path()","activeresource::base#new_element_path()","activesupport::hashwithindifferentaccess::new_from_hash_copying_default()","activesupport::hashwithindifferentaccess::new_from_hash_copying_default()","activerecord::persistence#new_record?()","activeresource::base#new_record?()","rails::consolemethods#new_session()","html::selector#next_element()","activerecord::connectionadapters::postgresqladapter::statementpool#next_key()","activerecord::migration#next_migration_number()","date#next_month()","time#next_month()","html::selector#next_selector()","date#next_week()","time#next_week()","date#next_year()","time#next_year()","rails::generators::no_color!()","actioncontroller::httpauthentication::digest#nonce()","activesupport::multibyte::chars#normalize()","activesupport::multibyte::unicode#normalize()","actiondispatch::routing::mapper::normalize_name()","actiondispatch::routing::mapper::normalize_path()","actiondispatch::http::cache::request#not_modified?()","actiondispatch::flash::flashhash#notice()","actiondispatch::flash::flashhash#notice=()","activemodel::observing::classmethods#notify_observers()","actiondispatch::flash::flashhash#now()","activesupport::timezone#now()","actiondispatch::flash::flashhash#now_is_loaded?()","html::selector#nth_child()","actionview::helpers::formhelper#number_field()","actionview::helpers::formtaghelper#number_field_tag()","actionview::helpers::numberhelper#number_to_currency()","actionview::helpers::numberhelper#number_to_human()","actionview::helpers::numberhelper#number_to_human_size()","actionview::helpers::numberhelper#number_to_percentage()","actionview::helpers::numberhelper#number_to_phone()","actionview::helpers::numberhelper#number_with_delimiter()","actionview::helpers::numberhelper#number_with_precision()","actionview::helpers::activemodelinstancetag#object()","activemodel::observer::observe()","activemodel::observer::observed_class()","activemodel::observer::observed_classes()","activerecord::observer#observed_classes()","activemodel::observerarray#observer_class_for()","activemodel::observing::classmethods#observer_instances()","activemodel::observing::classmethods#observers()","activemodel::observing::classmethods#observers=()","activerecord::logsubscriber#odd?()","activerecord::querymethods#offset()","activesupport::xmlmini_libxmlsax::hashbuilder#on_cdata_block()","activesupport::xmlmini_libxmlsax::hashbuilder#on_characters()","activesupport::xmlmini_libxmlsax::hashbuilder#on_end_document()","activesupport::xmlmini_libxmlsax::hashbuilder#on_end_element()","activesupport::on_load()","activesupport::xmlmini_libxmlsax::hashbuilder#on_start_document()","activesupport::xmlmini_libxmlsax::hashbuilder#on_start_element()","activerecord::spawnmethods#only()","html::selector#only_child()","actioncontroller::httpauthentication::digest#opaque()","actiondispatch::railsentitystore#open()","activerecord::fixtures::file::open()","activesupport::bufferedlogger#open_log()","actiondispatch::integration::runner#open_session()","rails::server#opt_parser()","actionview::helpers::formoptionshelper#option_groups_from_collection_for_select()","actiondispatch::http::url#optional_port()","object#options()","rails::commands::info#options()","rails::commands::install#options()","rails::commands::plugin#options()","rails::commands::remove#options()","activesupport::json::encoding::encoder#options_for()","actionview::helpers::formoptionshelper#options_for_select()","actionview::helpers::formoptionshelper#options_from_collection_for_select()","activerecord::connectionadapters::schemastatements#options_include_default?()","activesupport::multibyte::chars#ord()","string#ord()","activerecord::querymethods#order()","rails::engine#ordered_railties()","activesupport::inflector#ordinalize()","integer#ordinalize()","activeresource::custommethods::orig_delete()","activesupport::safebuffer#original_concat()","actiondispatch::request#original_fullpath()","rails::generators::pluginnewgenerator#original_name()","actiondispatch::request#original_url()","rails::generators::resourcehelpers#orm_class()","rails::generators::resourcehelpers#orm_instance()","activesupport::testing::performance::benchmarker#output_filename()","activesupport::testing::performance::performer#output_filename()","activesupport::testing::performance::profiler#output_filename()","activerecord::connectionadapters::databasestatements#outside_transaction?()","activerecord::connectionadapters::postgresqladapter#outside_transaction?()","range#overlaps?()","activemodel::naming::param_key()","actiondispatch::http::filterparameters#parameter_filter()","actiondispatch::http::filterparameters#parameter_filter_for()","activesupport::inflector#parameterize()","string#parameterize()","actiondispatch::http::parameters#parameters()","actioncontroller::testcase::behavior#paramify_values()","actioncontroller::metal#params()","actiondispatch::http::parameters#params()","actioncontroller::metal#params=()","module#parent()","module#parent_name()","activesupport::notifications::event#parent_of?()","abstractcontroller::viewpaths::classmethods#parent_prefixes()","module#parents()","activesupport::timezone#parse()","activesupport::xmlmini_libxmlsax#parse()","activesupport::xmlmini_nokogirisax#parse()","mime::type::parse()","rails::generators::generatedattribute::parse()","rails::commands::info#parse!()","rails::commands::install#parse!()","rails::commands::plugin#parse!()","rails::commands::plugin::parse!()","rails::commands::remove#parse!()","rails::server::options#parse!()","mime::type::parse_data_with_trailing_star()","activesupport::json::parse_error()","actiondispatch::request#parse_query()","activemodel::validations::numericalityvalidator#parse_raw_value_as_a_number()","activemodel::validations::numericalityvalidator#parse_raw_value_as_an_integer()","uri::parser()","activeresource::base::password()","activemodel::securepassword::instancemethodsonactivation#password=()","activeresource::base::password=()","activeresource::connection#password=()","actionview::helpers::formhelper#password_field()","actionview::helpers::formtaghelper#password_field_tag()","activesupport::timewithzone#past?()","date#past?()","datetime#past?()","time#past?()","loaderror#path()","loaderror#path()","actiondispatch::testrequest#path=()","actiondispatch::http::parameters#path_parameters()","actionview::helpers::assettaghelper#path_to_audio()","actionview::helpers::assettaghelper#path_to_font()","actionview::helpers::assettaghelper#path_to_image()","actionview::helpers::assettaghelper::javascripttaghelpers#path_to_javascript()","actionview::helpers::assettaghelper::stylesheettaghelpers#path_to_stylesheet()","actionview::helpers::assettaghelper#path_to_video()","rails::application::configuration#paths()","rails::engine::configuration#paths()","activesupport::testing::pending#pending()","activerecord::validations#perform_validations()","actioncontroller::metal#performed?()","activesupport::timewithzone#period()","activesupport::timezone#period_for_local()","activesupport::timezone#period_for_utc()","activerecord::persistence#persisted?()","activeresource::base#persisted?()","numeric#petabyte()","numeric#petabytes()","actionview::helpers::formhelper#phone_field()","actionview::helpers::formtaghelper#phone_field_tag()","activerecord::connectionadapters::abstractmysqladapter#pk_and_sequence_for()","activemodel::attributemethods::classmethods::attributemethodmatcher#plain?()","activerecord::calculations#pluck()","rails::generators::actions#plugin()","rails::engine::railties#plugins()","activemodel::naming::plural()","activesupport::inflector::inflections#plural()","rails::generators::namedbase#plural_file_name()","rails::generators::namedbase#plural_name()","rails::generators::namedbase#plural_table_name()","actionview::helpers::texthelper#pluralize()","activesupport::inflector#pluralize()","string#pluralize()","rails::generators::namedbase#pluralize_table_names?()","actiondispatch::routing::polymorphicroutes#polymorphic_path()","actiondispatch::routing::polymorphicroutes#polymorphic_url()","recursivehttpfetcher#pop_d()","activesupport::taggedlogging#pop_tags()","activerecord::scoping#populate_with_current_scope_attributes()","actiondispatch::http::url#port()","actiondispatch::testrequest#port=()","actiondispatch::http::url#port_string()","actioncontroller::testcase::behavior#post()","actiondispatch::integration::requesthelpers#post()","actiondispatch::routing::mapper::httphelpers#post()","activeresource::connection#post()","activeresource::custommethods::post()","activeresource::custommethods#post()","actiondispatch::request#post?()","actiondispatch::integration::requesthelpers#post_via_redirect()","activerecord::connectionadapters::postgresqladapter#postgresql_version()","float#precisionless_round()","activerecord::connectionadapters::abstractadapter#prefetch_primary_key?()","activeresource::base::prefix()","activeresource::base::prefix=()","activeresource::base::prefix_source()","activerecord::querymethods#preload()","actiondispatch::reloader::prepare!()","actiondispatch::response#prepare!()","actioncontroller::testcase::behavior::classmethods#prepare_controller_class()","rails::generators::testcase#prepare_destination()","abstractcontroller::callbacks::classmethods#prepend_after_filter()","abstractcontroller::callbacks::classmethods#prepend_around_filter()","abstractcontroller::callbacks::classmethods#prepend_before_filter()","abstractcontroller::viewpaths#prepend_view_path()","abstractcontroller::viewpaths::classmethods#prepend_view_path()","object#presence()","object#present?()","date#prev_month()","time#prev_month()","date#prev_week()","time#prev_week()","date#prev_year()","time#prev_year()","activemodel::dirty#previous_changes()","activerecord::attributemethods::primarykey::classmethods#primary_key()","activerecord::connectionadapters::abstractmysqladapter#primary_key()","activerecord::connectionadapters::postgresqladapter#primary_key()","activerecord::connectionadapters::tabledefinition#primary_key()","activeresource::base::primary_key()","activerecord::attributemethods::primarykey::classmethods#primary_key=()","activerecord::connectionadapters::connectionpool#primary_keys()","activesupport::memoizable::instancemethods#prime_cache()","abstractcontroller::base#process()","actioncontroller::middleware#process()","actioncontroller::templateassertions#process()","actioncontroller::testcase::behavior#process()","abstractcontroller::callbacks#process_action()","actioncontroller::instrumentation#process_action()","actioncontroller::logsubscriber#process_action()","actioncontroller::paramswrapper#process_action()","html::whitelistsanitizer#process_attributes_for()","html::fullsanitizer#process_node()","html::linksanitizer#process_node()","html::sanitizer#process_node()","html::whitelistsanitizer#process_node()","activemodel::massassignmentsecurity::loggersanitizer#process_removed_attributes()","activemodel::massassignmentsecurity::sanitizer#process_removed_attributes()","activemodel::massassignmentsecurity::strictsanitizer#process_removed_attributes()","actionview::base::process_view_paths()","actioncontroller::testing#process_with_new_base_test()","activesupport::testing::performance::metrics::base#profile()","rails::infocontroller#properties()","rails::info::property()","actioncontroller::requestforgeryprotection#protect_against_forgery?()","actioncontroller::requestforgeryprotection::classmethods#protect_from_forgery()","activemodel::massassignmentsecurity::classmethods#protected_attributes()","actiondispatch::http::url#protocol()","actionview::helpers::capturehelper#provide()","activeresource::base::proxy()","activeresource::base::proxy=()","activeresource::connection#proxy=()","activesupport::multibyte::proxy_class()","activesupport::multibyte::proxy_class=()","activesupport::cache::memorystore#prune()","activesupport::cache::memorystore#pruning?()","rails::appbuilder#public_directory()","rails::public_path()","activesupport::notifications::publish()","activesupport::notifications::fanout#publish()","recursivehttpfetcher#push_d()","activesupport::taggedlogging#push_tags()","actioncontroller::testcase::behavior#put()","actiondispatch::integration::requesthelpers#put()","actiondispatch::routing::mapper::httphelpers#put()","activeresource::connection#put()","activeresource::custommethods::put()","activeresource::custommethods#put()","actiondispatch::request#put?()","actiondispatch::integration::requesthelpers#put_via_redirect()","module#qualified_const_defined?()","module#qualified_const_get()","module#qualified_const_set()","actionview::nullresolver#query()","activerecord::attributemethods::query#query_attribute()","actiondispatch::request#query_parameters()","kernel#quietly()","activerecord::connectionadapters::abstractmysqladapter#quote()","activerecord::connectionadapters::quoting#quote()","activerecord::connectionadapters::quoting#quote_column_name()","activerecord::connectionadapters::mysql2adapter#quote_string()","activerecord::connectionadapters::quoting#quote_string()","activerecord::connectionadapters::abstractadapter#quote_table_name()","activerecord::connectionadapters::postgresqladapter#quote_table_name()","activerecord::connectionadapters::quoting#quote_table_name()","activerecord::connectionadapters::abstractmysqladapter#quoted_columns_for_index()","activerecord::connectionadapters::schemastatements#quoted_columns_for_index()","activerecord::connectionadapters::quoting#quoted_date()","activerecord::connectionadapters::abstractmysqladapter#quoted_false()","activerecord::connectionadapters::quoting#quoted_false()","activerecord::locking::optimistic::classmethods#quoted_locking_column()","activerecord::attributemethods::primarykey::classmethods#quoted_primary_key()","activerecord::modelschema::classmethods#quoted_table_name()","activerecord::connectionadapters::abstractmysqladapter#quoted_true()","activerecord::connectionadapters::quoting#quoted_true()","actiondispatch::testrequest#rack_cookies()","actionview::helpers::formbuilder#radio_button()","actionview::helpers::formhelper#radio_button()","actionview::helpers::instancetag::radio_button_checked?()","actionview::helpers::formtaghelper#radio_button_tag()","rails::generators::appbase#rails_gemfile_entry()","rails::plugin#railtie_name()","rails::railtie::railtie_name()","rails::railtie#railtie_namespace()","rails::engine#railties()","rails::engine::railties::railties()","activesupport::basicobject#raise()","qualifiedconstutils::raise_if_absolute()","rails::generators::actions#rake()","rails::railtie::rake_tasks()","rails::appbuilder#rakefile()","rails::generators::actions#rakefile()","rails::pluginbuilder#rakefile()","rails::generators::pluginnewgenerator#rakefile_test_tasks()","actionview::helpers::formhelper#range_field()","actionview::helpers::formtaghelper#range_field_tag()","actionview::helpers::outputsafetyhelper#raw()","activerecord::connectionadapters::abstractadapter#raw_connection()","actiondispatch::http::url#raw_host_with_port()","actiondispatch::request#raw_post()","activesupport::cache::entry#raw_value()","activerecord::attributemethods::write#raw_write_attribute()","actiondispatch::http::uploadedfile#read()","actiondispatch::railsentitystore#read()","actiondispatch::railsmetastore#read()","activesupport::cache::store#read()","activerecord::attributemethods::read#read_attribute()","activerecord::attributemethods::beforetypecast#read_attribute_before_type_cast()","activerecord::attributemethods::serialization#read_attribute_before_type_cast()","activesupport::cache::filestore#read_entry()","activesupport::cache::strategy::localcache::localstore#read_entry()","actioncontroller::caching::fragments#read_fragment()","activesupport::cache::memcachestore#read_multi()","activesupport::cache::store#read_multi()","date#readable_inspect()","datetime#readable_inspect()","rails::appbuilder#readme()","rails::generators::actions#readme()","rails::pluginbuilder#readme()","activerecord::querymethods#readonly()","activerecord::base#readonly!()","activerecord::base#readonly?()","activerecord::readonlyattributes::classmethods#readonly_attributes()","actionmailer::base::receive()","activerecord::connectionadapters::abstractadapter#reconnect!()","activerecord::connectionadapters::mysql2adapter#reconnect!()","activerecord::connectionadapters::mysqladapter#reconnect!()","activerecord::connectionadapters::postgresqladapter#reconnect!()","activerecord::migration::commandrecorder#record()","activesupport::testing::performance::benchmarker#record()","activesupport::testing::performance::profiler#record()","actioncontroller::recordidentifier#record_key_for_dom_id()","activerecord::connectionadapters::abstractmysqladapter#recreate_database()","actioncontroller::testresponse#recycle!()","actioncontroller::testing#recycle!()","module#redefine_method()","actiondispatch::routing::redirection#redirect()","actioncontroller::flash#redirect_to()","actioncontroller::instrumentation#redirect_to()","actioncontroller::logsubscriber#redirect_to()","actioncontroller::redirecting#redirect_to()","actiondispatch::testprocess#redirect_to_url()","actiondispatch::response#redirect_url()","mime::type#ref()","rails::generators::generatedattribute#reference?()","activerecord::connectionadapters::table#references()","activerecord::connectionadapters::tabledefinition#references()","activerecord::reflection::classmethods#reflect_on_aggregation()","activerecord::reflection::classmethods#reflect_on_all_aggregations()","activerecord::reflection::classmethods#reflect_on_all_associations()","activerecord::reflection::classmethods#reflect_on_all_autosave_associations()","activerecord::reflection::classmethods#reflect_on_association()","actionview::template#refresh()","mime::type::register()","mime::type::register_alias()","actionmailer::base::register_interceptor()","actionmailer::base::register_interceptors()","actionview::helpers::assettaghelper::javascripttaghelpers::classmethods#register_javascript_expansion()","actionmailer::base::register_observer()","actionmailer::base::register_observers()","actionview::helpers::assettaghelper::stylesheettaghelpers::classmethods#register_stylesheet_expansion()","rails::generators::namedbase#regular_class_path()","activesupport::hashwithindifferentaccess#regular_update()","activesupport::hashwithindifferentaccess#regular_update()","activesupport::hashwithindifferentaccess#regular_writer()","activesupport::hashwithindifferentaccess#regular_writer()","activerecord::identitymap#reinit_with()","activesupport::orderedhash#reject()","activesupport::orderedhash#reject!()","activerecord::connectionadapters::connectionpool#release_connection()","activerecord::connectionadapters::abstractadapter#release_savepoint()","activerecord::connectionadapters::abstractmysqladapter#release_savepoint()","activerecord::connectionadapters::postgresqladapter#release_savepoint()","activerecord::connectionadapters::sqliteadapter#release_savepoint()","activerecord::autosaveassociation#reload()","activerecord::persistence#reload()","activerecord::relation#reload()","activeresource::base#reload()","rails::application::routesreloader#reload!()","rails::consolemethods#reload!()","rails::application#reload_dependencies?()","rails::application#reload_routes!()","i18n::railtie::reloader()","i18n::railtie::reloader_paths()","actiondispatch::testrequest#remote_addr=()","actiondispatch::request#remote_ip()","activerecord::connectionadapters::table#remove()","activerecord::identitymap::remove()","activerecord::connectionadapters::table#remove_belongs_to()","activerecord::identitymap::remove_by_id()","activerecord::connectionadapters::schemastatements#remove_column()","activerecord::connectionadapters::abstractmysqladapter#remove_column_sql()","activerecord::connectionadapters::schemastatements#remove_columns()","activerecord::base::remove_connection()","activerecord::connectionadapters::connectionhandler#remove_connection()","activesupport::backtracecleaner#remove_filters!()","rails::generators::base::remove_hook_for()","activerecord::connectionadapters::schemastatements#remove_index()","activerecord::connectionadapters::table#remove_index()","activerecord::connectionadapters::abstractmysqladapter#remove_index_sql()","activemodel::massassignmentsecurity::permissionset#remove_multiparameter_id()","module#remove_possible_method()","activerecord::connectionadapters::table#remove_references()","activeresource::formats::remove_root()","activesupport::backtracecleaner#remove_silencers!()","activerecord::connectionadapters::schemastatements#remove_timestamps()","activerecord::connectionadapters::table#remove_timestamps()","activerecord::connectionadapters::abstractmysqladapter#remove_timestamps_sql()","activerecord::connectionadapters::table#rename()","activerecord::connectionadapters::postgresqladapter#rename_column()","activerecord::connectionadapters::schemastatements#rename_column()","activerecord::connectionadapters::abstractmysqladapter#rename_column_sql()","activerecord::connectionadapters::postgresqladapter#rename_index()","activerecord::connectionadapters::schemastatements#rename_index()","activesupport::xmlmini#rename_key()","activerecord::connectionadapters::abstractmysqladapter#rename_table()","activerecord::connectionadapters::postgresqladapter#rename_table()","activerecord::connectionadapters::sqliteadapter#rename_table()","activerecord::connectionadapters::schemastatements#rename_table()","abstractcontroller::rendering#render()","actioncontroller::instrumentation#render()","actionview::helpers::renderinghelper#render()","actionview::partialrenderer#render()","actionview::renderer#render()","actionview::template#render()","actionview::testcase::behavior#render()","actionview::testcase::behavior::locals#render()","actionview::renderer#render_body()","actionview::logsubscriber#render_collection()","actionview::partialrenderer#render_collection()","actionview::logsubscriber#render_partial()","actionview::partialrenderer#render_partial()","actionview::logsubscriber#render_template()","abstractcontroller::rendering#render_to_body()","actioncontroller::compatibility#render_to_body()","actioncontroller::renderers#render_to_body()","abstractcontroller::rendering#render_to_string()","actioncontroller::rendering#render_to_string()","activerecord::querymethods#reorder()","activesupport::multibyte::unicode#reorder_characters()","activesupport::orderedhash#replace()","activesupport::testing::performance::performer#report()","activerecord::identitymap::repository()","activeresource::logsubscriber#request()","actioncontroller::httpauthentication::basic::controllermethods#request_http_basic_authentication()","actioncontroller::httpauthentication::digest::controllermethods#request_http_digest_authentication()","actioncontroller::httpauthentication::token::controllermethods#request_http_token_authentication()","actiondispatch::request#request_method()","actiondispatch::testrequest#request_method=()","actiondispatch::request#request_method_symbol()","actiondispatch::request#request_parameters()","actiondispatch::testrequest#request_uri=()","actiondispatch::integration::requesthelpers#request_via_redirect()","activeresource::connection::requests()","activeresource::httpmock::requests()","actionview::template::handlers::builder#require_engine()","activerecord::testfixtures::classmethods#require_fixture_classes()","activesupport::timezone::require_tzinfo()","activerecord::connectionadapters::abstractadapter#requires_reloading?()","activerecord::connectionadapters::sqliteadapter#requires_reloading?()","actioncontroller::compatibility#rescue_action()","actioncontroller::testcase::raiseactionexceptions#rescue_action_without_handler()","actiondispatch::rescue#rescue_from()","activesupport::rescuable::classmethods#rescue_from()","actiondispatch::showexceptions::rescue_responses()","actiondispatch::exceptionwrapper#rescue_template()","actiondispatch::showexceptions::rescue_templates()","actioncontroller::rescue#rescue_with_handler()","activesupport::rescuable#rescue_with_handler()","activerecord::relation#reset()","actiondispatch::integration::runner#reset!()","actiondispatch::integration::session#reset!()","activerecord::connectionadapters::abstractadapter#reset!()","activerecord::connectionadapters::mysql2adapter#reset!()","activerecord::connectionadapters::mysqladapter#reset!()","activerecord::connectionadapters::postgresqladapter#reset!()","activeresource::httpmock::reset!()","activerecord::fixtures::reset_cache()","activesupport::callbacks::classmethods#reset_callbacks()","activerecord::modelschema::classmethods#reset_column_information()","activerecord::countercache#reset_counters()","actionview::helpers::texthelper#reset_cycle()","activerecord::locking::optimistic::classmethods#reset_locking_column()","activerecord::logsubscriber::reset_runtime()","activerecord::connectionadapters::databasestatements#reset_sequence!()","actioncontroller::rackdelegation#reset_session()","actiondispatch::request#reset_session()","actiondispatch::railsentitystore::resolve()","actiondispatch::railsmetastore::resolve()","actiondispatch::routing::mapper::resources#resource()","actioncontroller::responder#resource_errors()","actioncontroller::responder#resource_location()","actioncontroller::responder#resourceful?()","actiondispatch::routing::mapper::resources#resources()","actiondispatch::routing::mapper::resources#resources_path_names()","actioncontroller::responder#respond()","actioncontroller::mimeresponds#respond_to()","actioncontroller::mimeresponds::classmethods#respond_to()","activeresource::httpmock::respond_to()","actiondispatch::bodyproxy#respond_to?()","actiondispatch::integration::runner#respond_to?()","actiondispatch::response#respond_to?()","activemodel::attributemethods#respond_to?()","activerecord::delegation#respond_to?()","activerecord::dynamicmatchers#respond_to?()","activeresource::base#respond_to?()","activesupport::bufferedlogger#respond_to?()","activesupport::multibyte::chars#respond_to?()","activesupport::orderedoptions#respond_to?()","activesupport::timewithzone#respond_to?()","rails::railtie::configurable::classmethods#respond_to?()","rails::railtie::configuration#respond_to?()","activemodel::attributemethods#respond_to_without_attributes?()","activeresource::base#respond_to_without_attributes?()","actioncontroller::mimeresponds#respond_with()","actioncontroller::metal#response_body=()","actioncontroller::rackdelegation#response_body=()","actiondispatch::response#response_code()","actiondispatch::assertions::selectorassertions#response_from_page()","actioncontroller::responder#response_overridden?()","activeresource::httpmock::responses()","actionview::helpers::instancetag#retrieve_autoindex()","activerecord::base::retrieve_connection()","activerecord::connectionadapters::connectionhandler#retrieve_connection_pool()","actionview::helpers::instancetag#retrieve_object()","activesupport::multibyte::chars#reverse()","activesupport::hashwithindifferentaccess#reverse_merge()","activesupport::hashwithindifferentaccess#reverse_merge()","hash#reverse_merge()","activesupport::hashwithindifferentaccess#reverse_merge!()","activesupport::hashwithindifferentaccess#reverse_merge!()","hash#reverse_merge!()","activerecord::querymethods#reverse_order()","hash#reverse_update()","activerecord::migration#revert()","activerecord::migration#reverting?()","activesupport::timewithzone#rfc2822()","date#rfc3339()","activesupport::timewithzone#rfc822()","activesupport::multibyte::chars#rindex()","activesupport::multibyte::chars#rjust()","activerecord::transactions#rollback_active_record_state!()","activerecord::connectionadapters::databasestatements#rollback_db_transaction()","activerecord::connectionadapters::postgresqladapter#rollback_db_transaction()","activerecord::connectionadapters::abstractadapter#rollback_to_savepoint()","activerecord::connectionadapters::abstractmysqladapter#rollback_to_savepoint()","activerecord::connectionadapters::postgresqladapter#rollback_to_savepoint()","activerecord::connectionadapters::sqliteadapter#rollback_to_savepoint()","activerecord::connectionadapters::databasestatements#rollback_transaction_records()","actiondispatch::routing::mapper::base#root()","actiondispatch::routing::mapper::resources#root()","rails::root()","rails::engine::configuration#root=()","float#round()","rails::generators::actions#route()","activemodel::naming::route_key()","rails::generators::namedbase#route_url()","rails::engine#routes()","rails::engine#routes?()","rails::engine#routes_url_helpers()","activesupport::multibyte::chars#rstrip()","rails::generators::appbase#ruby_debugger_gemfile_entry()","activesupport::testing::isolation::minitest#run()","activesupport::testing::isolation::testunit#run()","activesupport::testing::performance::benchmarker#run()","activesupport::testing::performance::forclassictestunit#run()","activesupport::testing::performance::forminitest#run()","activesupport::testing::performance::profiler#run()","activesupport::testing::setupandteardown::forclassictestunit#run()","activesupport::testing::setupandteardown::forminitest#run()","rails::initializable::initializer#run()","rails::generators::appbase#run_bundle()","activesupport::callbacks#run_callbacks()","activesupport::testing::performance#run_gc()","rails::generators::testcase#run_generator()","activesupport::testing::isolation::forking#run_in_isolation()","activesupport::testing::isolation::subprocess#run_in_isolation()","activerecord::testfixtures#run_in_transaction?()","rails::initializable#run_initializers()","activesupport::run_load_hooks()","activesupport::testing::performance#run_profile()","activesupport::testing::performance::forclassictestunit#run_test()","activesupport::testing::performance::forminitest#run_test()","activemodel::validations#run_validations!()","activemodel::validations::callbacks#run_validations!()","activesupport::testing::performance#run_warmup()","activerecord::logsubscriber::runtime()","activerecord::logsubscriber::runtime=()","actionview::helpers::texthelper#safe_concat()","activesupport::safebuffer#safe_concat()","activesupport::inflector#safe_constantize()","string#safe_constantize()","activesupport::dependencies::classcache#safe_get()","actionview::helpers::outputsafetyhelper#safe_join()","array#sample()","actionview::helpers::sanitizehelper#sanitize()","activemodel::massassignmentsecurity::sanitizer#sanitize()","html::fullsanitizer#sanitize()","html::sanitizer#sanitize()","activerecord::sanitization::classmethods#sanitize_conditions()","actionview::helpers::sanitizehelper#sanitize_css()","html::whitelistsanitizer#sanitize_css()","actioncontroller::recordidentifier#sanitize_dom_id()","activemodel::massassignmentsecurity#sanitize_for_mass_assignment()","activerecord::connectionadapters::databasestatements#sanitize_limit()","activerecord::sanitization::classmethods#sanitize_sql()","activerecord::sanitization::classmethods#sanitize_sql_array()","activerecord::sanitization::classmethods#sanitize_sql_for_assignment()","activerecord::sanitization::classmethods#sanitize_sql_for_conditions()","activerecord::sanitization::classmethods#sanitize_sql_hash()","activerecord::sanitization::classmethods#sanitize_sql_hash_for_assignment()","activerecord::sanitization::classmethods#sanitize_sql_hash_for_conditions()","html::linksanitizer#sanitizeable?()","html::sanitizer#sanitizeable?()","activerecord::persistence#save()","activerecord::sessionstore::sqlbypass#save()","activerecord::validations#save()","activeresource::base#save()","rails::generators::activemodel#save()","activerecord::persistence#save!()","activerecord::validations#save!()","activeresource::base#save!()","activerecord::dynamicfindermatch#save_method()","activerecord::dynamicfindermatch#save_record?()","activeresource::validations#save_with_validation()","activerecord::migration#say()","activerecord::migration#say_with_time()","activeresource::base::schema()","activeresource::base#schema()","activeresource::base::schema=()","activerecord::connectionadapters::postgresqladapter#schema_exists?()","activerecord::base::schema_format()","activerecord::connectionadapters::postgresqladapter#schema_search_path()","activerecord::connectionadapters::postgresqladapter#schema_search_path=()","actiondispatch::routing::mapper::scoping#scope()","activerecord::scoping::named::classmethods#scope()","activerecord::relation#scope_for_create()","activerecord::scoping::named::classmethods#scoped()","activerecord::relation#scoping()","rails::appbuilder#script()","rails::pluginbuilder#script()","actionview::helpers::formhelper#search_field()","actionview::helpers::formtaghelper#search_field_tag()","array#second()","numeric#second()","numeric#seconds()","datetime#seconds_since_midnight()","time#seconds_since_midnight()","activesupport::timezone::seconds_to_utc_offset()","actioncontroller::httpauthentication::digest#secret_token()","actionview::helpers::formbuilder#select()","actionview::helpers::formoptionshelper#select()","activerecord::connectionadapters::databasestatements#select()","activerecord::connectionadapters::mysql2adapter#select()","activerecord::querymethods#select()","html::selector#select()","html::tag#select()","activerecord::connectionadapters::databasestatements#select_all()","activerecord::connectionadapters::querycache#select_all()","actionview::helpers::datehelper#select_date()","actionview::helpers::datehelper#select_datetime()","actionview::helpers::datehelper#select_day()","html::selector#select_first()","actionview::helpers::datehelper#select_hour()","actionview::helpers::datehelper#select_minute()","actionview::helpers::datehelper#select_month()","activerecord::connectionadapters::databasestatements#select_one()","activerecord::connectionadapters::databasestatements#select_rows()","activerecord::connectionadapters::mysql2adapter#select_rows()","activerecord::connectionadapters::mysqladapter#select_rows()","activerecord::connectionadapters::postgresqladapter#select_rows()","activerecord::connectionadapters::sqliteadapter#select_rows()","actionview::helpers::datehelper#select_second()","actionview::helpers::formtaghelper#select_tag()","actionview::helpers::datehelper#select_time()","activerecord::connectionadapters::databasestatements#select_value()","activerecord::connectionadapters::databasestatements#select_values()","actionview::helpers::datehelper#select_year()","html::selector()","actioncontroller::implicitrender#send_action()","actioncontroller::datastreaming#send_data()","actioncontroller::instrumentation#send_data()","actioncontroller::logsubscriber#send_data()","actioncontroller::datastreaming#send_file()","actioncontroller::instrumentation#send_file()","actioncontroller::logsubscriber#send_file()","activerecord::modelschema::classmethods#sequence_name()","activerecord::modelschema::classmethods#sequence_name=()","activerecord::connectionadapters::postgresqladapter#serial_sequence()","activemodel::serialization#serializable_hash()","activerecord::serialization#serializable_hash()","activerecord::attributemethods::serialization::attribute#serialize()","activerecord::attributemethods::serialization::classmethods#serialize()","activerecord::attributemethods::serialization::attribute#serialized_value()","actiondispatch::http::url#server_port()","actiondispatch::request#server_software()","actiondispatch::testprocess#session()","activerecord::connectionadapters::postgresqladapter#session_auth=()","activerecord::sessionstore::sqlbypass::session_id_column()","actiondispatch::request#session_options=()","rails::application::configuration#session_store()","activemodel::errors#set()","activesupport::callbacks::classmethods#set_callback()","actionmailer::base#set_content_type()","actiondispatch::response#set_cookie()","rails::generators::appbase#set_default_accessors!()","activemodel::observerarray#set_enablement()","rails::server#set_environment()","activerecord::testfixtures::classmethods#set_fixture_class()","activerecord::locking::optimistic::classmethods#set_locking_column()","activesupport::logsubscriber::testhelper#set_logger()","activeresource::base::set_prefix()","actiondispatch::session::cachestore#set_session()","activerecord::connectionadapters::postgresqladapter#set_standard_conforming_strings()","activemodel::validations::acceptancevalidator#setup()","activemodel::validations::confirmationvalidator#setup()","activerecord::validations::uniquenessvalidator#setup()","activesupport::logsubscriber::testhelper#setup()","activesupport::testing::setupandteardown::classmethods#setup()","actioncontroller::testcase::behavior#setup_controller_request_and_response()","activerecord::testfixtures::classmethods#setup_fixture_accessors()","activerecord::testfixtures#setup_fixtures()","actioncontroller::templateassertions#setup_subscriptions()","actionview::testcase::behavior#setup_with_controller()","actiondispatch::routing::mapper::resources#shallow()","actiondispatch::routing::mapper::resources#shallow?()","activesupport::orderedhash#shift()","actioncontroller::rescue#show_detailed_exceptions?()","activerecord::connectionadapters::abstractmysqladapter#show_variable()","activesupport::benchmarkable#silence()","activesupport::bufferedlogger#silence()","activesupport::deprecation::silence()","activesupport::taggedlogging#silence()","kernel#silence()","activesupport::cache::store#silence!()","activerecord::explain#silence_auto_explain()","kernel#silence_stream()","kernel#silence_warnings()","activesupport::bufferedlogger::silencer()","actionview::helpers::texthelper#simple_format()","html::selector#simple_selector()","activesupport::duration#since()","activesupport::timewithzone#since()","date#since()","datetime#since()","numeric#since()","time#since()","kernel#singleton_class()","activemodel::naming::singular()","activesupport::inflector::inflections#singular()","activemodel::naming::singular_route_key()","rails::generators::namedbase#singular_table_name()","activesupport::inflector#singularize()","string#singularize()","activeresource::base::site()","activeresource::base::site=()","activeresource::connection#site=()","actiondispatch::middlewarestack#size()","activemodel::errors#size()","activerecord::fixtures#size()","activerecord::relation#size()","activesupport::cache::entry#size()","activesupport::multibyte::chars#size()","abstractcontroller::callbacks::classmethods#skip_after_filter()","abstractcontroller::callbacks::classmethods#skip_around_filter()","abstractcontroller::callbacks::classmethods#skip_before_filter()","activesupport::callbacks::classmethods#skip_callback()","abstractcontroller::callbacks::classmethods#skip_filter()","activesupport::multibyte::chars#slice()","hash#slice()","hash#slice!()","rails::generators::base::source_root()","activesupport::multibyte::chars#split()","array#split()","rails::commands::plugin#split_args()","activerecord::logsubscriber#sql()","activerecord::connectionadapters::databasestatements#sql_for_insert()","activerecord::connectionadapters::postgresqladapter#sql_for_insert()","activerecord::connectionadapters::databaselimits#sql_query_length()","activerecord::connectionadapters::sqliteadapter#sqlite_version()","string#squish()","string#squish!()","activeresource::base::ssl_options()","activeresource::base::ssl_options=()","activeresource::connection#ssl_options=()","actioncontroller::conditionalget#stale?()","actiondispatch::session::stalesessioncheck#stale_session_check!()","actiondispatch::http::url#standard_port()","actiondispatch::http::url#standard_port?()","rails::console#start()","rails::console::start()","rails::dbconsole::start()","rails::dbconsole#start()","rails::server#start()","activesupport::xmlmini_nokogirisax::hashbuilder#start_document()","activesupport::xmlmini_nokogirisax::hashbuilder#start_element()","actioncontroller::logsubscriber#start_processing()","activemodel::observerarray#start_transaction()","rails::rack::logger#started_request_message()","activesupport::cache::memcachestore#stats()","actioncontroller::metal#status()","actioncontroller::metal#status=()","actiondispatch::response#status=()","actiondispatch::exceptionwrapper#status_code()","actiondispatch::exceptionwrapper::status_code_for_exception()","actiondispatch::response#status_message()","range#step_with_blockless()","activerecord::inheritance::classmethods#sti_name()","activerecord::store::classmethods#store()","activesupport::dependencies::classcache#store()","activesupport::hashwithindifferentaccess#store()","activesupport::hashwithindifferentaccess#store()","activerecord::store::classmethods#store_accessor()","rails::generators::pluginnewgenerator#store_application_definition!()","activesupport::timewithzone#strftime()","base64::strict_encode64()","activesupport::hashwithindifferentaccess#stringify_keys()","activesupport::hashwithindifferentaccess#stringify_keys()","hash#stringify_keys()","activesupport::hashwithindifferentaccess#stringify_keys!()","activesupport::hashwithindifferentaccess#stringify_keys!()","hash#stringify_keys!()","activesupport::multibyte::chars#strip()","string#strip_heredoc()","actionview::helpers::sanitizehelper#strip_links()","actionview::helpers::sanitizehelper#strip_tags()","activerecord::connectionadapters::schemastatements#structure_dump()","actionview::helpers::assettaghelper::stylesheettaghelpers#stylesheet_link_tag()","actionview::helpers::assettaghelper::stylesheettaghelpers#stylesheet_path()","rails::pluginbuilder#stylesheets()","rails::generators::subclasses()","rails::railtie::subclasses()","actiondispatch::http::url#subdomain()","actiondispatch::http::url#subdomains()","actionview::helpers::formbuilder#submit()","actionview::helpers::formtaghelper#submit_tag()","activesupport::notifications::subscribe()","activesupport::notifications::fanout#subscribe()","activesupport::notifications::subscribed()","activerecord::connectionadapters::abstractadapter#substitute_at()","activerecord::connectionadapters::postgresqladapter#substitute_at()","activeresource::response#success?()","activerecord::calculations#sum()","enumerable#sum()","date#sunday()","time#sunday()","class#superclass_delegating_accessor()","activerecord::connectionadapters::sqliteadapter#supports_add_column?()","activerecord::connectionadapters::abstractadapter#supports_bulk_alter?()","activerecord::connectionadapters::abstractadapter#supports_count_distinct?()","activerecord::connectionadapters::abstractadapter#supports_ddl_transactions?()","activerecord::connectionadapters::postgresqladapter#supports_ddl_transactions?()","activerecord::connectionadapters::sqliteadapter#supports_ddl_transactions?()","activerecord::connectionadapters::abstractadapter#supports_explain?()","activerecord::connectionadapters::mysql2adapter#supports_explain?()","activerecord::connectionadapters::postgresqladapter#supports_explain?()","activerecord::connectionadapters::sqliteadapter#supports_explain?()","activerecord::connectionadapters::abstractadapter#supports_index_sort_order?()","activerecord::connectionadapters::abstractmysqladapter#supports_index_sort_order?()","activerecord::connectionadapters::postgresqladapter#supports_index_sort_order?()","activerecord::connectionadapters::sqliteadapter#supports_index_sort_order?()","activerecord::connectionadapters::postgresqladapter#supports_insert_with_returning?()","activerecord::connectionadapters::abstractadapter#supports_migrations?()","activerecord::connectionadapters::abstractmysqladapter#supports_migrations?()","activerecord::connectionadapters::postgresqladapter#supports_migrations?()","activerecord::connectionadapters::abstractadapter#supports_primary_key?()","activerecord::connectionadapters::abstractmysqladapter#supports_primary_key?()","activerecord::connectionadapters::abstractadapter#supports_savepoints?()","activerecord::connectionadapters::abstractmysqladapter#supports_savepoints?()","activerecord::connectionadapters::postgresqladapter#supports_savepoints?()","activerecord::connectionadapters::sqliteadapter#supports_savepoints?()","activerecord::connectionadapters::databasestatements#supports_statement_cache?()","activerecord::connectionadapters::mysqladapter#supports_statement_cache?()","activerecord::connectionadapters::postgresqladapter#supports_statement_cache?()","activerecord::connectionadapters::sqliteadapter#supports_statement_cache?()","actionview::template#supports_streaming?()","actionview::template::handlers::erb#supports_streaming?()","kernel#suppress()","activerecord::migration#suppress_messages()","plugin#svn_url?()","actiondispatch::middlewarestack#swap()","activesupport::hashwithindifferentaccess#symbolize_keys()","activesupport::hashwithindifferentaccess#symbolize_keys()","hash#symbolize_keys()","hash#symbolize_keys!()","activerecord::inheritance::classmethods#symbolized_base_class()","actiondispatch::http::parameters#symbolized_path_parameters()","activerecord::inheritance::classmethods#symbolized_sti_name()","mime::mimes#symbols()","activesupport::orderedhash#sync_keys!()","module#synchronize()","abstractcontroller::translation#t()","actionview::helpers::translationhelper#t()","activerecord::connectionadapters::schemastatements#table_alias_for()","activerecord::connectionadapters::databaselimits#table_alias_length()","activerecord::connectionadapters::postgresqladapter#table_alias_length()","activerecord::connectionadapters::abstractmysqladapter#table_exists?()","activerecord::connectionadapters::postgresqladapter#table_exists?()","activerecord::connectionadapters::sqliteadapter#table_exists?()","activerecord::connectionadapters::schemacache#table_exists?()","activerecord::connectionadapters::schemastatements#table_exists?()","activerecord::modelschema::classmethods#table_exists?()","activerecord::modelschema::classmethods#table_name()","activerecord::sessionstore::sqlbypass::table_name()","rails::generators::namedbase#table_name()","activerecord::modelschema::classmethods#table_name=()","activerecord::connectionadapters::databaselimits#table_name_length()","activerecord::fixtures#table_rows()","activerecord::connectionadapters::sqliteadapter#table_structure()","activesupport::inflector#tableize()","string#tableize()","activerecord::connectionadapters::postgresqladapter#tables()","actionview::helpers::activemodelinstancetag#tag()","actionview::helpers::taghelper#tag()","activesupport::taggedlogging#tagged()","rails::rack::logtailer#tail!()","activesupport::logsubscriber::testhelper#teardown()","activesupport::testing::setupandteardown::classmethods#teardown()","activerecord::testfixtures#teardown_fixtures()","actioncontroller::templateassertions#teardown_subscriptions()","actionview::helpers::formhelper#telephone_field()","actionview::helpers::formtaghelper#telephone_field_tag()","rails::generators::namedbase#template()","actionview::lookupcontext::viewpaths#template_exists?()","rails::generators::templates_path()","numeric#terabyte()","numeric#terabytes()","activesupport::testing::declarative#test()","rails::appbuilder#test()","rails::pluginbuilder#test()","rails::pluginbuilder#test_dummy_clean()","rails::pluginbuilder#test_dummy_config()","activemodel::lint::tests#test_errors_aref()","activemodel::lint::tests#test_errors_full_messages()","activemodel::lint::tests#test_model_naming()","activemodel::lint::tests#test_persisted?()","activemodel::lint::tests#test_to_key()","activemodel::lint::tests#test_to_param()","activemodel::lint::tests#test_to_partial_path()","activemodel::lint::tests#test_valid?()","actioncontroller::testcase::behavior::classmethods#tests()","actionview::testcase::behavior::classmethods#tests()","rails::generators::testcase::tests()","actionview::helpers::formhelper#text_area()","actionview::helpers::formtaghelper#text_area_tag()","actionview::helpers::formhelper#text_field()","actionview::helpers::formtaghelper#text_field_tag()","array#third()","rails::application::configuration#threadsafe!()","activesupport::multibyte::chars#tidy_bytes()","activesupport::multibyte::unicode#tidy_bytes()","activesupport::timewithzone#time()","actionview::helpers::datehelper#time_ago_in_words()","actionview::helpers::datehelper#time_select()","actionview::helpers::formbuilder#time_select()","actionview::helpers::datehelper#time_tag()","activesupport::testing::performance::profiler#time_with_block()","time::time_with_datetime_fallback()","actionview::helpers::formoptionshelper#time_zone_options_for_select()","actionview::helpers::formbuilder#time_zone_select()","actionview::helpers::formoptionshelper#time_zone_select()","activeresource::base::timeout()","activeresource::base::timeout=()","activeresource::connection#timeout=()","activerecord::base::timestamped_migrations()","activerecord::connectionadapters::table#timestamps()","activerecord::connectionadapters::tabledefinition#timestamps()","activesupport::multibyte::chars#titlecase()","string#titlecase()","activesupport::inflector#titleize()","activesupport::multibyte::chars#titleize()","string#titleize()","rails::appbuilder#tmp()","array#to()","string#to()","actiondispatch::response#to_a()","activemodel::errors#to_a()","activerecord::relation#to_a()","activesupport::orderedhash#to_a()","activesupport::timewithzone#to_a()","rails::paths::path#to_a()","rails::application#to_app()","actiondispatch::response#to_ary()","actionview::helpers::instancetag#to_boolean_select_tag()","actionview::helpers::instancetag#to_check_box_tag()","actiondispatch::reloader::to_cleanup()","actionview::helpers::instancetag#to_content_tag()","bigdecimal#to_d()","date#to_date()","datetime#to_date()","mysql::time#to_date()","string#to_date()","time#to_date()","actionview::helpers::datehelperinstancetag#to_date_select_tag()","activesupport::timewithzone#to_datetime()","date#to_datetime()","datetime#to_datetime()","string#to_datetime()","time#to_datetime()","actionview::helpers::datehelperinstancetag#to_datetime_select_tag()","array#to_default_s()","date#to_default_s()","datetime#to_default_s()","range#to_default_s()","time#to_default_s()","activesupport::timewithzone#to_f()","datetime#to_f()","actioncontroller::responder#to_format()","activesupport::timewithzone#to_formatted_s()","array#to_formatted_s()","bigdecimal#to_formatted_s()","date#to_formatted_s()","datetime#to_formatted_s()","range#to_formatted_s()","time#to_formatted_s()","actiondispatch::flash::flashhash#to_hash()","activemodel::errors#to_hash()","activerecord::result#to_hash()","activesupport::hashwithindifferentaccess#to_hash()","activesupport::hashwithindifferentaccess#to_hash()","activesupport::orderedhash#to_hash()","actioncontroller::responder#to_html()","rails::info::to_html()","activesupport::timewithzone#to_i()","datetime#to_i()","actionview::helpers::instancetag#to_input_field_tag()","actioncontroller::responder#to_js()","activeresource::base#to_json()","object#to_json()","activemodel::conversion#to_key()","activerecord::attributemethods::primarykey#to_key()","actionview::helpers::instancetag#to_label_tag()","actionview::helpers::formbuilder#to_model()","activemodel::conversion#to_model()","actionview::helpers::instancetag#to_number_field_tag()","hash#to_options()","activesupport::hashwithindifferentaccess#to_options!()","activesupport::hashwithindifferentaccess#to_options!()","hash#to_options!()","activemodel::conversion#to_param()","activerecord::integration#to_param()","activesupport::safebuffer#to_param()","array#to_param()","falseclass#to_param()","hash#to_param()","nilclass#to_param()","object#to_param()","trueclass#to_param()","actionview::helpers::formbuilder#to_partial_path()","activemodel::conversion#to_partial_path()","actiondispatch::response#to_path()","actionview::filesystemresolver#to_path()","actiondispatch::reloader::to_prepare()","rails::railtie::configuration#to_prepare()","rails::railtie::configuration#to_prepare_blocks()","array#to_query()","hash#to_query()","object#to_query()","actionview::helpers::instancetag#to_radio_button_tag()","actiondispatch::remoteip::getip#to_s()","actionview::filesystemresolver#to_s()","actionview::fixtureresolver#to_s()","activeresource::request#to_s()","activeresource::sslerror#to_s()","activeresource::timeouterror#to_s()","activesupport::safebuffer#to_s()","activesupport::timewithzone#to_s()","activesupport::timezone#to_s()","array#to_s()","bigdecimal#to_s()","date#to_s()","datetime#to_s()","mime::type#to_s()","plugin#to_s()","rails::info::to_s()","range#to_s()","sourceannotationextractor::annotation#to_s()","time#to_s()","array#to_sentence()","activerecord::connectionadapters::databasestatements#to_sql()","activerecord::connectionadapters::tabledefinition#to_sql()","activerecord::relation#to_sql()","mime::type#to_str()","mime::type#to_sym()","activesupport::xmlmini#to_tag()","actionview::helpers::instancetag#to_text_area_tag()","activesupport::timewithzone#to_time()","date#to_time()","datetime#to_time()","string#to_time()","time#to_time()","date#to_time_in_current_zone()","actionview::helpers::datehelperinstancetag#to_time_select_tag()","activemodel::errors#to_xml()","activemodel::serializers::xml#to_xml()","activerecord::serialization#to_xml()","activeresource::base#to_xml()","array#to_xml()","hash#to_xml()","activesupport::orderedhash#to_yaml()","activesupport::safebuffer#to_yaml()","activesupport::timewithzone#to_yaml()","bigdecimal#to_yaml()","activesupport::orderedhash#to_yaml_type()","activesupport::timezone#today()","activesupport::timewithzone#today?()","date#today?()","time#today?()","activerecord::persistence#toggle()","activerecord::persistence#toggle!()","actioncontroller::httpauthentication::token#token_and_options()","html::sanitizer#tokenize()","html::whitelistsanitizer#tokenize()","date::tomorrow()","date#tomorrow()","time#tomorrow()","activerecord::persistence#touch()","activemodel::observerarray#transaction()","activerecord::connectionadapters::databasestatements#transaction()","activerecord::transactions#transaction()","activerecord::transactions::classmethods#transaction()","activerecord::connectionadapters::abstractadapter#transaction_joinable=()","abstractcontroller::translation#translate()","actionview::helpers::translationhelper#translate()","activerecord::connectionadapters::abstractadapter#translate_exception()","activerecord::connectionadapters::abstractmysqladapter#translate_exception()","activerecord::connectionadapters::postgresqladapter#translate_exception()","activerecord::connectionadapters::sqliteadapter#translate_exception()","activesupport::inflector#transliterate()","activesupport::filewatcher#trigger()","activesupport::filewatcher::backend#trigger()","actionview::helpers::texthelper#truncate()","string#truncate()","nilclass#try()","object#try()","activerecord::testfixtures::classmethods#try_to_load_dependency()","rails::initializable::collection#tsort_each_child()","activerecord::connectionadapters::postgresqladapter::tabledefinition#tsvector()","activesupport::timewithzone#tv_sec()","activerecord::connectionadapters::mysqladapter#type_cast()","activerecord::connectionadapters::postgresqladapter#type_cast()","activerecord::connectionadapters::quoting#type_cast()","activerecord::attributemethods::serialization#type_cast_attribute_for_write()","activerecord::connectionadapters::abstractmysqladapter#type_to_sql()","activerecord::connectionadapters::postgresqladapter#type_to_sql()","activesupport::multibyte::unicode#u_unpack()","activerecord::connectionadapters::querycache#uncached()","activerecord::querycache::classmethods#uncached()","activesupport::inflector::inflections#uncountable()","activemodel::naming::uncountable?()","rails::generators::namedbase#uncountable?()","activemodel::attributemethods::classmethods#undefine_attribute_methods()","activerecord::attributemethods::classmethods#undefine_attribute_methods()","activerecord::attributemethods::read::classmethods#undefine_attribute_methods()","activesupport::inflector#underscore()","string#underscore()","object#unescape()","activerecord::connectionadapters::postgresqladapter#unescape_bytea()","actiondispatch::filehandler#unescape_path()","plugin#uninstall()","activerecord::querymethods#uniq()","array#uniq_by()","array#uniq_by!()","activesupport::memoizable::instancemethods#unmemoize_all()","mime::type::unregister()","activerecord::attributemethods::serialization::attribute#unserialize()","activerecord::attributemethods::serialization::attribute#unserialized_value()","activesupport::notifications::unsubscribe()","activesupport::notifications::fanout#unsubscribe()","activesupport::duration#until()","numeric#until()","activerecord::migration#up()","activesupport::multibyte::chars#upcase()","activerecord::connectionadapters::databasestatements#update()","activerecord::relation#update()","activeresource::base#update()","activesupport::hashwithindifferentaccess#update()","activesupport::hashwithindifferentaccess#update()","activerecord::relation#update_all()","activerecord::persistence#update_attribute()","activeresource::base#update_attribute()","activerecord::persistence#update_attributes()","activeresource::base#update_attributes()","rails::generators::activemodel#update_attributes()","activerecord::persistence#update_attributes!()","activerecord::persistence#update_column()","activerecord::countercache#update_counters()","activerecord::locking::optimistic::classmethods#update_counters()","activerecord::connectionadapters::databasestatements#update_sql()","activerecord::connectionadapters::postgresqladapter#update_sql()","actionview::helpers::atomfeedhelper::atomfeedbuilder#updated()","activesupport::fileupdatechecker#updated?()","actiondispatch::http::url#url()","actionview::helpers::formhelper#url_field()","actionview::helpers::formtaghelper#url_field_tag()","actioncontroller::metal#url_for()","actiondispatch::http::url::url_for()","actiondispatch::routing::urlfor#url_for()","actionview::helpers::urlhelper#url_for()","actioncontroller::urlfor#url_options()","actiondispatch::integration::session#url_options()","actiondispatch::integrationtest#url_options()","actiondispatch::integrationtest#url_options()","actiondispatch::routing::urlfor#url_options()","actionview::helpers::urlhelper#url_options()","activesupport::timezone::us_zones()","rails::generators::base::usage_path()","actioncontroller::metal::use()","actiondispatch::flash::flashhash#use()","actiondispatch::middlewarestack#use()","activerecord::identitymap::use()","actiondispatch::http::mimenegotiation#use_accept_header()","railsenvironment#use_checkout?()","railsenvironment#use_externals?()","actioncontroller::renderers::classmethods#use_renderer()","actioncontroller::renderers::classmethods#use_renderers()","railsenvironment#use_svn?()","time::use_zone()","activesupport::timewithzone#usec()","activeresource::base::user()","activeresource::base::user=()","activeresource::connection#user=()","actiondispatch::testrequest#user_agent=()","actioncontroller::httpauthentication::basic#user_name_and_password()","activerecord::testfixtures::classmethods#uses_transaction()","activerecord::testfixtures::classmethods#uses_transaction?()","activerecord::findermethods#using_limitable_reflections?()","actiondispatch::routing::mapper::resources#using_match_shorthand?()","activesupport::timewithzone#utc()","datetime#utc()","activesupport::timewithzone#utc?()","datetime#utc?()","activesupport::timewithzone#utc_offset()","activesupport::timezone#utc_offset()","datetime#utc_offset()","time::utc_time()","activesupport::timezone#utc_to_local()","actionview::helpers::formtaghelper#utf8_enforcer_tag()","actiondispatch::request#uuid()","activemodel::validations#valid?()","activerecord::validations#valid?()","activeresource::validations#valid?()","actiondispatch::http::mimenegotiation#valid_accept_header()","activerecord::connectionadapters::sqliteadapter#valid_alter_table_options()","rails::generators::appgenerator#valid_const?()","rails::generators::pluginnewgenerator#valid_const?()","activerecord::scoping::named::classmethods#valid_scope_name?()","activemodel::eachvalidator#validate()","activemodel::validations::classmethods#validate()","activemodel::validations::presencevalidator#validate()","activemodel::validator#validate()","actioncontroller::httpauthentication::digest#validate_digest_response()","activemodel::eachvalidator#validate_each()","activemodel::validations::acceptancevalidator#validate_each()","activemodel::validations::confirmationvalidator#validate_each()","activemodel::validations::exclusionvalidator#validate_each()","activemodel::validations::formatvalidator#validate_each()","activemodel::validations::inclusionvalidator#validate_each()","activemodel::validations::lengthvalidator#validate_each()","activemodel::validations::numericalityvalidator#validate_each()","activemodel::validations::withvalidator#validate_each()","activerecord::validations::associatedvalidator#validate_each()","activerecord::validations::uniquenessvalidator#validate_each()","i18n::railtie::validate_fallbacks()","actioncontroller::httpauthentication::digest#validate_nonce()","activemodel::validations::classmethods#validates()","activemodel::validations::classmethods#validates!()","activemodel::validations::helpermethods#validates_acceptance_of()","activerecord::validations::classmethods#validates_associated()","activemodel::validations::helpermethods#validates_confirmation_of()","activemodel::validations::classmethods#validates_each()","activemodel::validations::helpermethods#validates_exclusion_of()","activemodel::validations::helpermethods#validates_format_of()","activemodel::validations::helpermethods#validates_inclusion_of()","activemodel::validations::helpermethods#validates_length_of()","activemodel::validations::helpermethods#validates_numericality_of()","activemodel::validations::helpermethods#validates_presence_of()","activemodel::validations::helpermethods#validates_size_of()","activerecord::validations::classmethods#validates_uniqueness_of()","activemodel::validations#validates_with()","activemodel::validations::classmethods#validates_with()","activemodel::validations::classmethods#validators()","activemodel::validations::classmethods#validators_on()","actionview::helpers::instancetag#value()","actionview::helpers::instancetag::value()","activesupport::cache::entry#value()","actionview::helpers::instancetag#value_before_type_cast()","actionview::helpers::instancetag::value_before_type_cast()","activemodel::errors#values()","activesupport::orderedhash#values()","activesupport::hashwithindifferentaccess#values_at()","activesupport::hashwithindifferentaccess#values_at()","rails::appbuilder#vendor()","rails::generators::actions#vendor()","rails::appbuilder#vendor_javascripts()","rails::appbuilder#vendor_plugins()","rails::appbuilder#vendor_stylesheets()","actioncontroller::requestforgeryprotection#verified_request?()","activesupport::messageverifier#verify()","activerecord::connectionadapters::abstractadapter#verify!()","actioncontroller::requestforgeryprotection#verify_authenticity_token()","mime::type#verify_request?()","rails::version()","actionview::helpers::assettaghelper#video_path()","actionview::helpers::assettaghelper#video_tag()","abstractcontroller::rendering#view_assigns()","abstractcontroller::rendering#view_context()","abstractcontroller::rendering#view_context_class()","abstractcontroller::rendering::classmethods#view_context_class()","abstractcontroller::viewpaths::classmethods#view_paths()","abstractcontroller::viewpaths::classmethods#view_paths=()","actionview::lookupcontext::viewpaths#view_paths=()","abstractcontroller::rendering#view_renderer()","actioncontroller::hideactions::classmethods#visible_action?()","activesupport::logsubscriber::testhelper#wait()","activesupport::notifications::fanout#wait()","activesupport::multibyte::chars::wants?()","activesupport::deprecation::warn()","activesupport::filewatcher#watch()","activesupport::dependencies::watchstack#watch_namespaces()","rails::application#watchable_args()","rails::railtie::configuration#watchable_dirs()","rails::railtie::configuration#watchable_files()","activesupport::dependencies::watchstack#watching?()","numeric#week()","numeric#weeks()","date#weeks_ago()","time#weeks_ago()","activerecord::querymethods#where()","activerecord::relation#where_values_hash()","abstractcontroller::railties::routeshelpers::with()","actioncontroller::railties::paths::with()","activesupport::json::with_backend()","activesupport::xmlmini#with_backend()","activerecord::connectionadapters::connectionpool#with_connection()","actiondispatch::routing::mapper::base#with_default_scope()","rails::generators::pluginnewgenerator#with_dummy_app?()","actiondispatch::routing::mapper::resources#with_exclusive_scope()","activerecord::scoping::classmethods#with_exclusive_scope()","actionview::lookupcontext::viewpaths#with_fallbacks()","activesupport::testing::performance::metrics::base#with_gc_stats()","activesupport::hashwithindifferentaccess#with_indifferent_access()","activesupport::hashwithindifferentaccess#with_indifferent_access()","hash#with_indifferent_access()","activesupport::cache::strategy::localcache#with_local_cache()","activerecord::locking::pessimistic#with_lock()","object#with_options()","activesupport::testing::performance::benchmarker#with_output_file()","actiondispatch::assertions::routingassertions#with_routing()","activerecord::scoping::classmethods#with_scope()","actiondispatch::routing::mapper::resources#with_scope_level()","activerecord::transactions#with_transaction_returning_status()","kernel#with_warnings()","activerecord::identitymap::without()","actioncontroller::base::without_modules()","actionview::helpers::texthelper#word_wrap()","array::wrap()","actioncontroller::paramswrapper::classmethods#wrap_parameters()","rails::generators::namedbase#wrap_with_namespace()","actiondispatch::railsentitystore#write()","actiondispatch::railsmetastore#write()","activerecord::migration#write()","activesupport::cache::store#write()","activerecord::attributemethods::write#write_attribute()","activesupport::cache::filestore#write_entry()","activesupport::cache::strategy::localcache::localstore#write_entry()","actioncontroller::caching::fragments#write_fragment()","actioncontroller::testcase::behavior#xhr()","actiondispatch::integration::requesthelpers#xhr()","actiondispatch::request#xhr?()","activerecord::connectionadapters::postgresqladapter::tabledefinition#xml()","activerecord::connectionadapters::tabledefinition#xml()","actioncontroller::testcase::behavior#xml_http_request()","actiondispatch::integration::requesthelpers#xml_http_request()","actiondispatch::request#xml_http_request?()","activesupport::timewithzone#xmlschema()","date#xmlschema()","datetime#xmlschema()","integer#year()","integer#years()","date#years_ago()","time#years_ago()","date#years_since()","time#years_since()","date#yesterday()","date::yesterday()","time#yesterday()","activesupport::timewithzone#zone()","time::zone()","time::zone=()","activesupport::timezone::zones_map()","","","","","","","","",""],"info":[["AbstractController","","classes/AbstractController.html","","<p>Includes <code>url_for</code> into the host class (e.g. an abstract\ncontroller or mailer). The class has to provide …\n"],["AbstractController::ActionNotFound","","classes/AbstractController/ActionNotFound.html","",""],["AbstractController::AssetPaths","","classes/AbstractController/AssetPaths.html","",""],["AbstractController::Base","","classes/AbstractController/Base.html","","<p><code>AbstractController::Base</code> is a low-level API. Nobody should be\nusing it directly, and subclasses (like ...\n"],["AbstractController::Callbacks","","classes/AbstractController/Callbacks.html","",""],["AbstractController::Callbacks::ClassMethods","","classes/AbstractController/Callbacks/ClassMethods.html","",""],["AbstractController::Collector","","classes/AbstractController/Collector.html","",""],["AbstractController::DoubleRenderError","","classes/AbstractController/DoubleRenderError.html","",""],["AbstractController::Error","","classes/AbstractController/Error.html","",""],["AbstractController::Helpers","","classes/AbstractController/Helpers.html","",""],["AbstractController::Helpers::ClassMethods","","classes/AbstractController/Helpers/ClassMethods.html","",""],["AbstractController::Layouts","","classes/AbstractController/Layouts.html","","<p>Layouts reverse the common pattern of including shared headers and footers\nin many templates to isolate …\n"],["AbstractController::Layouts::ClassMethods","","classes/AbstractController/Layouts/ClassMethods.html","",""],["AbstractController::Layouts::ClassMethods::LayoutConditions","","classes/AbstractController/Layouts/ClassMethods/LayoutConditions.html","","<p>This module is mixed in if layout conditions are provided. This means that\nif no layout conditions are …\n"],["AbstractController::Logger","","classes/AbstractController/Logger.html","",""],["AbstractController::Railties","","classes/AbstractController/Railties.html","",""],["AbstractController::Railties::RoutesHelpers","","classes/AbstractController/Railties/RoutesHelpers.html","",""],["AbstractController::Rendering","","classes/AbstractController/Rendering.html","",""],["AbstractController::Rendering::ClassMethods","","classes/AbstractController/Rendering/ClassMethods.html","",""],["AbstractController::Translation","","classes/AbstractController/Translation.html","",""],["AbstractController::UrlFor","","classes/AbstractController/UrlFor.html","",""],["AbstractController::UrlFor::ClassMethods","","classes/AbstractController/UrlFor/ClassMethods.html","",""],["AbstractController::ViewPaths","","classes/AbstractController/ViewPaths.html","",""],["AbstractController::ViewPaths::ClassMethods","","classes/AbstractController/ViewPaths/ClassMethods.html","",""],["ActionController","","classes/ActionController.html","","<p>Includes <code>url_for</code> into the host class. The class has to provide\na <code>RouteSet</code> by implementing  the <code>_routes</code> …\n"],["ActionController::Base","","classes/ActionController/Base.html","","<p>Action Controllers are the core of a web request in Rails. They are made up\nof one or more actions that …\n"],["ActionController::Caching","","classes/ActionController/Caching.html","","<p>Caching is a cheap way of speeding up slow applications by keeping the\nresult of calculations, renderings, …\n"],["ActionController::Caching::Actions","","classes/ActionController/Caching/Actions.html","","<p>Action caching is similar to page caching by the fact that the entire\noutput of the response is cached, …\n"],["ActionController::Caching::Actions::ActionCachePath","","classes/ActionController/Caching/Actions/ActionCachePath.html","",""],["ActionController::Caching::Actions::ClassMethods","","classes/ActionController/Caching/Actions/ClassMethods.html","",""],["ActionController::Caching::ConfigMethods","","classes/ActionController/Caching/ConfigMethods.html","",""],["ActionController::Caching::Fragments","","classes/ActionController/Caching/Fragments.html","","<p>Fragment caching is used for caching various blocks within  views without\ncaching the entire action as …\n"],["ActionController::Caching::Pages","","classes/ActionController/Caching/Pages.html","","<p>Page caching is an approach to caching where the entire action output of is\nstored as a HTML file that …\n"],["ActionController::Caching::Pages::ClassMethods","","classes/ActionController/Caching/Pages/ClassMethods.html","",""],["ActionController::Caching::Sweeping","","classes/ActionController/Caching/Sweeping.html","","<p>Sweepers are the terminators of the caching world and responsible for\nexpiring caches when model objects …\n"],["ActionController::Compatibility","","classes/ActionController/Compatibility.html","",""],["ActionController::ConditionalGet","","classes/ActionController/ConditionalGet.html","",""],["ActionController::Cookies","","classes/ActionController/Cookies.html","",""],["ActionController::DataStreaming","","classes/ActionController/DataStreaming.html","","<p>Methods for sending arbitrary data and for streaming files to the browser,\ninstead of rendering.\n"],["ActionController::Flash","","classes/ActionController/Flash.html","",""],["ActionController::ForceSSL","","classes/ActionController/ForceSSL.html","","<p>This module provides a method which will redirect browser to use HTTPS\nprotocol. This will ensure that …\n"],["ActionController::ForceSSL::ClassMethods","","classes/ActionController/ForceSSL/ClassMethods.html","",""],["ActionController::Head","","classes/ActionController/Head.html","",""],["ActionController::Helpers","","classes/ActionController/Helpers.html","","<p>The Rails framework provides a large number of helpers for working with\nassets, dates, forms, numbers …\n"],["ActionController::Helpers::ClassMethods","","classes/ActionController/Helpers/ClassMethods.html","",""],["ActionController::HideActions","","classes/ActionController/HideActions.html","","<p>Adds the ability to prevent public methods on a controller to be called as\nactions.\n"],["ActionController::HideActions::ClassMethods","","classes/ActionController/HideActions/ClassMethods.html","",""],["ActionController::HttpAuthentication","","classes/ActionController/HttpAuthentication.html","",""],["ActionController::HttpAuthentication::Basic","","classes/ActionController/HttpAuthentication/Basic.html","","<p>Makes it dead easy to do HTTP Basic and Digest authentication.\n<p>Simple Basic example\n\n<pre class=\"ruby\"> <span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">PostsController</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActionController::HttpAuthentication::Basic::ControllerMethods","","classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html","",""],["ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods","","classes/ActionController/HttpAuthentication/Basic/ControllerMethods/ClassMethods.html","",""],["ActionController::HttpAuthentication::Digest","","classes/ActionController/HttpAuthentication/Digest.html","",""],["ActionController::HttpAuthentication::Digest::ControllerMethods","","classes/ActionController/HttpAuthentication/Digest/ControllerMethods.html","",""],["ActionController::HttpAuthentication::Token","","classes/ActionController/HttpAuthentication/Token.html","","<p>Makes it dead easy to do HTTP Token authentication.\n<p>Simple Token example:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">PostsController</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ApplicationController</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActionController::HttpAuthentication::Token::ControllerMethods","","classes/ActionController/HttpAuthentication/Token/ControllerMethods.html","",""],["ActionController::ImplicitRender","","classes/ActionController/ImplicitRender.html","",""],["ActionController::Instrumentation","","classes/ActionController/Instrumentation.html","","<p>Adds instrumentation to several ends in ActionController::Base. It also\nprovides some hooks related with …\n"],["ActionController::Instrumentation::ClassMethods","","classes/ActionController/Instrumentation/ClassMethods.html","",""],["ActionController::LogSubscriber","","classes/ActionController/LogSubscriber.html","",""],["ActionController::Metal","","classes/ActionController/Metal.html","","<p><code>ActionController::Metal</code> is the simplest possible controller,\nproviding a valid Rack interface without ...\n"],["ActionController::Middleware","","classes/ActionController/Middleware.html","",""],["ActionController::Middleware::ActionMiddleware","","classes/ActionController/Middleware/ActionMiddleware.html","",""],["ActionController::MimeResponds","","classes/ActionController/MimeResponds.html","",""],["ActionController::MimeResponds::ClassMethods","","classes/ActionController/MimeResponds/ClassMethods.html","",""],["ActionController::ParamsWrapper","","classes/ActionController/ParamsWrapper.html","","<p>Wraps the parameters hash into a nested hash. This will allow clients to\nsubmit POST requests without …\n"],["ActionController::ParamsWrapper::ClassMethods","","classes/ActionController/ParamsWrapper/ClassMethods.html","",""],["ActionController::RackDelegation","","classes/ActionController/RackDelegation.html","",""],["ActionController::Railtie","","classes/ActionController/Railtie.html","",""],["ActionController::Railties","","classes/ActionController/Railties.html","",""],["ActionController::Railties::Paths","","classes/ActionController/Railties/Paths.html","",""],["ActionController::RecordIdentifier","","classes/ActionController/RecordIdentifier.html","","<p>The record identifier encapsulates a number of naming conventions for\ndealing with records, like Active …\n"],["ActionController::Redirecting","","classes/ActionController/Redirecting.html","",""],["ActionController::Renderers","","classes/ActionController/Renderers.html","",""],["ActionController::Renderers::All","","classes/ActionController/Renderers/All.html","",""],["ActionController::Renderers::ClassMethods","","classes/ActionController/Renderers/ClassMethods.html","",""],["ActionController::Rendering","","classes/ActionController/Rendering.html","",""],["ActionController::RequestForgeryProtection","","classes/ActionController/RequestForgeryProtection.html","","<p>Controller actions are protected from Cross-Site Request Forgery (CSRF)\nattacks by including a token …\n"],["ActionController::RequestForgeryProtection::ClassMethods","","classes/ActionController/RequestForgeryProtection/ClassMethods.html","",""],["ActionController::Rescue","","classes/ActionController/Rescue.html","","<p>This module is responsible to provide `rescue_from` helpers to controllers\nand configure when detailed …\n"],["ActionController::Responder","","classes/ActionController/Responder.html","","<p>Responsible for exposing a resource to different mime requests, usually\ndepending on the HTTP verb.  …\n"],["ActionController::SessionManagement","","classes/ActionController/SessionManagement.html","",""],["ActionController::SessionManagement::ClassMethods","","classes/ActionController/SessionManagement/ClassMethods.html","",""],["ActionController::Streaming","","classes/ActionController/Streaming.html","","<p>Allows views to be streamed back to the client as they are rendered.\n<p>The default way Rails renders views …\n"],["ActionController::TemplateAssertions","","classes/ActionController/TemplateAssertions.html","",""],["ActionController::TestCase","","classes/ActionController/TestCase.html","","<p>Superclass for ActionController functional tests. Functional tests allow\nyou to test a single controller …\n"],["ActionController::TestCase::Behavior","","classes/ActionController/TestCase/Behavior.html","",""],["ActionController::TestCase::Behavior::ClassMethods","","classes/ActionController/TestCase/Behavior/ClassMethods.html","",""],["ActionController::TestCase::RaiseActionExceptions","","classes/ActionController/TestCase/RaiseActionExceptions.html","","<p>When the request.remote_addr remains the default for testing, which is\n0.0.0.0, the exception is simply …\n"],["ActionController::TestResponse","","classes/ActionController/TestResponse.html","",""],["ActionController::Testing","","classes/ActionController/Testing.html","",""],["ActionController::Testing::ClassMethods","","classes/ActionController/Testing/ClassMethods.html","",""],["ActionController::UrlFor","","classes/ActionController/UrlFor.html","",""],["ActionDispatch","","classes/ActionDispatch.html","","<p>Keep this file meanwhile github.com/rack/rack/pull/313 is not released\n"],["ActionDispatch::Assertions","","classes/ActionDispatch/Assertions.html","",""],["ActionDispatch::Assertions::DomAssertions","","classes/ActionDispatch/Assertions/DomAssertions.html","",""],["ActionDispatch::Assertions::ResponseAssertions","","classes/ActionDispatch/Assertions/ResponseAssertions.html","","<p>A small suite of assertions that test responses from Rails applications.\n"],["ActionDispatch::Assertions::RoutingAssertions","","classes/ActionDispatch/Assertions/RoutingAssertions.html","","<p>Suite of assertions to test routes generated by Rails and the handling of\nrequests made to them.\n"],["ActionDispatch::Assertions::SelectorAssertions","","classes/ActionDispatch/Assertions/SelectorAssertions.html","","<p>Adds the <code>assert_select</code> method for use in Rails functional test\ncases, which can be used to make assertions …\n"],["ActionDispatch::Assertions::TagAssertions","","classes/ActionDispatch/Assertions/TagAssertions.html","","<p>Pair of assertions to testing elements in the HTML output of the response.\n"],["ActionDispatch::BestStandardsSupport","","classes/ActionDispatch/BestStandardsSupport.html","",""],["ActionDispatch::BodyProxy","","classes/ActionDispatch/BodyProxy.html","",""],["ActionDispatch::Callbacks","","classes/ActionDispatch/Callbacks.html","","<p>Provide callbacks to be executed before and after the request dispatch.\n"],["ActionDispatch::Cookies","","classes/ActionDispatch/Cookies.html","","<p>Cookies are read and written through ActionController#cookies.\n<p>The cookies being read are the ones received …\n"],["ActionDispatch::Cookies::CookieOverflow","","classes/ActionDispatch/Cookies/CookieOverflow.html","","<p>Raised when storing more than 4K of session data.\n"],["ActionDispatch::DebugExceptions","","classes/ActionDispatch/DebugExceptions.html","","<p>This middleware is responsible for logging exceptions and showing a\ndebugging page in case the request …\n"],["ActionDispatch::ExceptionWrapper","","classes/ActionDispatch/ExceptionWrapper.html","",""],["ActionDispatch::FileHandler","","classes/ActionDispatch/FileHandler.html","",""],["ActionDispatch::Flash","","classes/ActionDispatch/Flash.html","","<p>The flash provides a way to pass temporary objects between actions.\nAnything you place in the flash will …\n"],["ActionDispatch::Flash::FlashHash","","classes/ActionDispatch/Flash/FlashHash.html","","<p>Implementation detail: please do not change the signature of the FlashHash\nclass. Doing that will likely …\n"],["ActionDispatch::Head","","classes/ActionDispatch/Head.html","",""],["ActionDispatch::Http","","classes/ActionDispatch/Http.html","",""],["ActionDispatch::Http::Cache","","classes/ActionDispatch/Http/Cache.html","",""],["ActionDispatch::Http::Cache::Request","","classes/ActionDispatch/Http/Cache/Request.html","",""],["ActionDispatch::Http::Cache::Response","","classes/ActionDispatch/Http/Cache/Response.html","",""],["ActionDispatch::Http::FilterParameters","","classes/ActionDispatch/Http/FilterParameters.html","","<p>Allows you to specify sensitive parameters which will be replaced from the\nrequest log by looking in …\n"],["ActionDispatch::Http::Headers","","classes/ActionDispatch/Http/Headers.html","",""],["ActionDispatch::Http::MimeNegotiation","","classes/ActionDispatch/Http/MimeNegotiation.html","",""],["ActionDispatch::Http::ParameterFilter","","classes/ActionDispatch/Http/ParameterFilter.html","",""],["ActionDispatch::Http::Parameters","","classes/ActionDispatch/Http/Parameters.html","",""],["ActionDispatch::Http::URL","","classes/ActionDispatch/Http/URL.html","",""],["ActionDispatch::Http::Upload","","classes/ActionDispatch/Http/Upload.html","",""],["ActionDispatch::Http::UploadedFile","","classes/ActionDispatch/Http/UploadedFile.html","",""],["ActionDispatch::Integration","","classes/ActionDispatch/Integration.html","",""],["ActionDispatch::Integration::RequestHelpers","","classes/ActionDispatch/Integration/RequestHelpers.html","",""],["ActionDispatch::Integration::Runner","","classes/ActionDispatch/Integration/Runner.html","",""],["ActionDispatch::Integration::Session","","classes/ActionDispatch/Integration/Session.html","","<p>An instance of this class represents a set of requests and responses\nperformed sequentially by a test …\n"],["ActionDispatch::IntegrationTest","","classes/ActionDispatch/IntegrationTest.html","","<p>An integration test spans multiple controllers and actions, tying them all\ntogether to ensure they work …\n"],["ActionDispatch::MiddlewareStack","","classes/ActionDispatch/MiddlewareStack.html","",""],["ActionDispatch::MiddlewareStack::Middleware","","classes/ActionDispatch/MiddlewareStack/Middleware.html","",""],["ActionDispatch::ParamsParser","","classes/ActionDispatch/ParamsParser.html","",""],["ActionDispatch::PerformanceTest","","classes/ActionDispatch/PerformanceTest.html","","<p>An integration test that runs a code profiler on your test methods.\nProfiling output for combinations …\n"],["ActionDispatch::PublicExceptions","","classes/ActionDispatch/PublicExceptions.html","","<p>A simple Rack application that renders exceptions in the given public path.\n"],["ActionDispatch::RailsEntityStore","","classes/ActionDispatch/RailsEntityStore.html","",""],["ActionDispatch::RailsMetaStore","","classes/ActionDispatch/RailsMetaStore.html","",""],["ActionDispatch::Railtie","","classes/ActionDispatch/Railtie.html","",""],["ActionDispatch::Reloader","","classes/ActionDispatch/Reloader.html","","<p>ActionDispatch::Reloader provides prepare and cleanup callbacks, intended\nto assist with code reloading …\n"],["ActionDispatch::RemoteIp","","classes/ActionDispatch/RemoteIp.html","",""],["ActionDispatch::RemoteIp::GetIp","","classes/ActionDispatch/RemoteIp/GetIp.html","",""],["ActionDispatch::RemoteIp::IpSpoofAttackError","","classes/ActionDispatch/RemoteIp/IpSpoofAttackError.html","",""],["ActionDispatch::Request","","classes/ActionDispatch/Request.html","",""],["ActionDispatch::RequestId","","classes/ActionDispatch/RequestId.html","","<p>Makes a unique request id available to the action_dispatch.request_id env\nvariable (which is then accessible …\n"],["ActionDispatch::Rescue","","classes/ActionDispatch/Rescue.html","",""],["ActionDispatch::Response","","classes/ActionDispatch/Response.html","","<p>Represents an HTTP response generated by a controller action. Use it to\nretrieve the current state of …\n"],["ActionDispatch::Routing","","classes/ActionDispatch/Routing.html","","<p>The routing module provides URL rewriting in native Ruby. It’s a way to\nredirect incoming requests to …\n"],["ActionDispatch::Routing::Mapper","","classes/ActionDispatch/Routing/Mapper.html","",""],["ActionDispatch::Routing::Mapper::Base","","classes/ActionDispatch/Routing/Mapper/Base.html","",""],["ActionDispatch::Routing::Mapper::HttpHelpers","","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html","",""],["ActionDispatch::Routing::Mapper::Resources","","classes/ActionDispatch/Routing/Mapper/Resources.html","","<p>Resource routing allows you to quickly declare all of the common routes for\na given resourceful controller. …\n"],["ActionDispatch::Routing::Mapper::Scoping","","classes/ActionDispatch/Routing/Mapper/Scoping.html","","<p>You may wish to organize groups of controllers under a namespace. Most\ncommonly, you might group a number …\n"],["ActionDispatch::Routing::PolymorphicRoutes","","classes/ActionDispatch/Routing/PolymorphicRoutes.html","","<p>Polymorphic URL helpers are methods for smart resolution to a named route\ncall when given an Active  …\n"],["ActionDispatch::Routing::Redirection","","classes/ActionDispatch/Routing/Redirection.html","",""],["ActionDispatch::Routing::RouteSet","","classes/ActionDispatch/Routing/RouteSet.html","",""],["ActionDispatch::Routing::RouteSet::MountedHelpers","","classes/ActionDispatch/Routing/RouteSet/MountedHelpers.html","",""],["ActionDispatch::Routing::UrlFor","","classes/ActionDispatch/Routing/UrlFor.html","","<p>In <code>config/routes.rb</code> you define URL-to-controller mappings, but\nthe reverse is also possible: an URL can …\n"],["ActionDispatch::Session","","classes/ActionDispatch/Session.html","",""],["ActionDispatch::Session::AbstractStore","","classes/ActionDispatch/Session/AbstractStore.html","",""],["ActionDispatch::Session::CacheStore","","classes/ActionDispatch/Session/CacheStore.html","","<p>Session store that uses an ActiveSupport::Cache::Store to store the\nsessions. This store is most useful …\n"],["ActionDispatch::Session::Compatibility","","classes/ActionDispatch/Session/Compatibility.html","",""],["ActionDispatch::Session::CookieStore","","classes/ActionDispatch/Session/CookieStore.html","","<p>This cookie-based session store is the Rails default. Sessions typically\ncontain at most a user_id and …\n"],["ActionDispatch::Session::DestroyableSession","","classes/ActionDispatch/Session/DestroyableSession.html","",""],["ActionDispatch::Session::MemCacheStore","","classes/ActionDispatch/Session/MemCacheStore.html","",""],["ActionDispatch::Session::StaleSessionCheck","","classes/ActionDispatch/Session/StaleSessionCheck.html","",""],["ActionDispatch::ShowExceptions","","classes/ActionDispatch/ShowExceptions.html","","<p>This middleware rescues any exception returned by the application and calls\nan exceptions app that will …\n"],["ActionDispatch::Static","","classes/ActionDispatch/Static.html","",""],["ActionDispatch::TestProcess","","classes/ActionDispatch/TestProcess.html","",""],["ActionDispatch::TestRequest","","classes/ActionDispatch/TestRequest.html","",""],["ActionDispatch::TestResponse","","classes/ActionDispatch/TestResponse.html","","<p>Integration test methods such as ActionDispatch::Integration::Session#get\nand ActionDispatch::Integration::Session#post …\n"],["ActionMailer","","classes/ActionMailer.html","",""],["ActionMailer::Base","","classes/ActionMailer/Base.html","","<p>Action Mailer allows you to send email from your application using a mailer\nmodel and views.\n<p>Mailer Models …\n"],["ActionMailer::MailHelper","","classes/ActionMailer/MailHelper.html","",""],["ActionView","","classes/ActionView.html","",""],["ActionView::Base","","classes/ActionView/Base.html","","<p>Action View Base\n<p>Action View templates can be written in several ways. If the template file\nhas a <code>.erb</code> …\n"],["ActionView::Context","","classes/ActionView/Context.html","","<p>Action View Context\n<p>Action View contexts are supplied to Action Controller to render template.\nThe default …\n"],["ActionView::FileSystemResolver","","classes/ActionView/FileSystemResolver.html","","<p>A resolver that loads files from the filesystem. It allows to set your own\nresolving pattern. Such pattern …\n"],["ActionView::FixtureResolver","","classes/ActionView/FixtureResolver.html","","<p>Use FixtureResolver in your tests to simulate the presence of files on the\nfile system. This is used …\n"],["ActionView::Helpers","","classes/ActionView/Helpers.html","","<p>Active Model Helpers\n<p>Action View Cache Helper\n<p>Action View Capture Helper\n"],["ActionView::Helpers::ActiveModelHelper","","classes/ActionView/Helpers/ActiveModelHelper.html","",""],["ActionView::Helpers::ActiveModelInstanceTag","","classes/ActionView/Helpers/ActiveModelInstanceTag.html","",""],["ActionView::Helpers::AssetPaths","","classes/ActionView/AssetPaths.html","",""],["ActionView::Helpers::AssetTagHelper","","classes/ActionView/Helpers/AssetTagHelper.html","","<p>This module provides methods for generating HTML that links views to assets\nsuch as images, javascripts, …\n"],["ActionView::Helpers::AssetTagHelper::AssetIncludeTag","","classes/ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html","",""],["ActionView::Helpers::AssetTagHelper::JavascriptIncludeTag","","classes/ActionView/Helpers/AssetTagHelper/JavascriptIncludeTag.html","",""],["ActionView::Helpers::AssetTagHelper::JavascriptTagHelpers","","classes/ActionView/Helpers/AssetTagHelper/JavascriptTagHelpers.html","",""],["ActionView::Helpers::AssetTagHelper::JavascriptTagHelpers::ClassMethods","","classes/ActionView/Helpers/AssetTagHelper/JavascriptTagHelpers/ClassMethods.html","",""],["ActionView::Helpers::AssetTagHelper::StylesheetIncludeTag","","classes/ActionView/Helpers/AssetTagHelper/StylesheetIncludeTag.html","",""],["ActionView::Helpers::AssetTagHelper::StylesheetTagHelpers","","classes/ActionView/Helpers/AssetTagHelper/StylesheetTagHelpers.html","",""],["ActionView::Helpers::AssetTagHelper::StylesheetTagHelpers::ClassMethods","","classes/ActionView/Helpers/AssetTagHelper/StylesheetTagHelpers/ClassMethods.html","",""],["ActionView::Helpers::AtomFeedHelper","","classes/ActionView/Helpers/AtomFeedHelper.html","",""],["ActionView::Helpers::AtomFeedHelper::AtomBuilder","","classes/ActionView/Helpers/AtomFeedHelper/AtomBuilder.html","",""],["ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder","","classes/ActionView/Helpers/AtomFeedHelper/AtomFeedBuilder.html","",""],["ActionView::Helpers::CacheHelper","","classes/ActionView/Helpers/CacheHelper.html","",""],["ActionView::Helpers::CaptureHelper","","classes/ActionView/Helpers/CaptureHelper.html","","<p>CaptureHelper exposes methods to let you extract generated markup which can\nbe used in other parts of …\n"],["ActionView::Helpers::CsrfHelper","","classes/ActionView/Helpers/CsrfHelper.html","",""],["ActionView::Helpers::DateHelper","","classes/ActionView/Helpers/DateHelper.html","","<p>Action View Date Helpers\n<p>The Date Helper primarily creates select/option tags for different kinds of\ndates …\n"],["ActionView::Helpers::DateHelperInstanceTag","","classes/ActionView/Helpers/DateHelperInstanceTag.html","",""],["ActionView::Helpers::DebugHelper","","classes/ActionView/Helpers/DebugHelper.html","",""],["ActionView::Helpers::FormBuilder","","classes/ActionView/Helpers/FormBuilder.html","",""],["ActionView::Helpers::FormHelper","","classes/ActionView/Helpers/FormHelper.html","","<p>Form helpers are designed to make working with resources much easier\ncompared to using vanilla HTML. …\n"],["ActionView::Helpers::FormOptionsHelper","","classes/ActionView/Helpers/FormOptionsHelper.html","","<p>Provides a number of methods for turning different kinds of containers into\na set of option tags.\n<p>Options …\n"],["ActionView::Helpers::FormTagHelper","","classes/ActionView/Helpers/FormTagHelper.html","","<p>Provides a number of methods for creating form tags that doesn’t rely on an\nActive Record object assigned …\n"],["ActionView::Helpers::InstanceTag","","classes/ActionView/Helpers/InstanceTag.html","",""],["ActionView::Helpers::JavaScriptHelper","","classes/ActionView/Helpers/JavaScriptHelper.html","",""],["ActionView::Helpers::NumberHelper","","classes/ActionView/Helpers/NumberHelper.html","","<p>Provides methods for converting numbers into formatted strings. Methods are\nprovided for phone numbers, …\n"],["ActionView::Helpers::NumberHelper::InvalidNumberError","","classes/ActionView/Helpers/NumberHelper/InvalidNumberError.html","","<p>Raised when argument <code>number</code> param given to the helpers is\ninvalid and the option :raise is set to  <code>true</code> …\n"],["ActionView::Helpers::OutputSafetyHelper","","classes/ActionView/Helpers/OutputSafetyHelper.html","",""],["ActionView::Helpers::RecordTagHelper","","classes/ActionView/Helpers/RecordTagHelper.html","",""],["ActionView::Helpers::RenderingHelper","","classes/ActionView/Helpers/RenderingHelper.html","","<p>Action View Rendering\n<p>Implements methods that allow rendering from a view context. In order to\nuse this …\n"],["ActionView::Helpers::SanitizeHelper","","classes/ActionView/Helpers/SanitizeHelper.html","","<p>The SanitizeHelper module provides a set of methods for scrubbing text of\nundesired HTML elements. These …\n"],["ActionView::Helpers::TagHelper","","classes/ActionView/Helpers/TagHelper.html","","<p>Provides methods to generate HTML tags programmatically when you can’t use\na Builder. By default, they …\n"],["ActionView::Helpers::TextHelper","","classes/ActionView/Helpers/TextHelper.html","","<p>The TextHelper module provides a set of methods for filtering, formatting\nand transforming strings, which …\n"],["ActionView::Helpers::TranslationHelper","","classes/ActionView/Helpers/TranslationHelper.html","",""],["ActionView::Helpers::UrlHelper","","classes/ActionView/Helpers/UrlHelper.html","","<p>Provides a set of methods for making links and getting URLs that depend on\nthe routing subsystem (see …\n"],["ActionView::LogSubscriber","","classes/ActionView/LogSubscriber.html","","<p>Action View Log Subscriber\n<p>Provides functionality so that Rails can output logs from Action View.\n"],["ActionView::LookupContext","","classes/ActionView/LookupContext.html","",""],["ActionView::LookupContext::DetailsCache","","classes/ActionView/LookupContext/DetailsCache.html","","<p>Add caching behavior on top of Details.\n"],["ActionView::LookupContext::ViewPaths","","classes/ActionView/LookupContext/ViewPaths.html","","<p>Helpers related to template lookup using the lookup context information.\n"],["ActionView::NullResolver","","classes/ActionView/NullResolver.html","",""],["ActionView::PartialRenderer","","classes/ActionView/PartialRenderer.html","","<p>Action View Partials\n<p>There’s also a convenience method for rendering sub templates within the\ncurrent …\n"],["ActionView::Railtie","","classes/ActionView/Railtie.html","","<p>Action View Railtie\n"],["ActionView::Renderer","","classes/ActionView/Renderer.html","","<p>This is the main entry point for rendering. It basically delegates to other\nobjects like TemplateRenderer …\n"],["ActionView::Resolver","","classes/ActionView/Resolver.html","","<p>Action View Resolver\n"],["ActionView::Resolver::Path","","classes/ActionView/Resolver/Path.html","","<p>Keeps all information about view path and builds virtual path.\n"],["ActionView::Template","","classes/ActionView/Template.html","","<p>Action View Template\n<p>Action View Template Handlers\n<p>Action View Text Template\n"],["ActionView::Template::Handlers","","classes/ActionView/Template/Handlers.html","",""],["ActionView::Template::Handlers::Builder","","classes/ActionView/Template/Handlers/Builder.html","",""],["ActionView::Template::Handlers::ERB","","classes/ActionView/Template/Handlers/ERB.html","",""],["ActionView::Template::Handlers::Erubis","","classes/ActionView/Template/Handlers/Erubis.html","",""],["ActionView::TestCase","","classes/ActionView/TestCase.html","","<p>Action View Test Case\n"],["ActionView::TestCase::Behavior","","classes/ActionView/TestCase/Behavior.html","",""],["ActionView::TestCase::Behavior::ClassMethods","","classes/ActionView/TestCase/Behavior/ClassMethods.html","",""],["ActionView::TestCase::Behavior::Locals","","classes/ActionView/TestCase/Behavior/Locals.html","",""],["ActionView::TestCase::TestController","","classes/ActionView/TestCase/TestController.html","",""],["ActiveModel","","classes/ActiveModel.html","",""],["ActiveModel::AttributeMethods","","classes/ActiveModel/AttributeMethods.html","","<p>Active Model Attribute Methods\n<p><code>ActiveModel::AttributeMethods</code> provides a way to add prefixes\nand suffixes ...\n"],["ActiveModel::AttributeMethods::ClassMethods","","classes/ActiveModel/AttributeMethods/ClassMethods.html","",""],["ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher","","classes/ActiveModel/AttributeMethods/ClassMethods/AttributeMethodMatcher.html","",""],["ActiveModel::BlockValidator","","classes/ActiveModel/BlockValidator.html","","<p><code>BlockValidator</code> is a special <code>EachValidator</code> which\nreceives a block on initialization and call this block ...\n"],["ActiveModel::Callbacks","","classes/ActiveModel/Callbacks.html","","<p>Active Model Callbacks\n<p>Provides an interface for any class to have Active Record like callbacks.\n<p>Like the …\n"],["ActiveModel::Conversion","","classes/ActiveModel/Conversion.html","","<p>Active Model Conversions\n<p>Handles default conversions: to_model, to_key, to_param, and\nto_partial_path. …\n"],["ActiveModel::Dirty","","classes/ActiveModel/Dirty.html","","<p>Active Model Dirty\n<p>Provides a way to track changes in your object in the same way as Active\nRecord does. …\n"],["ActiveModel::EachValidator","","classes/ActiveModel/EachValidator.html","","<p><code>EachValidator</code> is a validator which iterates through the\nattributes given in the options hash invoking ...\n"],["ActiveModel::Errors","","classes/ActiveModel/Errors.html","","<p>Active Model Errors\n<p>Provides a modified <code>OrderedHash</code> that you can include in your\nobject for handling error …\n"],["ActiveModel::Lint","","classes/ActiveModel/Lint.html","",""],["ActiveModel::Lint::Tests","","classes/ActiveModel/Lint/Tests.html","","<p>Active Model Lint Tests\n<p>You can test whether an object is compliant with the Active Model API by\nincluding …\n"],["ActiveModel::MassAssignmentSecurity","","classes/ActiveModel/MassAssignmentSecurity.html","","<p>Active Model Mass-Assignment Security\n"],["ActiveModel::MassAssignmentSecurity::BlackList","","classes/ActiveModel/MassAssignmentSecurity/BlackList.html","",""],["ActiveModel::MassAssignmentSecurity::ClassMethods","","classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html","","<p>Mass assignment security provides an interface for protecting attributes\nfrom end-user assignment. For …\n"],["ActiveModel::MassAssignmentSecurity::Error","","classes/ActiveModel/MassAssignmentSecurity/Error.html","",""],["ActiveModel::MassAssignmentSecurity::LoggerSanitizer","","classes/ActiveModel/MassAssignmentSecurity/LoggerSanitizer.html","",""],["ActiveModel::MassAssignmentSecurity::PermissionSet","","classes/ActiveModel/MassAssignmentSecurity/PermissionSet.html","",""],["ActiveModel::MassAssignmentSecurity::Sanitizer","","classes/ActiveModel/MassAssignmentSecurity/Sanitizer.html","",""],["ActiveModel::MassAssignmentSecurity::StrictSanitizer","","classes/ActiveModel/MassAssignmentSecurity/StrictSanitizer.html","",""],["ActiveModel::MassAssignmentSecurity::WhiteList","","classes/ActiveModel/MassAssignmentSecurity/WhiteList.html","",""],["ActiveModel::MissingAttributeError","","classes/ActiveModel/MissingAttributeError.html","",""],["ActiveModel::Name","","classes/ActiveModel/Name.html","",""],["ActiveModel::Naming","","classes/ActiveModel/Naming.html","","<p>Active Model Naming\n<p>Creates a <code>model_name</code> method on your object.\n<p>To implement, just extend ActiveModel::Naming …\n"],["ActiveModel::Observer","","classes/ActiveModel/Observer.html","","<p>Active Model Observers\n<p>Observer classes respond to life cycle callbacks to implement trigger-like\nbehavior …\n"],["ActiveModel::ObserverArray","","classes/ActiveModel/ObserverArray.html","","<p>Stores the enabled/disabled state of individual observers for a particular\nmodel class.\n"],["ActiveModel::Observing","","classes/ActiveModel/Observing.html","",""],["ActiveModel::Observing::ClassMethods","","classes/ActiveModel/Observing/ClassMethods.html","",""],["ActiveModel::SecurePassword","","classes/ActiveModel/SecurePassword.html","",""],["ActiveModel::SecurePassword::ClassMethods","","classes/ActiveModel/SecurePassword/ClassMethods.html","",""],["ActiveModel::SecurePassword::InstanceMethodsOnActivation","","classes/ActiveModel/SecurePassword/InstanceMethodsOnActivation.html","",""],["ActiveModel::Serialization","","classes/ActiveModel/Serialization.html","","<p>Active Model Serialization\n<p>Provides a basic serialization to a serializable_hash for your object.\n<p>A minimal …\n"],["ActiveModel::Serializers","","classes/ActiveModel/Serializers.html","",""],["ActiveModel::Serializers::JSON","","classes/ActiveModel/Serializers/JSON.html","","<p>Active Model JSON Serializer\n"],["ActiveModel::Serializers::Xml","","classes/ActiveModel/Serializers/Xml.html","","<p>Active Model XML Serializer\n"],["ActiveModel::StrictValidationFailed","","classes/ActiveModel/StrictValidationFailed.html","",""],["ActiveModel::Translation","","classes/ActiveModel/Translation.html","","<p>Active Model Translation\n<p>Provides integration between your object and the Rails internationalization\n(i18n) …\n"],["ActiveModel::Validations","","classes/ActiveModel/Validations.html","","<p>Active Model Validations\n<p>Provides a full validation framework to your objects.\n<p>A minimal implementation …\n"],["ActiveModel::Validations::AcceptanceValidator","","classes/ActiveModel/Validations/AcceptanceValidator.html","",""],["ActiveModel::Validations::Callbacks","","classes/ActiveModel/Validations/Callbacks.html","",""],["ActiveModel::Validations::Callbacks::ClassMethods","","classes/ActiveModel/Validations/Callbacks/ClassMethods.html","",""],["ActiveModel::Validations::ClassMethods","","classes/ActiveModel/Validations/ClassMethods.html","",""],["ActiveModel::Validations::ConfirmationValidator","","classes/ActiveModel/Validations/ConfirmationValidator.html","",""],["ActiveModel::Validations::ExclusionValidator","","classes/ActiveModel/Validations/ExclusionValidator.html","",""],["ActiveModel::Validations::FormatValidator","","classes/ActiveModel/Validations/FormatValidator.html","",""],["ActiveModel::Validations::HelperMethods","","classes/ActiveModel/Validations/HelperMethods.html","",""],["ActiveModel::Validations::InclusionValidator","","classes/ActiveModel/Validations/InclusionValidator.html","",""],["ActiveModel::Validations::LengthValidator","","classes/ActiveModel/Validations/LengthValidator.html","",""],["ActiveModel::Validations::NumericalityValidator","","classes/ActiveModel/Validations/NumericalityValidator.html","",""],["ActiveModel::Validations::PresenceValidator","","classes/ActiveModel/Validations/PresenceValidator.html","",""],["ActiveModel::Validations::WithValidator","","classes/ActiveModel/Validations/WithValidator.html","",""],["ActiveModel::Validator","","classes/ActiveModel/Validator.html","","<p>Active Model Validator\n<p>A simple base class that can be used along with\nActiveModel::Validations::ClassMethods.validates_with …\n"],["ActiveRecord","","classes/ActiveRecord.html","",""],["ActiveRecord::ActiveRecordError","","classes/ActiveRecord/ActiveRecordError.html","","<p>Active Record Errors\n<p>Generic Active Record exception class.\n"],["ActiveRecord::AdapterNotFound","","classes/ActiveRecord/AdapterNotFound.html","","<p>Raised when Active Record cannot find database adapter specified in\n<code>config/database.yml</code> or programmatically. …\n"],["ActiveRecord::AdapterNotSpecified","","classes/ActiveRecord/AdapterNotSpecified.html","","<p>Raised when adapter not specified on connection (or configuration file\n<code>config/database.yml</code> misses adapter …\n"],["ActiveRecord::Aggregations","","classes/ActiveRecord/Aggregations.html","",""],["ActiveRecord::Aggregations::ClassMethods","","classes/ActiveRecord/Aggregations/ClassMethods.html","","<p>Active Record implements aggregation through a macro-like class method\ncalled <code>composed_of</code> for representing …\n"],["ActiveRecord::AssociationTypeMismatch","","classes/ActiveRecord/AssociationTypeMismatch.html","","<p>Raised when an object assigned to an association has an incorrect type.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Ticket</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActiveRecord::Associations","","classes/ActiveRecord/Associations.html","","<p>Active Record Belongs To Associations\n<p>Active Record Belongs To Polymorphic Association\n<p>Active Record Has …\n"],["ActiveRecord::Associations::ClassMethods","","classes/ActiveRecord/Associations/ClassMethods.html","","<p>Associations are a set of macro-like class methods for tying objects\ntogether through foreign keys.  …\n"],["ActiveRecord::AttributeAssignment","","classes/ActiveRecord/AttributeAssignment.html","",""],["ActiveRecord::AttributeAssignment::ClassMethods","","classes/ActiveRecord/AttributeAssignment/ClassMethods.html","",""],["ActiveRecord::AttributeAssignmentError","","classes/ActiveRecord/AttributeAssignmentError.html","","<p>Raised when an error occurred while doing a mass assignment to an attribute\nthrough the <code>attributes=</code> method. …\n"],["ActiveRecord::AttributeMethods","","classes/ActiveRecord/AttributeMethods.html","",""],["ActiveRecord::AttributeMethods::BeforeTypeCast","","classes/ActiveRecord/AttributeMethods/BeforeTypeCast.html","",""],["ActiveRecord::AttributeMethods::ClassMethods","","classes/ActiveRecord/AttributeMethods/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::DeprecatedUnderscoreRead","","classes/ActiveRecord/AttributeMethods/DeprecatedUnderscoreRead.html","",""],["ActiveRecord::AttributeMethods::DeprecatedUnderscoreRead::ClassMethods","","classes/ActiveRecord/AttributeMethods/DeprecatedUnderscoreRead/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Dirty","","classes/ActiveRecord/AttributeMethods/Dirty.html","",""],["ActiveRecord::AttributeMethods::PrimaryKey","","classes/ActiveRecord/AttributeMethods/PrimaryKey.html","",""],["ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Query","","classes/ActiveRecord/AttributeMethods/Query.html","",""],["ActiveRecord::AttributeMethods::Read","","classes/ActiveRecord/AttributeMethods/Read.html","",""],["ActiveRecord::AttributeMethods::Read::ClassMethods","","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Serialization","","classes/ActiveRecord/AttributeMethods/Serialization.html","",""],["ActiveRecord::AttributeMethods::Serialization::Attribute","","classes/ActiveRecord/AttributeMethods/Serialization/Attribute.html","",""],["ActiveRecord::AttributeMethods::Serialization::ClassMethods","","classes/ActiveRecord/AttributeMethods/Serialization/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::TimeZoneConversion","","classes/ActiveRecord/AttributeMethods/TimeZoneConversion.html","",""],["ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","","classes/ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Write","","classes/ActiveRecord/AttributeMethods/Write.html","",""],["ActiveRecord::AttributeMethods::Write::ClassMethods","","classes/ActiveRecord/AttributeMethods/Write/ClassMethods.html","",""],["ActiveRecord::AutosaveAssociation","","classes/ActiveRecord/AutosaveAssociation.html","","<p>Active Record Autosave Association\n<p><code>AutosaveAssociation</code> is a module that takes care of\nautomatically saving ...\n"],["ActiveRecord::AutosaveAssociation::ClassMethods","","classes/ActiveRecord/AutosaveAssociation/ClassMethods.html","",""],["ActiveRecord::Base","","classes/ActiveRecord/Base.html","","<p>Active Record\n<p>Active Record objects don’t specify their attributes directly, but rather\ninfer them from …\n"],["ActiveRecord::Batches","","classes/ActiveRecord/Batches.html","",""],["ActiveRecord::Calculations","","classes/ActiveRecord/Calculations.html","",""],["ActiveRecord::Callbacks","","classes/ActiveRecord/Callbacks.html","","<p>Active Record Callbacks\n<p>Callbacks are hooks into the life cycle of an Active Record object that\nallow …\n"],["ActiveRecord::Coders","","classes/ActiveRecord/Coders.html","",""],["ActiveRecord::Coders::YAMLColumn","","classes/ActiveRecord/Coders/YAMLColumn.html","",""],["ActiveRecord::ConfigurationError","","classes/ActiveRecord/ConfigurationError.html","","<p>Raised when association is being configured improperly or user tries to use\noffset and limit together …\n"],["ActiveRecord::ConnectionAdapters","","classes/ActiveRecord/ConnectionAdapters.html","",""],["ActiveRecord::ConnectionAdapters::AbstractAdapter","","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html","","<p>Active Record supports multiple database systems. AbstractAdapter and\nrelated classes form the abstraction …\n"],["ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html","",""],["ActiveRecord::ConnectionAdapters::Column","","classes/ActiveRecord/ConnectionAdapters/Column.html","",""],["ActiveRecord::ConnectionAdapters::Column::Format","","classes/ActiveRecord/ConnectionAdapters/Column/Format.html","",""],["ActiveRecord::ConnectionAdapters::ConnectionHandler","","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html","","<p>ConnectionHandler is a collection of ConnectionPool objects. It is used for\nkeeping separate connection …\n"],["ActiveRecord::ConnectionAdapters::ConnectionManagement","","classes/ActiveRecord/ConnectionAdapters/ConnectionManagement.html","",""],["ActiveRecord::ConnectionAdapters::ConnectionPool","","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html","","<p>Connection pool base class for managing Active Record database connections.\n<p>Introduction\n<p>A connection pool …\n"],["ActiveRecord::ConnectionAdapters::DatabaseLimits","","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html","",""],["ActiveRecord::ConnectionAdapters::DatabaseStatements","","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html","",""],["ActiveRecord::ConnectionAdapters::Mysql2Adapter","","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html","","<p>The MySQL adapter will work with both Ruby/MySQL, which is a Ruby-based\nMySQL adapter that comes bundled …\n"],["ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html","","<p>The PostgreSQL adapter works both with the native C\n(ruby.scripting.ca/postgres/) and the pure Ruby (available …\n"],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::TableDefinition","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/TableDefinition.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Utils","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Utils.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLColumn","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html","",""],["ActiveRecord::ConnectionAdapters::QueryCache","","classes/ActiveRecord/ConnectionAdapters/QueryCache.html","",""],["ActiveRecord::ConnectionAdapters::Quoting","","classes/ActiveRecord/ConnectionAdapters/Quoting.html","",""],["ActiveRecord::ConnectionAdapters::SQLiteAdapter","","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html","","<p>The SQLite adapter works with both the 2.x and 3.x series of SQLite with\nthe sqlite-ruby drivers (available …\n"],["ActiveRecord::ConnectionAdapters::SQLiteAdapter::ExplainPrettyPrinter","","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter/ExplainPrettyPrinter.html","",""],["ActiveRecord::ConnectionAdapters::SQLiteAdapter::StatementPool","","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::SQLiteAdapter::Version","","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter/Version.html","",""],["ActiveRecord::ConnectionAdapters::SchemaCache","","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html","",""],["ActiveRecord::ConnectionAdapters::SchemaStatements","","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html","",""],["ActiveRecord::ConnectionAdapters::StatementPool","","classes/ActiveRecord/ConnectionAdapters/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::Table","","classes/ActiveRecord/ConnectionAdapters/Table.html","","<p>Represents an SQL table in an abstract way for updating a table. Also see\nTableDefinition and SchemaStatements#create_table …\n"],["ActiveRecord::ConnectionAdapters::TableDefinition","","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html","","<p>Represents the schema of an SQL table in an abstract way. This class\nprovides methods for manipulating …\n"],["ActiveRecord::ConnectionNotEstablished","","classes/ActiveRecord/ConnectionNotEstablished.html","","<p>Raised when connection to the database could not been established (for\nexample when <code>connection=</code> is given …\n"],["ActiveRecord::ConnectionTimeoutError","","classes/ActiveRecord/ConnectionTimeoutError.html","","<p>Raised when a connection could not be obtained within the connection\nacquisition timeout period.\n"],["ActiveRecord::CounterCache","","classes/ActiveRecord/CounterCache.html","","<p>Active Record Counter Cache\n"],["ActiveRecord::DangerousAttributeError","","classes/ActiveRecord/DangerousAttributeError.html","","<p>Raised when attribute has a name reserved by Active Record (when attribute\nhas name of one of Active …\n"],["ActiveRecord::Delegation","","classes/ActiveRecord/Delegation.html","",""],["ActiveRecord::DynamicFinderMatch","","classes/ActiveRecord/DynamicFinderMatch.html","","<p>Active Record Dynamic Finder Match\n<p>Refer to ActiveRecord::Base documentation for Dynamic attribute-based …\n"],["ActiveRecord::DynamicMatchers","","classes/ActiveRecord/DynamicMatchers.html","",""],["ActiveRecord::DynamicScopeMatch","","classes/ActiveRecord/DynamicScopeMatch.html","","<p>Active Record Dynamic Scope Match\n<p>Provides dynamic attribute-based scopes such as\n<code>scoped_by_price(4.99</code> …\n"],["ActiveRecord::Explain","","classes/ActiveRecord/Explain.html","",""],["ActiveRecord::FinderMethods","","classes/ActiveRecord/FinderMethods.html","",""],["ActiveRecord::Fixtures","","classes/ActiveRecord/Fixtures.html","","<p>Fixtures are a way of organizing data that you want to test against; in\nshort, sample data.\n<p>They are stored …\n"],["ActiveRecord::Fixtures::File","","classes/ActiveRecord/Fixtures/File.html","",""],["ActiveRecord::IdentityMap","","classes/ActiveRecord/IdentityMap.html","","<p>Active Record Identity Map\n<p>Ensures that each object gets loaded only once by keeping every loaded\nobject …\n"],["ActiveRecord::IdentityMap::Middleware","","classes/ActiveRecord/IdentityMap/Middleware.html","",""],["ActiveRecord::Inheritance","","classes/ActiveRecord/Inheritance.html","",""],["ActiveRecord::Inheritance::ClassMethods","","classes/ActiveRecord/Inheritance/ClassMethods.html","",""],["ActiveRecord::Integration","","classes/ActiveRecord/Integration.html","",""],["ActiveRecord::InvalidForeignKey","","classes/ActiveRecord/InvalidForeignKey.html","","<p>Raised when a record cannot be inserted or updated because it references a\nnon-existent record.\n"],["ActiveRecord::IrreversibleMigration","","classes/ActiveRecord/IrreversibleMigration.html","","<p>Exception that can be raised to stop migrations from going backwards.\n"],["ActiveRecord::Locking","","classes/ActiveRecord/Locking.html","",""],["ActiveRecord::Locking::Optimistic","","classes/ActiveRecord/Locking/Optimistic.html","","<p>What is Optimistic Locking\n<p>Optimistic locking allows multiple users to access the same record for\nedits, …\n"],["ActiveRecord::Locking::Optimistic::ClassMethods","","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html","",""],["ActiveRecord::Locking::Pessimistic","","classes/ActiveRecord/Locking/Pessimistic.html","","<p>Locking::Pessimistic provides support for row-level locking using SELECT …\nFOR UPDATE and other lock …\n"],["ActiveRecord::LogSubscriber","","classes/ActiveRecord/LogSubscriber.html","",""],["ActiveRecord::Migration","","classes/ActiveRecord/Migration.html","","<p>Active Record Migrations\n<p>Migrations can manage the evolution of a schema used by several physical\ndatabases. …\n"],["ActiveRecord::Migration::CommandRecorder","","classes/ActiveRecord/Migration/CommandRecorder.html","","<p><code>ActiveRecord::Migration::CommandRecorder</code> records commands done\nduring a migration and knows how to reverse ...\n"],["ActiveRecord::MigrationProxy","","classes/ActiveRecord/MigrationProxy.html","","<p>MigrationProxy is used to defer loading of the actual migration classes\nuntil they are needed\n"],["ActiveRecord::ModelSchema","","classes/ActiveRecord/ModelSchema.html","",""],["ActiveRecord::ModelSchema::ClassMethods","","classes/ActiveRecord/ModelSchema/ClassMethods.html","",""],["ActiveRecord::MultiparameterAssignmentErrors","","classes/ActiveRecord/MultiparameterAssignmentErrors.html","","<p>Raised when there are multiple errors while doing a mass assignment through\nthe <code>attributes</code> method. The …\n"],["ActiveRecord::NestedAttributes","","classes/ActiveRecord/NestedAttributes.html","",""],["ActiveRecord::NestedAttributes::ClassMethods","","classes/ActiveRecord/NestedAttributes/ClassMethods.html","","<p>Active Record Nested Attributes\n<p>Nested attributes allow you to save attributes on associated records\nthrough …\n"],["ActiveRecord::NestedAttributes::TooManyRecords","","classes/ActiveRecord/NestedAttributes/TooManyRecords.html","",""],["ActiveRecord::Observer","","classes/ActiveRecord/Observer.html","","<p>Active Record Observer\n<p>Observer classes respond to life cycle callbacks to implement trigger-like\nbehavior …\n"],["ActiveRecord::Persistence","","classes/ActiveRecord/Persistence.html","","<p>Active Record Persistence\n"],["ActiveRecord::Persistence::ClassMethods","","classes/ActiveRecord/Persistence/ClassMethods.html","",""],["ActiveRecord::PreparedStatementInvalid","","classes/ActiveRecord/PreparedStatementInvalid.html","","<p>Raised when number of bind variables in statement given to\n<code>:condition</code> key (for example, when using <code>find</code> …\n"],["ActiveRecord::QueryCache","","classes/ActiveRecord/QueryCache.html","","<p>Active Record Query Cache\n"],["ActiveRecord::QueryCache::ClassMethods","","classes/ActiveRecord/QueryCache/ClassMethods.html","",""],["ActiveRecord::QueryMethods","","classes/ActiveRecord/QueryMethods.html","",""],["ActiveRecord::Querying","","classes/ActiveRecord/Querying.html","",""],["ActiveRecord::Railtie","","classes/ActiveRecord/Railtie.html","","<p>Active Record Railtie\n"],["ActiveRecord::Railties","","classes/ActiveRecord/Railties.html","",""],["ActiveRecord::Railties::ControllerRuntime","","classes/ActiveRecord/Railties/ControllerRuntime.html","",""],["ActiveRecord::Railties::ControllerRuntime::ClassMethods","","classes/ActiveRecord/Railties/ControllerRuntime/ClassMethods.html","",""],["ActiveRecord::ReadOnlyRecord","","classes/ActiveRecord/ReadOnlyRecord.html","","<p>Raised on attempt to update record that is instantiated as read only.\n"],["ActiveRecord::ReadonlyAttributes","","classes/ActiveRecord/ReadonlyAttributes.html","",""],["ActiveRecord::ReadonlyAttributes::ClassMethods","","classes/ActiveRecord/ReadonlyAttributes/ClassMethods.html","",""],["ActiveRecord::RecordInvalid","","classes/ActiveRecord/RecordInvalid.html","","<p>Active Record RecordInvalid\n<p>Raised by <code>save!</code> and <code>create!</code> when the record is\ninvalid. Use the <code>record</code> method …\n"],["ActiveRecord::RecordNotFound","","classes/ActiveRecord/RecordNotFound.html","","<p>Raised when Active Record cannot find record by given id or set of ids.\n"],["ActiveRecord::RecordNotSaved","","classes/ActiveRecord/RecordNotSaved.html","","<p>Raised by ActiveRecord::Base.save! and ActiveRecord::Base.create! methods\nwhen record cannot be saved …\n"],["ActiveRecord::RecordNotUnique","","classes/ActiveRecord/RecordNotUnique.html","","<p>Raised when a record cannot be inserted because it would violate a\nuniqueness constraint.\n"],["ActiveRecord::Reflection","","classes/ActiveRecord/Reflection.html","",""],["ActiveRecord::Reflection::ClassMethods","","classes/ActiveRecord/Reflection/ClassMethods.html","","<p>Reflection enables to interrogate Active Record classes and objects about\ntheir associations and aggregations. …\n"],["ActiveRecord::Reflection::MacroReflection","","classes/ActiveRecord/Reflection/MacroReflection.html","","<p>Abstract base class for AggregateReflection and AssociationReflection.\nObjects of AggregateReflection …\n"],["ActiveRecord::Relation","","classes/ActiveRecord/Relation.html","","<p>Active Record Relation\n"],["ActiveRecord::Result","","classes/ActiveRecord/Result.html","","<p>This class encapsulates a Result returned from calling\n<code>exec_query</code> on any database connection adapter. …\n"],["ActiveRecord::Rollback","","classes/ActiveRecord/Rollback.html","","<p>ActiveRecord::Transactions::ClassMethods.transaction uses this exception to\ndistinguish a deliberate …\n"],["ActiveRecord::Sanitization","","classes/ActiveRecord/Sanitization.html","",""],["ActiveRecord::Sanitization::ClassMethods","","classes/ActiveRecord/Sanitization/ClassMethods.html","",""],["ActiveRecord::Schema","","classes/ActiveRecord/Schema.html","","<p>Active Record Schema\n<p>Allows programmers to programmatically define a schema in a portable DSL.\nThis means …\n"],["ActiveRecord::Scoping","","classes/ActiveRecord/Scoping.html","","<p>Active Record Named Scopes\n"],["ActiveRecord::Scoping::ClassMethods","","classes/ActiveRecord/Scoping/ClassMethods.html","",""],["ActiveRecord::Scoping::Default","","classes/ActiveRecord/Scoping/Default.html","",""],["ActiveRecord::Scoping::Default::ClassMethods","","classes/ActiveRecord/Scoping/Default/ClassMethods.html","",""],["ActiveRecord::Scoping::Named","","classes/ActiveRecord/Scoping/Named.html","",""],["ActiveRecord::Scoping::Named::ClassMethods","","classes/ActiveRecord/Scoping/Named/ClassMethods.html","",""],["ActiveRecord::Serialization","","classes/ActiveRecord/Serialization.html","","<p>Active Record Serialization\n"],["ActiveRecord::SerializationTypeMismatch","","classes/ActiveRecord/SerializationTypeMismatch.html","","<p>Raised when unserialized object’s type mismatches one specified for\nserializable field.\n"],["ActiveRecord::SessionStore","","classes/ActiveRecord/SessionStore.html","","<p>Active Record Session Store\n<p>A session store backed by an Active Record class. A default class is\nprovided, …\n"],["ActiveRecord::SessionStore::Session","","classes/ActiveRecord/SessionStore/Session.html","","<p>The default Active Record class.\n"],["ActiveRecord::SessionStore::SqlBypass","","classes/ActiveRecord/SessionStore/SqlBypass.html","","<p>A barebones session store which duck-types with the default session store\nbut bypasses Active Record …\n"],["ActiveRecord::SpawnMethods","","classes/ActiveRecord/SpawnMethods.html","",""],["ActiveRecord::StaleObjectError","","classes/ActiveRecord/StaleObjectError.html","","<p>Raised on attempt to save stale record. Record is stale when it’s being\nsaved in another query after …\n"],["ActiveRecord::StatementInvalid","","classes/ActiveRecord/StatementInvalid.html","","<p>Raised when SQL statement cannot be executed by the database (for example,\nit’s often the case for MySQL …\n"],["ActiveRecord::Store","","classes/ActiveRecord/Store.html","","<p>Store gives you a thin wrapper around serialize for the purpose of storing\nhashes in a single column. …\n"],["ActiveRecord::Store::ClassMethods","","classes/ActiveRecord/Store/ClassMethods.html","",""],["ActiveRecord::TestFixtures","","classes/ActiveRecord/TestFixtures.html","",""],["ActiveRecord::TestFixtures::ClassMethods","","classes/ActiveRecord/TestFixtures/ClassMethods.html","",""],["ActiveRecord::ThrowResult","","classes/ActiveRecord/ThrowResult.html","","<p>Raised when SQL statement is invalid and the application gets a blank\nresult.\n"],["ActiveRecord::Timestamp","","classes/ActiveRecord/Timestamp.html","","<p>Active Record Timestamp\n<p>Active Record automatically timestamps create and update operations if the\ntable …\n"],["ActiveRecord::Transactions","","classes/ActiveRecord/Transactions.html","","<p>See ActiveRecord::Transactions::ClassMethods for documentation.\n"],["ActiveRecord::Transactions::ClassMethods","","classes/ActiveRecord/Transactions/ClassMethods.html","","<p>Active Record Transactions\n<p>Transactions are protective blocks where SQL statements are only permanent\n…\n"],["ActiveRecord::Translation","","classes/ActiveRecord/Translation.html","",""],["ActiveRecord::UnknownAttributeError","","classes/ActiveRecord/UnknownAttributeError.html","","<p>Raised when unknown attributes are supplied via mass assignment.\n"],["ActiveRecord::UnknownPrimaryKey","","classes/ActiveRecord/UnknownPrimaryKey.html","","<p>Raised when a primary key is needed, but there is not one specified in the\nschema or model.\n"],["ActiveRecord::Validations","","classes/ActiveRecord/Validations.html","","<p>Active Record Validations\n<p>Active Record includes the majority of its validations from\n<code>ActiveModel::Validations</code> …\n"],["ActiveRecord::Validations::AssociatedValidator","","classes/ActiveRecord/Validations/AssociatedValidator.html","",""],["ActiveRecord::Validations::ClassMethods","","classes/ActiveRecord/Validations/ClassMethods.html","",""],["ActiveRecord::Validations::UniquenessValidator","","classes/ActiveRecord/Validations/UniquenessValidator.html","",""],["ActiveRecord::WrappedDatabaseException","","classes/ActiveRecord/WrappedDatabaseException.html","","<p>Parent class for all specific exceptions which wrap database driver\nexceptions provides access to the …\n"],["ActiveResource","","classes/ActiveResource.html","",""],["ActiveResource::Base","","classes/ActiveResource/Base.html","","<p>ActiveResource::Base is the main class for mapping RESTful resources as\nmodels in a Rails application. …\n"],["ActiveResource::Connection","","classes/ActiveResource/Connection.html","","<p>Class to handle connections to remote web services. This class is used by\nActiveResource::Base to interface …\n"],["ActiveResource::CustomMethods","","classes/ActiveResource/CustomMethods.html","","<p>A module to support custom REST methods and sub-resources, allowing you to\nbreak out of the “default” …\n"],["ActiveResource::CustomMethods::ClassMethods","","classes/ActiveResource/CustomMethods/ClassMethods.html","",""],["ActiveResource::Errors","","classes/ActiveResource/Errors.html","","<p>Active Resource validation is reported to and from this object, which is\nused by Base#save to determine …\n"],["ActiveResource::Formats","","classes/ActiveResource/Formats.html","",""],["ActiveResource::Formats::JsonFormat","","classes/ActiveResource/Formats/JsonFormat.html","",""],["ActiveResource::Formats::XmlFormat","","classes/ActiveResource/Formats/XmlFormat.html","",""],["ActiveResource::HttpMock","","classes/ActiveResource/HttpMock.html","","<p>One thing that has always been a pain with remote web services is testing. \nThe HttpMock class makes …\n"],["ActiveResource::InvalidRequestError","","classes/ActiveResource/InvalidRequestError.html","",""],["ActiveResource::LogSubscriber","","classes/ActiveResource/LogSubscriber.html","",""],["ActiveResource::Observing","","classes/ActiveResource/Observing.html","",""],["ActiveResource::Railtie","","classes/ActiveResource/Railtie.html","",""],["ActiveResource::Request","","classes/ActiveResource/Request.html","",""],["ActiveResource::Response","","classes/ActiveResource/Response.html","",""],["ActiveResource::SSLError","","classes/ActiveResource/SSLError.html","","<p>Raised when a OpenSSL::SSL::SSLError occurs.\n"],["ActiveResource::TimeoutError","","classes/ActiveResource/TimeoutError.html","","<p>Raised when a Timeout::Error occurs.\n"],["ActiveResource::Validations","","classes/ActiveResource/Validations.html","","<p>Module to support validation and errors with Active Resource objects. The\nmodule overrides Base#save …\n"],["ActiveSupport","","classes/ActiveSupport.html","","<p>This class has dubious semantics and we only have it so that people can\nwrite <code>params[:key]</code> instead of …\n"],["ActiveSupport::Autoload","","classes/ActiveSupport/Autoload.html","",""],["ActiveSupport::BacktraceCleaner","","classes/ActiveSupport/BacktraceCleaner.html","","<p>Backtraces often include many lines that are not relevant for the context\nunder review. This makes it …\n"],["ActiveSupport::Base64","","classes/ActiveSupport/Base64.html","",""],["ActiveSupport::BasicObject","","classes/ActiveSupport/BasicObject.html","","<p>A class with no predefined methods that behaves similarly to Builder’s\nBlankSlate. Used for proxy classes. …\n"],["ActiveSupport::Benchmarkable","","classes/ActiveSupport/Benchmarkable.html","",""],["ActiveSupport::BufferedLogger","","classes/ActiveSupport/BufferedLogger.html","","<p>Inspired by the buffered logger idea by Ezra\n"],["ActiveSupport::BufferedLogger::Severity","","classes/ActiveSupport/BufferedLogger/Severity.html","",""],["ActiveSupport::Cache","","classes/ActiveSupport/Cache.html","","<p>See ActiveSupport::Cache::Store for documentation.\n"],["ActiveSupport::Cache::Entry","","classes/ActiveSupport/Cache/Entry.html","","<p>Entry that is put into caches. It supports expiration time on entries and\ncan compress values to save …\n"],["ActiveSupport::Cache::FileStore","","classes/ActiveSupport/Cache/FileStore.html","","<p>A cache store implementation which stores everything on the filesystem.\n<p>FileStore implements the Strategy::LocalCache …\n"],["ActiveSupport::Cache::MemCacheStore","","classes/ActiveSupport/Cache/MemCacheStore.html","","<p>A cache store implementation which stores data in Memcached: memcached.org/\n<p>This is currently the most …\n"],["ActiveSupport::Cache::MemoryStore","","classes/ActiveSupport/Cache/MemoryStore.html","","<p>A cache store implementation which stores everything into memory in the\nsame process. If you’re running …\n"],["ActiveSupport::Cache::NullStore","","classes/ActiveSupport/Cache/NullStore.html","","<p>A cache store implementation which doesn’t actually store anything. Useful\nin development and test environments …\n"],["ActiveSupport::Cache::Store","","classes/ActiveSupport/Cache/Store.html","","<p>An abstract cache store class. There are multiple cache store\nimplementations, each having its own additional …\n"],["ActiveSupport::Cache::Strategy","","classes/ActiveSupport/Cache/Strategy.html","",""],["ActiveSupport::Cache::Strategy::LocalCache","","classes/ActiveSupport/Cache/Strategy/LocalCache.html","","<p>Caches that implement LocalCache will be backed by an in-memory cache for\nthe duration of a block. Repeated …\n"],["ActiveSupport::Cache::Strategy::LocalCache::LocalStore","","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html","","<p>Simple memory backed cache. This cache is not thread safe and is intended\nonly for serving as a temporary …\n"],["ActiveSupport::Callbacks","","classes/ActiveSupport/Callbacks.html","","<p>Callbacks are code hooks that are run at key points in an object’s\nlifecycle. The typical use case is …\n"],["ActiveSupport::Callbacks::ClassMethods","","classes/ActiveSupport/Callbacks/ClassMethods.html","",""],["ActiveSupport::Concern","","classes/ActiveSupport/Concern.html","","<p>A typical module looks like this:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">M</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">included</span>(<span class=\"ruby-identifier\">base</span>)\n    <span class=\"ruby-identifier\">base</span>.<span class=\"ruby-identifier\">extend</span> <span class=\"ruby-constant\">ClassMethods</span>\n    <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActiveSupport::Configurable","","classes/ActiveSupport/Configurable.html","","<p>Configurable provides a <code>config</code> method to store and retrieve\nconfiguration options as an <code>OrderedHash</code>. …\n"],["ActiveSupport::Configurable::ClassMethods","","classes/ActiveSupport/Configurable/ClassMethods.html","",""],["ActiveSupport::Configurable::Configuration","","classes/ActiveSupport/Configurable/Configuration.html","",""],["ActiveSupport::Dependencies","","classes/ActiveSupport/Dependencies.html","",""],["ActiveSupport::Dependencies::ClassCache","","classes/ActiveSupport/Dependencies/ClassCache.html","",""],["ActiveSupport::Dependencies::WatchStack","","classes/ActiveSupport/Dependencies/WatchStack.html","","<p>The WatchStack keeps a stack of the modules being watched as files are\nloaded. If a file in the process …\n"],["ActiveSupport::Deprecation","","classes/ActiveSupport/Deprecation.html","",""],["ActiveSupport::DescendantsTracker","","classes/ActiveSupport/DescendantsTracker.html","","<p>This module provides an internal implementation to track descendants which\nis faster than iterating through …\n"],["ActiveSupport::Duration","","classes/ActiveSupport/Duration.html","","<p>Provides accurate date and time measurements using Date#advance and\nTime#advance, respectively. It mainly …\n"],["ActiveSupport::FileUpdateChecker","","classes/ActiveSupport/FileUpdateChecker.html","","<p>FileUpdateChecker specifies the API used by Rails to watch files and\ncontrol reloading. The API depends …\n"],["ActiveSupport::FileWatcher","","classes/ActiveSupport/FileWatcher.html","",""],["ActiveSupport::FileWatcher::Backend","","classes/ActiveSupport/FileWatcher/Backend.html","",""],["ActiveSupport::Gzip","","classes/ActiveSupport/Gzip.html","","<p>A convenient wrapper for the zlib standard library that allows\ncompression/decompression of strings with …\n"],["ActiveSupport::Gzip::Stream","","classes/ActiveSupport/Gzip/Stream.html","",""],["ActiveSupport::HashWithIndifferentAccess","","classes/ActiveSupport/HashWithIndifferentAccess.html","",""],["ActiveSupport::Inflector","","classes/ActiveSupport/Inflector.html","","<p>The Inflector transforms words from singular to plural, class names to\ntable names, modularized class …\n"],["ActiveSupport::Inflector::Inflections","","classes/ActiveSupport/Inflector/Inflections.html","","<p>A singleton instance of this class is yielded by Inflector.inflections,\nwhich can then be used to specify …\n"],["ActiveSupport::InheritableOptions","","classes/ActiveSupport/InheritableOptions.html","",""],["ActiveSupport::JSON","","classes/ActiveSupport/JSON.html","",""],["ActiveSupport::JSON::Encoding","","classes/ActiveSupport/JSON/Encoding.html","",""],["ActiveSupport::JSON::Encoding::CircularReferenceError","","classes/ActiveSupport/JSON/Encoding/CircularReferenceError.html","",""],["ActiveSupport::JSON::Encoding::Encoder","","classes/ActiveSupport/JSON/Encoding/Encoder.html","",""],["ActiveSupport::JSON::Variable","","classes/ActiveSupport/JSON/Variable.html","","<p>A string that returns itself as its JSON-encoded form.\n"],["ActiveSupport::LogSubscriber","","classes/ActiveSupport/LogSubscriber.html","","<p>ActiveSupport::LogSubscriber is an object set to consume\nActiveSupport::Notifications with the sole purpose …\n"],["ActiveSupport::LogSubscriber::TestHelper","","classes/ActiveSupport/LogSubscriber/TestHelper.html","","<p>Provides some helpers to deal with testing log subscribers by setting up\nnotifications. Take for instance …\n"],["ActiveSupport::LogSubscriber::TestHelper::MockLogger","","classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html","",""],["ActiveSupport::Memoizable","","classes/ActiveSupport/Memoizable.html","",""],["ActiveSupport::Memoizable::InstanceMethods","","classes/ActiveSupport/Memoizable/InstanceMethods.html","",""],["ActiveSupport::MessageEncryptor","","classes/ActiveSupport/MessageEncryptor.html","","<p>MessageEncryptor is a simple way to encrypt values which get stored\nsomewhere you don’t trust.\n<p>The cipher …\n"],["ActiveSupport::MessageEncryptor::InvalidMessage","","classes/ActiveSupport/MessageEncryptor/InvalidMessage.html","",""],["ActiveSupport::MessageVerifier","","classes/ActiveSupport/MessageVerifier.html","","<p><code>MessageVerifier</code> makes it easy to generate and verify messages\nwhich are signed to prevent tampering. ...\n"],["ActiveSupport::MessageVerifier::InvalidSignature","","classes/ActiveSupport/MessageVerifier/InvalidSignature.html","",""],["ActiveSupport::Multibyte","","classes/ActiveSupport/Multibyte.html","",""],["ActiveSupport::Multibyte::Chars","","classes/ActiveSupport/Multibyte/Chars.html","","<p>Chars enables you to work transparently with UTF-8 encoding in the Ruby\nString class without having extensive …\n"],["ActiveSupport::Multibyte::EncodingError","","classes/ActiveSupport/Multibyte/EncodingError.html","","<p>Raised when a problem with the encoding was found.\n"],["ActiveSupport::Multibyte::Unicode","","classes/ActiveSupport/Multibyte/Unicode.html","",""],["ActiveSupport::Multibyte::Unicode::Codepoint","","classes/ActiveSupport/Multibyte/Unicode/Codepoint.html","","<p>Holds data about a codepoint in the Unicode database\n"],["ActiveSupport::Multibyte::Unicode::UnicodeDatabase","","classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html","","<p>Holds static data from the Unicode database\n"],["ActiveSupport::Notifications","","classes/ActiveSupport/Notifications.html","","<p>Notifications\n<p>+ActiveSupport::Notifications+ provides an instrumentation API for Ruby.\n<p>Instrumenters\n"],["ActiveSupport::Notifications::Event","","classes/ActiveSupport/Notifications/Event.html","",""],["ActiveSupport::Notifications::Fanout","","classes/ActiveSupport/Notifications/Fanout.html","","<p>This is a default queue implementation that ships with Notifications. It\njust pushes events to all registered …\n"],["ActiveSupport::Notifications::Instrumenter","","classes/ActiveSupport/Notifications/Instrumenter.html","",""],["ActiveSupport::OrderedHash","","classes/ActiveSupport/OrderedHash.html","","<p>The order of iteration over hashes in Ruby 1.8 is undefined. For example,\nyou do not know the order in …\n"],["ActiveSupport::OrderedOptions","","classes/ActiveSupport/OrderedOptions.html","",""],["ActiveSupport::Railtie","","classes/ActiveSupport/Railtie.html","",""],["ActiveSupport::Rescuable","","classes/ActiveSupport/Rescuable.html","","<p>Rescuable module adds support for easier exception handling.\n"],["ActiveSupport::Rescuable::ClassMethods","","classes/ActiveSupport/Rescuable/ClassMethods.html","",""],["ActiveSupport::SafeBuffer","","classes/ActiveSupport/SafeBuffer.html","",""],["ActiveSupport::SafeBuffer::SafeConcatError","","classes/ActiveSupport/SafeBuffer/SafeConcatError.html","",""],["ActiveSupport::StringInquirer","","classes/ActiveSupport/StringInquirer.html","","<p>Wrapping a string in this class gives you a prettier way to test for\nequality. The value returned by …\n"],["ActiveSupport::TaggedLogging","","classes/ActiveSupport/TaggedLogging.html","","<p>Wraps any standard Logger class to provide tagging capabilities. Examples:\n\n<pre>Logger = ActiveSupport::TaggedLogging.new(Logger.new(STDOUT)) ...</pre>\n"],["ActiveSupport::TestCase","","classes/ActiveSupport/TestCase.html","",""],["ActiveSupport::Testing","","classes/ActiveSupport/Testing.html","",""],["ActiveSupport::Testing::Assertions","","classes/ActiveSupport/Testing/Assertions.html","",""],["ActiveSupport::Testing::Declarative","","classes/ActiveSupport/Testing/Declarative.html","",""],["ActiveSupport::Testing::Isolation","","classes/ActiveSupport/Testing/Isolation.html","",""],["ActiveSupport::Testing::Isolation::Forking","","classes/ActiveSupport/Testing/Isolation/Forking.html","",""],["ActiveSupport::Testing::Isolation::MiniTest","","classes/ActiveSupport/Testing/Isolation/MiniTest.html","",""],["ActiveSupport::Testing::Isolation::Subprocess","","classes/ActiveSupport/Testing/Isolation/Subprocess.html","",""],["ActiveSupport::Testing::Isolation::TestUnit","","classes/ActiveSupport/Testing/Isolation/TestUnit.html","",""],["ActiveSupport::Testing::Pending","","classes/ActiveSupport/Testing/Pending.html","",""],["ActiveSupport::Testing::Performance","","classes/ActiveSupport/Testing/Performance.html","",""],["ActiveSupport::Testing::Performance::Benchmarker","","classes/ActiveSupport/Testing/Performance/Benchmarker.html","",""],["ActiveSupport::Testing::Performance::ForClassicTestUnit","","classes/ActiveSupport/Testing/Performance/ForClassicTestUnit.html","",""],["ActiveSupport::Testing::Performance::ForMiniTest","","classes/ActiveSupport/Testing/Performance/ForMiniTest.html","",""],["ActiveSupport::Testing::Performance::Metrics","","classes/ActiveSupport/Testing/Performance/Metrics.html","",""],["ActiveSupport::Testing::Performance::Metrics::Amount","","classes/ActiveSupport/Testing/Performance/Metrics/Amount.html","",""],["ActiveSupport::Testing::Performance::Metrics::Base","","classes/ActiveSupport/Testing/Performance/Metrics/Base.html","",""],["ActiveSupport::Testing::Performance::Metrics::CpuTime","","classes/ActiveSupport/Testing/Performance/Metrics/CpuTime.html","",""],["ActiveSupport::Testing::Performance::Metrics::DigitalInformationUnit","","classes/ActiveSupport/Testing/Performance/Metrics/DigitalInformationUnit.html","",""],["ActiveSupport::Testing::Performance::Metrics::GcRuns","","classes/ActiveSupport/Testing/Performance/Metrics/GcRuns.html","",""],["ActiveSupport::Testing::Performance::Metrics::GcTime","","classes/ActiveSupport/Testing/Performance/Metrics/GcTime.html","",""],["ActiveSupport::Testing::Performance::Metrics::Memory","","classes/ActiveSupport/Testing/Performance/Metrics/Memory.html","",""],["ActiveSupport::Testing::Performance::Metrics::Objects","","classes/ActiveSupport/Testing/Performance/Metrics/Objects.html","",""],["ActiveSupport::Testing::Performance::Metrics::ProcessTime","","classes/ActiveSupport/Testing/Performance/Metrics/ProcessTime.html","",""],["ActiveSupport::Testing::Performance::Metrics::Time","","classes/ActiveSupport/Testing/Performance/Metrics/Time.html","",""],["ActiveSupport::Testing::Performance::Metrics::UserTime","","classes/ActiveSupport/Testing/Performance/Metrics/UserTime.html","",""],["ActiveSupport::Testing::Performance::Metrics::WallTime","","classes/ActiveSupport/Testing/Performance/Metrics/WallTime.html","",""],["ActiveSupport::Testing::Performance::Performer","","classes/ActiveSupport/Testing/Performance/Performer.html","",""],["ActiveSupport::Testing::Performance::Profiler","","classes/ActiveSupport/Testing/Performance/Profiler.html","","<p>overridden by each implementation\n"],["ActiveSupport::Testing::ProxyTestResult","","classes/ActiveSupport/Testing/ProxyTestResult.html","",""],["ActiveSupport::Testing::RemoteError","","classes/ActiveSupport/Testing/RemoteError.html","",""],["ActiveSupport::Testing::SetupAndTeardown","","classes/ActiveSupport/Testing/SetupAndTeardown.html","",""],["ActiveSupport::Testing::SetupAndTeardown::ClassMethods","","classes/ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html","",""],["ActiveSupport::Testing::SetupAndTeardown::ForClassicTestUnit","","classes/ActiveSupport/Testing/SetupAndTeardown/ForClassicTestUnit.html","",""],["ActiveSupport::Testing::SetupAndTeardown::ForMiniTest","","classes/ActiveSupport/Testing/SetupAndTeardown/ForMiniTest.html","",""],["ActiveSupport::TimeWithZone","","classes/ActiveSupport/TimeWithZone.html","","<p>A Time-like class that can represent a time in any time zone. Necessary\nbecause standard Ruby Time instances …\n"],["ActiveSupport::TimeZone","","classes/ActiveSupport/TimeZone.html","",""],["ActiveSupport::XmlMini","","classes/ActiveSupport/XmlMini.html","","<p>XmlMini\n<p>To use the much faster libxml parser:\n\n<pre>gem 'libxml-ruby', '=0.9.7'\nXmlMini.backend = 'LibXML'</pre>\n"],["ActiveSupport::XmlMini_LibXMLSAX","","classes/ActiveSupport/XmlMini_LibXMLSAX.html","",""],["ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html","","<p>Class that will build the hash while the XML document is being parsed using\nSAX events.\n"],["ActiveSupport::XmlMini_NokogiriSAX","","classes/ActiveSupport/XmlMini_NokogiriSAX.html","",""],["ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html","","<p>Class that will build the hash while the XML document is being parsed using\nSAX events.\n"],["ArJdbcMySQL","","classes/ArJdbcMySQL.html","",""],["ArJdbcMySQL::Error","","classes/ArJdbcMySQL/Error.html","",""],["Array","","classes/Array.html","",""],["Base64","","classes/Base64.html","","<p>The Base64 module isn’t available in earlier versions of Ruby 1.9.\n"],["Benchmark","","classes/Benchmark.html","",""],["BigDecimal","","classes/BigDecimal.html","",""],["Class","","classes/Class.html","","<p>Extends the class object with class and instance accessors for class\nattributes, just like the native …\n"],["Css","","classes/Css.html","",""],["Css::Generators","","classes/Css/Generators.html","",""],["Css::Generators::AssetsGenerator","","classes/Css/Generators/AssetsGenerator.html","",""],["Css::Generators::ScaffoldGenerator","","classes/Css/Generators/ScaffoldGenerator.html","",""],["Date","","classes/Date.html","",""],["DateTime","","classes/DateTime.html","",""],["ERB","","classes/ERB.html","",""],["ERB::Util","","classes/ERB/Util.html","",""],["Enumerable","","classes/Enumerable.html","",""],["Erb","","classes/Erb.html","",""],["Erb::Generators","","classes/Erb/Generators.html","",""],["Erb::Generators::ControllerGenerator","","classes/Erb/Generators/ControllerGenerator.html","",""],["Erb::Generators::MailerGenerator","","classes/Erb/Generators/MailerGenerator.html","",""],["Erb::Generators::ScaffoldGenerator","","classes/Erb/Generators/ScaffoldGenerator.html","",""],["FalseClass","","classes/FalseClass.html","",""],["File","","classes/File.html","",""],["Float","","classes/Float.html","",""],["HTML","","classes/HTML.html","",""],["HTML::FullSanitizer","","classes/HTML/FullSanitizer.html","",""],["HTML::LinkSanitizer","","classes/HTML/LinkSanitizer.html","",""],["HTML::Sanitizer","","classes/HTML/Sanitizer.html","",""],["HTML::Selector","","classes/HTML/Selector.html","","<p>Selects HTML elements using CSS 2 selectors.\n<p>The <code>Selector</code> class uses CSS selector expressions to match …\n"],["HTML::Tag","","classes/HTML/Tag.html","",""],["HTML::WhiteListSanitizer","","classes/HTML/WhiteListSanitizer.html","",""],["Hash","","classes/Hash.html","",""],["I18n","","classes/I18n.html","",""],["I18n::ExceptionHandler","","classes/I18n/ExceptionHandler.html","",""],["I18n::Railtie","","classes/I18n/Railtie.html","",""],["IO","","classes/IO.html","",""],["Integer","","classes/Integer.html","",""],["Js","","classes/Js.html","",""],["Js::Generators","","classes/Js/Generators.html","",""],["Js::Generators::AssetsGenerator","","classes/Js/Generators/AssetsGenerator.html","",""],["Kernel","","classes/Kernel.html","",""],["LoadError","","classes/LoadError.html","",""],["Logger","","classes/Logger.html","",""],["Logger::SimpleFormatter","","classes/Logger/SimpleFormatter.html","","<p>Simple formatter which only displays the message.\n"],["Mime","","classes/Mime.html","",""],["Mime::Mimes","","classes/Mime/Mimes.html","",""],["Mime::Type","","classes/Mime/Type.html","","<p>Encapsulates the notion of a mime type. Can be used at render time, for\nexample, with:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">PostsController</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Module","","classes/Module.html","","<p>Extends the API for constants to be able to deal with qualified names.\nArguments are assumed to be relative …\n"],["Mysql","","classes/Mysql.html","",""],["Mysql::Result","","classes/Mysql/Result.html","",""],["Mysql::Stmt","","classes/Mysql/Stmt.html","",""],["Mysql::Time","","classes/Mysql/Time.html","",""],["NameError","","classes/NameError.html","",""],["NilClass","","classes/NilClass.html","","<p>Extensions to <code>nil</code> which allow for more helpful error messages\nfor people who are new to Rails.\n<p>NilClass#id …\n"],["Numeric","","classes/Numeric.html","",""],["Object","","classes/Object.html","",""],["Object::HashWithIndifferentAccess","","classes/ActiveSupport/HashWithIndifferentAccess.html","",""],["Object::IntegrationTest","","classes/ActionDispatch/IntegrationTest.html","","<p>An integration test spans multiple controllers and actions, tying them all\ntogether to ensure they work …\n"],["Object::MissingSourceFile","","classes/LoadError.html","",""],["Plugin","","classes/Plugin.html","",""],["Process","","classes/Process.html","",""],["QualifiedConstUtils","","classes/QualifiedConstUtils.html","",""],["Rails","","classes/Rails.html","",""],["Rails::ActionMethods","","classes/Rails/ActionMethods.html","",""],["Rails::AppBuilder","","classes/Rails/AppBuilder.html","","<p>The application builder allows you to override elements of the application\ngenerator without being forced …\n"],["Rails::Application","","classes/Rails/Application.html","","<p>In Rails 3.0, a Rails::Application object was introduced which is nothing\nmore than an Engine but with …\n"],["Rails::Application::Bootstrap","","classes/Rails/Application/Bootstrap.html","",""],["Rails::Application::Configuration","","classes/Rails/Application/Configuration.html","",""],["Rails::Application::Finisher","","classes/Rails/Application/Finisher.html","",""],["Rails::Application::Railties","","classes/Rails/Application/Railties.html","",""],["Rails::Application::RoutesReloader","","classes/Rails/Application/RoutesReloader.html","",""],["Rails::BacktraceCleaner","","classes/Rails/BacktraceCleaner.html","",""],["Rails::Commands","","classes/Rails/Commands.html","",""],["Rails::Commands::Info","","classes/Rails/Commands/Info.html","",""],["Rails::Commands::Install","","classes/Rails/Commands/Install.html","",""],["Rails::Commands::Plugin","","classes/Rails/Commands/Plugin.html","",""],["Rails::Commands::Remove","","classes/Rails/Commands/Remove.html","",""],["Rails::Configuration","","classes/Rails/Configuration.html","",""],["Rails::Console","","classes/Rails/Console.html","",""],["Rails::ConsoleMethods","","classes/Rails/ConsoleMethods.html","",""],["Rails::DBConsole","","classes/Rails/DBConsole.html","",""],["Rails::Engine","","classes/Rails/Engine.html","","<p><code>Rails::Engine</code> allows you to wrap a specific Rails application\nor subset of functionality and share it ...\n"],["Rails::Engine::Configuration","","classes/Rails/Engine/Configuration.html","",""],["Rails::Engine::Railties","","classes/Rails/Engine/Railties.html","",""],["Rails::Generators","","classes/Rails/Generators.html","",""],["Rails::Generators::Actions","","classes/Rails/Generators/Actions.html","",""],["Rails::Generators::ActiveModel","","classes/Rails/Generators/ActiveModel.html","","<p>ActiveModel is a class to be implemented by each ORM to allow Rails to\ngenerate customized controller …\n"],["Rails::Generators::AppBase","","classes/Rails/Generators/AppBase.html","",""],["Rails::Generators::AppGenerator","","classes/Rails/Generators/AppGenerator.html","",""],["Rails::Generators::AssetsGenerator","","classes/Rails/Generators/AssetsGenerator.html","",""],["Rails::Generators::Base","","classes/Rails/Generators/Base.html","",""],["Rails::Generators::ControllerGenerator","","classes/Rails/Generators/ControllerGenerator.html","",""],["Rails::Generators::Error","","classes/Rails/Generators/Error.html","",""],["Rails::Generators::GeneratedAttribute","","classes/Rails/Generators/GeneratedAttribute.html","",""],["Rails::Generators::GeneratorGenerator","","classes/Rails/Generators/GeneratorGenerator.html","",""],["Rails::Generators::HelperGenerator","","classes/Rails/Generators/HelperGenerator.html","",""],["Rails::Generators::IntegrationTestGenerator","","classes/Rails/Generators/IntegrationTestGenerator.html","",""],["Rails::Generators::Migration","","classes/Rails/Generators/Migration.html","","<p>Holds common methods for migrations. It assumes that migrations has the\n[0-9]*_name format and can be …\n"],["Rails::Generators::Migration::ClassMethods","","classes/Rails/Generators/Migration/ClassMethods.html","",""],["Rails::Generators::MigrationGenerator","","classes/Rails/Generators/MigrationGenerator.html","",""],["Rails::Generators::ModelGenerator","","classes/Rails/Generators/ModelGenerator.html","",""],["Rails::Generators::NamedBase","","classes/Rails/Generators/NamedBase.html","",""],["Rails::Generators::ObserverGenerator","","classes/Rails/Generators/ObserverGenerator.html","",""],["Rails::Generators::PerformanceTestGenerator","","classes/Rails/Generators/PerformanceTestGenerator.html","",""],["Rails::Generators::PluginNewGenerator","","classes/Rails/Generators/PluginNewGenerator.html","",""],["Rails::Generators::ResourceGenerator","","classes/Rails/Generators/ResourceGenerator.html","",""],["Rails::Generators::ResourceHelpers","","classes/Rails/Generators/ResourceHelpers.html","","<p>Deal with controller names on scaffold and add some helpers to deal with\nActiveModel.\n"],["Rails::Generators::ResourceRouteGenerator","","classes/Rails/Generators/ResourceRouteGenerator.html","",""],["Rails::Generators::ScaffoldControllerGenerator","","classes/Rails/Generators/ScaffoldControllerGenerator.html","",""],["Rails::Generators::ScaffoldGenerator","","classes/Rails/Generators/ScaffoldGenerator.html","",""],["Rails::Generators::SessionMigrationGenerator","","classes/Rails/Generators/SessionMigrationGenerator.html","",""],["Rails::Generators::TaskGenerator","","classes/Rails/Generators/TaskGenerator.html","",""],["Rails::Generators::TestCase","","classes/Rails/Generators/TestCase.html","","<p>This class provides a TestCase for testing generators. To setup, you need\njust to configure the destination …\n"],["Rails::Info","","classes/Rails/Info.html","",""],["Rails::InfoController","","classes/Rails/InfoController.html","",""],["Rails::Initializable","","classes/Rails/Initializable.html","",""],["Rails::Initializable::ClassMethods","","classes/Rails/Initializable/ClassMethods.html","",""],["Rails::Initializable::Collection","","classes/Rails/Initializable/Collection.html","",""],["Rails::Initializable::Initializer","","classes/Rails/Initializable/Initializer.html","",""],["Rails::Paths","","classes/Rails/Paths.html","",""],["Rails::Paths::Path","","classes/Rails/Paths/Path.html","",""],["Rails::Paths::Root","","classes/Rails/Paths/Root.html","","<p>This object is an extended hash that behaves as root of the\n<code>Rails::Paths</code> system. It allows you to collect …\n"],["Rails::Plugin","","classes/Rails/Plugin.html","","<p>Rails::Plugin is nothing more than a Rails::Engine, but since it’s loaded\ntoo late in the boot process, …\n"],["Rails::PluginBuilder","","classes/Rails/PluginBuilder.html","",""],["Rails::Rack","","classes/Rails/Rack.html","",""],["Rails::Rack::Debugger","","classes/Rails/Rack/Debugger.html","",""],["Rails::Rack::LogTailer","","classes/Rails/Rack/LogTailer.html","",""],["Rails::Rack::Logger","","classes/Rails/Rack/Logger.html","","<p>Sets log tags, logs the request, calls the app, and flushes the logs.\n"],["Rails::Railtie","","classes/Rails/Railtie.html","","<p>Railtie is the core of the Rails framework and provides several hooks to\nextend Rails and/or modify the …\n"],["Rails::Railtie::Configurable","","classes/Rails/Railtie/Configurable.html","",""],["Rails::Railtie::Configurable::ClassMethods","","classes/Rails/Railtie/Configurable/ClassMethods.html","",""],["Rails::Railtie::Configuration","","classes/Rails/Railtie/Configuration.html","",""],["Rails::ScriptRailsLoader","","classes/Rails/ScriptRailsLoader.html","",""],["Rails::Server","","classes/Rails/Server.html","",""],["Rails::Server::Options","","classes/Rails/Server/Options.html","",""],["Rails::SubTestTask","","classes/Rails/SubTestTask.html","","<p>Silence the default description to cut down on `rake -T` noise.\n"],["Rails::TestUnitRailtie","","classes/Rails/TestUnitRailtie.html","",""],["RailsEnvironment","","classes/RailsEnvironment.html","",""],["Range","","classes/Range.html","",""],["RecursiveHTTPFetcher","","classes/RecursiveHTTPFetcher.html","",""],["Regexp","","classes/Regexp.html","",""],["SourceAnnotationExtractor","","classes/SourceAnnotationExtractor.html","","<p>Implements the logic behind the rake tasks for annotations like\n\n<pre>rake notes\nrake notes:optimize</pre>\n<p>and friends. …\n"],["SourceAnnotationExtractor::Annotation","","classes/SourceAnnotationExtractor/Annotation.html","",""],["String","","classes/String.html","","<p>String inflections define new methods on the String class to transform\nnames for different purposes. …\n"],["Symbol","","classes/Symbol.html","",""],["Test","","classes/Test.html","",""],["Test::Unit","","classes/Test/Unit.html","",""],["Test::Unit::Collector","","classes/Test/Unit/Collector.html","",""],["Test::Unit::Collector::ObjectSpace","","classes/Test/Unit/Collector/ObjectSpace.html","",""],["TestUnit","","classes/TestUnit.html","",""],["TestUnit::Generators","","classes/TestUnit/Generators.html","",""],["TestUnit::Generators::ControllerGenerator","","classes/TestUnit/Generators/ControllerGenerator.html","",""],["TestUnit::Generators::HelperGenerator","","classes/TestUnit/Generators/HelperGenerator.html","",""],["TestUnit::Generators::IntegrationGenerator","","classes/TestUnit/Generators/IntegrationGenerator.html","",""],["TestUnit::Generators::MailerGenerator","","classes/TestUnit/Generators/MailerGenerator.html","",""],["TestUnit::Generators::ModelGenerator","","classes/TestUnit/Generators/ModelGenerator.html","",""],["TestUnit::Generators::ObserverGenerator","","classes/TestUnit/Generators/ObserverGenerator.html","",""],["TestUnit::Generators::PerformanceGenerator","","classes/TestUnit/Generators/PerformanceGenerator.html","",""],["TestUnit::Generators::PluginGenerator","","classes/TestUnit/Generators/PluginGenerator.html","",""],["TestUnit::Generators::ScaffoldGenerator","","classes/TestUnit/Generators/ScaffoldGenerator.html","",""],["Time","","classes/Time.html","",""],["TrueClass","","classes/TrueClass.html","",""],["URI","","classes/URI.html","",""],["+","ActiveModel::MassAssignmentSecurity::PermissionSet","classes/ActiveModel/MassAssignmentSecurity/PermissionSet.html#method-i-2B","(values)",""],["+","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-2B","(other)","<p>Adds another Duration or a Numeric to this Duration. Numeric values are\ntreated as seconds.\n"],["+","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-2B","(other)","<p>Returns a new Chars object containing the <em>other</em> object\nconcatenated to the string.\n<p>Example:\n\n<pre>('Café'.mb_chars ...</pre>\n"],["+","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-2B","(other)",""],["+","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-2B","(other)",""],["+","Rails::Initializable::Collection","classes/Rails/Initializable/Collection.html#method-i-2B","(other)",""],["-","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-2D","(other)","<p>Subtracts another Duration or a Numeric from this Duration. Numeric values\nare treated as seconds.\n"],["-","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-2D","(other)",""],["-","Time","classes/Time.html#method-i-2D","(other)",""],["<<","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-3C-3C","(value)",""],["<=>","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-3C-3D-3E","(other_object)","<p>Allows sort on objects\n"],["<=>","ActiveRecord::ConnectionAdapters::SQLiteAdapter::Version","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter/Version.html#method-i-3C-3D-3E","(version_string)",""],["<=>","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-3C-3D-3E","(other)","<p>Returns -1, 0, or 1, depending on whether the Chars object is to be sorted\nbefore, equal or after the …\n"],["<=>","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-3C-3D-3E","(other)","<p>Use the time in UTC for comparisons.\n"],["<=>","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-3C-3D-3E","(zone)","<p>Compare this time zone to the parameter. The two are compared first on\ntheir offsets, and then by name. …\n"],["<=>","DateTime","classes/DateTime.html#method-i-3C-3D-3E","(other)","<p>Layers additional behavior on DateTime#&lt;=&gt; so that Time and\nActiveSupport::TimeWithZone instances …\n"],["<=>","Time","classes/Time.html#method-i-3C-3D-3E","(other)",""],["==","ActionDispatch::MiddlewareStack::Middleware","classes/ActionDispatch/MiddlewareStack/Middleware.html#method-i-3D-3D","(middleware)",""],["==","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-i-3D-3D","(resolver)",""],["==","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-3D-3D","(comparison_object)","<p>Returns true if <code>comparison_object</code> is the same exact object, or\n<code>comparison_object</code> is of the same type …\n"],["==","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-3D-3D","(other_aggregation)","<p>Returns <code>true</code> if <code>self</code> and\n<code>other_aggregation</code> have the same <code>name</code> attribute,\n<code>active_record</code> attribute, and …\n"],["==","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-3D-3D","(other)",""],["==","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-3D-3D","(other)","<p>Test for equality.  Resource are equal if and only if <code>other</code> is\nthe same object or is an instance of the …\n"],["==","ActiveResource::Request","classes/ActiveResource/Request.html#method-i-3D-3D","(req)",""],["==","ActiveResource::Response","classes/ActiveResource/Response.html#method-i-3D-3D","(other)","<p>Returns true if the other is a Response with an equal body, equal message\nand equal headers. Otherwise …\n"],["==","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-3D-3D","(other)","<p>Returns true if <code>other</code> is also a Duration instance with the\nsame <code>value</code>, or if <code>other == value</code>.\n"],["==","Mime::Type","classes/Mime/Type.html#method-i-3D-3D","(mime_type)",""],["===","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-3D-3D-3D","(object)","<p>Overwrite the default class equality method to provide support for\nassociation proxies.\n"],["===","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-i-3D-3D-3D","(other)",""],["===","Mime::Type","classes/Mime/Type.html#method-i-3D-3D-3D","(list)",""],["===","Time","classes/Time.html#method-c-3D-3D-3D","(other)","<p>Overriding case equality method so that it returns true for\nActiveSupport::TimeWithZone instances\n"],["=~","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-3D-7E","(other)","<p>Like <code>String#=~</code> only it returns the character offset (in\ncodepoints) instead of the byte offset.\n<p>Example: …\n"],["=~","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-3D-7E","(re)","<p>Compare #name and TZInfo identifier to a supplied regexp, returning true if\na match is found.\n"],["=~","Mime::Type","classes/Mime/Type.html#method-i-3D-7E","(mime_type)",""],[">>","Date","classes/Date.html#method-i-3E-3E","(n)","<p>Backported from 1.9. The one in 1.8 leads to incorrect next_month and\nfriends for dates where the calendar …\n"],["GET","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-GET","()","<p>Override Rack’s GET method to support indifferent access\n"],["POST","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-POST","()","<p>Override Rack’s POST method to support indifferent access\n"],["[]","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-5B-5D","(k)",""],["[]","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-i-5B-5D","(header_name)",""],["[]","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-5B-5D","(i)",""],["[]","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-5B-5D","(attribute)","<p>When passed a symbol or a name of a method, returns an array of errors for\nthe method.\n\n<pre>p.errors[:name] ...</pre>\n"],["[]","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::SQLiteAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-5B-5D","(name)","<p>Returns a ColumnDefinition for the column with name <code>name</code>.\n"],["[]","ActiveRecord::Fixtures","classes/ActiveRecord/Fixtures.html#method-i-5B-5D","(x)",""],["[]","ActiveResource::Formats","classes/ActiveResource/Formats.html#method-c-5B-5D","(mime_type_reference)","<p>Lookup the format class from a mime type reference symbol. Example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ActiveResource</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Formats</span>[:<span class=\"ruby-identifier\">xml</span>]  <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["[]","ActiveResource::Response","classes/ActiveResource/Response.html#method-i-5B-5D","(key)",""],["[]","ActiveSupport::Dependencies::ClassCache","classes/ActiveSupport/Dependencies/ClassCache.html#method-i-5B-5D","(key)",""],["[]","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-5B-5D","(*args)",""],["[]","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-c-5B-5D","(*args)",""],["[]","ActiveSupport::OrderedOptions","classes/ActiveSupport/OrderedOptions.html#method-i-5B-5D","(key)",""],["[]","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-5B-5D","(*args)",""],["[]","ActiveSupport::Testing::Performance::Metrics","classes/ActiveSupport/Testing/Performance/Metrics.html#method-c-5B-5D","(name)",""],["[]","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-5B-5D","(arg)","<p>Locate a specific time zone object. If the argument is a string, it is\ninterpreted to mean the name of …\n"],["[]","Mime","classes/Mime.html#method-c-5B-5D","(type)",""],["[]=","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-5B-5D-3D","(attribute, error)","<p>Adds to the supplied attribute the supplied error message.\n\n<pre>p.errors[:name] = &quot;must be set&quot;\np.errors[:name] ...</pre>\n"],["[]=","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::ConnectionAdapters::SQLiteAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::Fixtures","classes/ActiveRecord/Fixtures.html#method-i-5B-5D-3D","(k,v)",""],["[]=","ActiveResource::Response","classes/ActiveResource/Response.html#method-i-5B-5D-3D","(key, value)",""],["[]=","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D-3D","(key, value)","<p>Assigns a new value to the hash:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[:key] = &quot;value&quot;</pre>\n"],["[]=","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D-3D","(key, value)","<p>Assigns a new value to the hash:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[:key] = &quot;value&quot;</pre>\n"],["[]=","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-5B-5D-3D","(*args)","<p>Like <code>String#[]=</code>, except instead of byte offsets you specify\ncharacter offsets.\n<p>Example:\n\n<pre>s = &quot;Müller&quot;\ns.mb_chars[2] ...</pre>\n"],["[]=","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-5B-5D-3D","(key, value)",""],["[]=","ActiveSupport::OrderedOptions","classes/ActiveSupport/OrderedOptions.html#method-i-5B-5D-3D","(key, value)",""],["[]=","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-5B-5D-3D","(path, value)",""],["__callback_runner_name","ActiveSupport::Callbacks::ClassMethods","classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-__callback_runner_name","(key, kind)",""],["__replay__","ActiveSupport::Testing::ProxyTestResult","classes/ActiveSupport/Testing/ProxyTestResult.html#method-i-__replay__","(result)",""],["__reset_runner","ActiveSupport::Callbacks::ClassMethods","classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-__reset_runner","(symbol)",""],["_all_autoload_once_paths","Rails::Engine","classes/Rails/Engine.html#method-i-_all_autoload_once_paths","()",""],["_all_autoload_paths","Rails::Engine","classes/Rails/Engine.html#method-i-_all_autoload_paths","()",""],["_all_load_paths","Rails::Engine","classes/Rails/Engine.html#method-i-_all_load_paths","()",""],["_attribute","ActiveRecord::AttributeMethods::DeprecatedUnderscoreRead","classes/ActiveRecord/AttributeMethods/DeprecatedUnderscoreRead.html#method-i-_attribute","(attr_name)",""],["_dasherize","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-_dasherize","(key)",""],["_dump","Time","classes/Time.html#method-i-_dump","(*args)",""],["_dump_without_utc_flag","Time","classes/Time.html#method-i-_dump_without_utc_flag","(*args)",""],["_dump_without_zone","Time","classes/Time.html#method-i-_dump_without_zone","(*args)",""],["_field_changed?","ActiveRecord::AttributeMethods::Serialization","classes/ActiveRecord/AttributeMethods/Serialization.html#method-i-_field_changed-3F","(attr, old, value)",""],["_get","ActiveSupport::OrderedOptions","classes/ActiveSupport/OrderedOptions.html#method-i-_get","(key)",""],["_handle_method_missing","ActionController::Compatibility","classes/ActionController/Compatibility.html#method-i-_handle_method_missing","()",""],["_handle_render_options","ActionController::Renderers","classes/ActionController/Renderers.html#method-i-_handle_render_options","(options)",""],["_implied_layout_name","AbstractController::Layouts::ClassMethods","classes/AbstractController/Layouts/ClassMethods.html#method-i-_implied_layout_name","()","<p>If no layout is supplied, look for a template named the return value of\nthis method.\n<p>Returns\n<p><code>String</code> -  ...\n"],["_insert_callbacks","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-_insert_callbacks","(callbacks, block)","<p>Take callback names and an optional callback proc, normalize them, then\ncall the block with each callback. …\n"],["_layout_for","ActionView::Context","classes/ActionView/Context.html#method-i-_layout_for","(name=nil)","<p>Encapsulates the interaction with the view flow so it returns the correct\nbuffer on yield. This is usually …\n"],["_layout_for","ActionView::Helpers::RenderingHelper","classes/ActionView/Helpers/RenderingHelper.html#method-i-_layout_for","(*args, &block)","<p>Overwrites _layout_for in the context object so it supports the case a\nblock is passed to a partial. …\n"],["_load","Time","classes/Time.html#method-c-_load","(marshaled_time)",""],["_load_without_utc_flag","Time","classes/Time.html#method-c-_load_without_utc_flag","(marshaled_time)",""],["_load_without_zone","Time","classes/Time.html#method-c-_load_without_zone","(marshaled_time)",""],["_normalize_callback_options","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-_normalize_callback_options","(options)","<p>If :only or :except are used, convert the options into the primitive form\n(:per_key) used by ActiveSupport::Callbacks …\n"],["_normalize_options","AbstractController::Layouts","classes/AbstractController/Layouts.html#method-i-_normalize_options","(options)",""],["_normalize_options","ActionController::Compatibility","classes/ActionController/Compatibility.html#method-i-_normalize_options","(options)",""],["_original_to_s","BigDecimal","classes/BigDecimal.html#method-i-_original_to_s","(format = DEFAULT_STRING_FORMAT)",""],["_parse_file","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-_parse_file","(file, entity)",""],["_prefixes","AbstractController::ViewPaths","classes/AbstractController/ViewPaths.html#method-i-_prefixes","()","<p>The prefixes used in render “foo” shortcuts.\n"],["_prepare_context","ActionView::Context","classes/ActionView/Context.html#method-i-_prepare_context","()","<p>Prepares the context by setting the appropriate instance variables. :api:\nplugin\n"],["_routes","AbstractController::UrlFor","classes/AbstractController/UrlFor.html#method-i-_routes","()",""],["_routes","AbstractController::UrlFor::ClassMethods","classes/AbstractController/UrlFor/ClassMethods.html#method-i-_routes","()",""],["_routes_context","ActionDispatch::Routing::UrlFor","classes/ActionDispatch/Routing/UrlFor.html#method-i-_routes_context","()",""],["_routes_context","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-_routes_context","()",""],["_run_class_setup","ActiveSupport::Testing::Isolation","classes/ActiveSupport/Testing/Isolation.html#method-i-_run_class_setup","()",""],["_save_fragment","ActionController::Caching::Actions","classes/ActionController/Caching/Actions.html#method-i-_save_fragment","(name, options)",""],["_set_detail","ActionView::LookupContext::DetailsCache","classes/ActionView/LookupContext/DetailsCache.html#method-i-_set_detail","(key, value)",""],["_set_wrapper_defaults","ActionController::ParamsWrapper::ClassMethods","classes/ActionController/ParamsWrapper/ClassMethods.html#method-i-_set_wrapper_defaults","(options, model=nil)",""],["_to_partial_path","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-c-_to_partial_path","()",""],["_validates_default_keys","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-_validates_default_keys","()","<p>When creating custom validators, it might be useful to be able to specify\nadditional default keys. This …\n"],["_with_routes","ActionDispatch::Routing::UrlFor","classes/ActionDispatch/Routing/UrlFor.html#method-i-_with_routes","(routes)",""],["_write_layout_method","AbstractController::Layouts::ClassMethods","classes/AbstractController/Layouts/ClassMethods.html#method-i-_write_layout_method","()","<p>Creates a _layout method to be called by _default_layout .\n<p>If a layout is not explicitly mentioned then …\n"],["abstract!","AbstractController::Base","classes/AbstractController/Base.html#method-c-abstract-21","()","<p>Define a controller as abstract. See internal_methods for more details.\n"],["abstract_class?","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-abstract_class-3F","()","<p>Returns whether this class is an abstract class or not.\n"],["abstract_railtie?","Rails::Railtie","classes/Rails/Railtie.html#method-c-abstract_railtie-3F","()",""],["accept=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-accept-3D","(mime_types)",""],["accepts","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-accepts","()","<p>Returns the accepted MIME type for the request.\n"],["accepts_nested_attributes_for","ActiveRecord::NestedAttributes::ClassMethods","classes/ActiveRecord/NestedAttributes/ClassMethods.html#method-i-accepts_nested_attributes_for","(*attr_names)","<p>Defines an attributes writer for the specified association(s). If you are\nusing <code>attr_protected</code> or <code>attr_accessible</code> …\n"],["accessible_attributes","ActiveModel::MassAssignmentSecurity::ClassMethods","classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-accessible_attributes","(role = :default)",""],["acronym","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-acronym","(word)","<p>Specifies a new acronym. An acronym must be specified as it will appear in\na camelized string.  An underscore …\n"],["action","ActionController::Metal","classes/ActionController/Metal.html#method-c-action","(name, klass = ActionDispatch::Request)","<p>Return a rack endpoint for the given action. Memoize the endpoint, so\nmultiple calls into MyController.action …\n"],["action=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-action-3D","(action_name)",""],["action_has_layout?","AbstractController::Layouts","classes/AbstractController/Layouts.html#method-i-action_has_layout-3F","()",""],["action_methods","AbstractController::Base","classes/AbstractController/Base.html#method-c-action_methods","()","<p>A list of method names that should be considered actions. This includes all\npublic instance methods on …\n"],["action_methods","AbstractController::Base","classes/AbstractController/Base.html#method-i-action_methods","()",""],["action_methods","AbstractController::UrlFor::ClassMethods","classes/AbstractController/UrlFor/ClassMethods.html#method-i-action_methods","()",""],["action_methods","ActionController::HideActions::ClassMethods","classes/ActionController/HideActions/ClassMethods.html#method-i-action_methods","()","<p>Overrides AbstractController::Base#action_methods to remove any methods\nthat are listed as hidden methods. …\n"],["active?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-active-3F","()","<p>Checks whether the connection to the database is still active. This\nincludes checking whether the database …\n"],["active?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-active-3F","()","<p>CONNECTION MANAGEMENT ====================================\n"],["active?","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-active-3F","()","<p>CONNECTION MANAGEMENT ====================================\n"],["active?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-active-3F","()","<p>Is this connection alive and ready for queries?\n"],["active_authorizer","ActiveModel::MassAssignmentSecurity::ClassMethods","classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-active_authorizer","()",""],["active_authorizers","ActiveModel::MassAssignmentSecurity::ClassMethods","classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-active_authorizers","()",""],["active_connection?","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-active_connection-3F","()","<p>Is there an open connection that is being used for the current thread?\n"],["active_connections?","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-active_connections-3F","()","<p>Returns true if there are any active connections among the connection pools\nthat the ConnectionHandler …\n"],["acts_like?","Object","classes/Object.html#method-i-acts_like-3F","(duck)","<p>A duck-type assistant method. For example, Active Support extends Date to\ndefine an acts_like_date? method, …\n"],["acts_like_date?","Date","classes/Date.html#method-i-acts_like_date-3F","()","<p>Duck-types as a Date-like class. See Object#acts_like?.\n"],["acts_like_date?","DateTime","classes/DateTime.html#method-i-acts_like_date-3F","()","<p>Duck-types as a Date-like class. See Object#acts_like?.\n"],["acts_like_string?","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-acts_like_string-3F","()","<p>Enable more predictable duck-typing on String-like classes. See\nObject#acts_like?.\n"],["acts_like_string?","String","classes/String.html#method-i-acts_like_string-3F","()","<p>Enable more predictable duck-typing on String-like classes. See\n<code>Object#acts_like?</code>.\n"],["acts_like_time?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-acts_like_time-3F","()","<p>So that <code>self</code> <code>acts_like?(:time)</code>.\n"],["acts_like_time?","DateTime","classes/DateTime.html#method-i-acts_like_time-3F","()","<p>Duck-types as a Time-like class. See Object#acts_like?.\n"],["acts_like_time?","Time","classes/Time.html#method-i-acts_like_time-3F","()","<p>Duck-types as a Time-like class. See Object#acts_like?.\n"],["adapter_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-adapter_name","()","<p>Returns the human-readable name of the adapter. Use mixed case - one can\nalways use downcase if needed. …\n"],["adapter_name","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-adapter_name","()","<p>Returns ‘PostgreSQL’ as adapter name for identification purposes.\n"],["add","ActionController::Renderers","classes/ActionController/Renderers.html#method-c-add","(key, &block)","<p>Adds a new renderer to call within controller actions. A renderer is\ninvoked by passing its name as an …\n"],["add","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-add","(attribute, message = nil, options = {})","<p>Adds <code>message</code> to the error messages on <code>attribute</code>.\nMore than one error can be added to the same <code>attribute</code> …\n"],["add","ActiveRecord::IdentityMap","classes/ActiveRecord/IdentityMap.html#method-c-add","(record)",""],["add","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-add","(severity, message = nil, progname = nil, &block)",""],["add","ActiveSupport::TaggedLogging","classes/ActiveSupport/TaggedLogging.html#method-i-add","(severity, message = nil, progname = nil, &block)",""],["add","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-add","(path, options={})",""],["add_column","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_column","(table_name, column_name, type, options = {})",""],["add_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-add_column","(table_name, column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["add_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_column","(table_name, column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["add_column_position!","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_column_position-21","(sql, options)",""],["add_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_column_sql","(table_name, column_name, type, options = {})",""],["add_error","ActiveSupport::Testing::ProxyTestResult","classes/ActiveSupport/Testing/ProxyTestResult.html#method-i-add_error","(e)",""],["add_expr","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_expr","(src, code, indicator)","<p>Erubis toggles &lt;%= and &lt;%== behavior when escaping is enabled. We\noverride to always treat &lt;%== …\n"],["add_expr_escaped","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_expr_escaped","(src, code)",""],["add_expr_literal","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_expr_literal","(src, code)",""],["add_filter","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-add_filter","(&block)","<p>Adds a filter from the block provided. Each line in the backtrace will be\nmapped against this filter. …\n"],["add_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index","(table_name, column_name, options = {})","<p>Adds a new index to the table. <code>column_name</code> can be a single\nSymbol, or an Array of Symbols.\n<p>The index will …\n"],["add_index_length","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_index_length","(option_strings, column_names, options = {})",""],["add_index_options","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index_options","(table_name, column_name, options = {})",""],["add_index_sort_order","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index_sort_order","(option_strings, column_names, options = {})",""],["add_index_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_index_sql","(table_name, column_name, options = {})",""],["add_observer","ActiveModel::Observing::ClassMethods","classes/ActiveModel/Observing/ClassMethods.html#method-i-add_observer","(observer)","<p>Add a new observer to the pool. The new observer needs to respond to\n‘update’, otherwise it raises an …\n"],["add_observer!","ActiveRecord::Observer","classes/ActiveRecord/Observer.html#method-i-add_observer-21","(klass)",""],["add_on_blank","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-add_on_blank","(attributes, options = {})","<p>Will add an error message to each of the attributes in\n<code>attributes</code> that is blank (using Object#blank? …\n"],["add_on_empty","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-add_on_empty","(attributes, options = {})","<p>Will add an error message to each of the attributes in\n<code>attributes</code> that is empty.\n"],["add_postamble","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_postamble","(src)",""],["add_preamble","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_preamble","(src)",""],["add_renderer","ActionController","classes/ActionController.html#method-c-add_renderer","(key, &block)","<p>See <code>Renderers.add</code>\n"],["add_resource_route","Rails::Generators::ResourceRouteGenerator","classes/Rails/Generators/ResourceRouteGenerator.html#method-i-add_resource_route","()","<p>Properly nests namespaces passed into a generator\n\n<pre>$ rails generate resource admin/users/products</pre>\n<p>should …\n"],["add_routes","Rails::Generators::ControllerGenerator","classes/Rails/Generators/ControllerGenerator.html#method-i-add_routes","()",""],["add_shared_options_for","Rails::Generators::AppBase","classes/Rails/Generators/AppBase.html#method-c-add_shared_options_for","(name)",""],["add_shebang_option!","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-add_shebang_option-21","()","<p>Small macro to add ruby as an option to the generator with proper default\nvalue plus an instance helper …\n"],["add_silencer","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-add_silencer","(&block)","<p>Adds a silencer from the block provided. If the silencer returns true for a\ngiven line, it will be excluded …\n"],["add_source","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-add_source","(source, options={})","<p>Add the given source to Gemfile\n<p>Example\n\n<pre>add_source &quot;http://gems.github.com/&quot;</pre>\n"],["add_text","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_text","(src, text)",""],["add_timestamps","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_timestamps","(table_name)","<p>Adds timestamps (created_at and updated_at) columns to the named table.\n<p>Examples\n\n<pre>add_timestamps(:suppliers)</pre>\n"],["add_timestamps_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_timestamps_sql","(table_name)",""],["add_to_transaction","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-add_to_transaction","()","<p>Add the record to the current transaction so that the :after_rollback and\n:after_commit callbacks can …\n"],["add_transaction_record","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-add_transaction_record","(record)","<p>Register a record with the current transaction so that its after_commit and\nafter_rollback callbacks …\n"],["add_whiner","NilClass","classes/NilClass.html#method-c-add_whiner","(klass)",""],["added?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-added-3F","(attribute, message = nil, options = {})","<p>Returns true if an error on the attribute with the given message is\npresent, false otherwise. <code>message</code> …\n"],["advance","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-advance","(options)",""],["advance","Date","classes/Date.html#method-i-advance","(options)","<p>Provides precise Date calculations for years, months, and days. The\n<code>options</code> parameter takes a hash with …\n"],["advance","DateTime","classes/DateTime.html#method-i-advance","(options)","<p>Uses Date to provide precise Time calculations for years, months, and days.\nThe <code>options</code> parameter takes …\n"],["advance","Time","classes/Time.html#method-i-advance","(options)","<p>Uses Date to provide precise Time calculations for years, months, and days.\nThe <code>options</code> parameter takes …\n"],["after","ActionDispatch::Callbacks","classes/ActionDispatch/Callbacks.html#method-c-after","(*args, &block)",""],["after","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-after","()",""],["after_commit","ActiveRecord::Transactions::ClassMethods","classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_commit","(*args, &block)","<p>This callback is called after a record has been created, updated, or\ndestroyed.\n<p>You can specify that the …\n"],["after_filter","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-after_filter","","<p>Append an after filter. See _insert_callbacks for parameter details.\n"],["after_initialize","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-after_initialize","(&block)","<p>Last configurable block to run. Called after frameworks initialize.\n"],["after_rollback","ActiveRecord::Transactions::ClassMethods","classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_rollback","(*args, &block)","<p>This callback is called after a create, update, or destroy are rolled back.\n<p>Please check the documentation …\n"],["after_validation","ActiveModel::Validations::Callbacks::ClassMethods","classes/ActiveModel/Validations/Callbacks/ClassMethods.html#method-i-after_validation","(*args, &block)",""],["ago","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-ago","(time = ::Time.current)","<p>Calculates a new Time or Date that is as far in the past as this Duration\nrepresents.\n"],["ago","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-ago","(other)",""],["ago","Date","classes/Date.html#method-i-ago","(seconds)","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],["ago","DateTime","classes/DateTime.html#method-i-ago","(seconds)","<p>Returns a new DateTime representing the time a number of seconds ago Do not\nuse this method in combination …\n"],["ago","Numeric","classes/Numeric.html#method-i-ago","(time = ::Time.current)","<p>Reads best without arguments:  10.minutes.ago\n"],["ago","Time","classes/Time.html#method-i-ago","(seconds)","<p>Returns a new Time representing the time a number of seconds ago, this is\nbasically a wrapper around …\n"],["alert","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-alert","()","<p>Convenience accessor for flash\n"],["alert=","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-alert-3D","(message)","<p>Convenience accessor for flash=\n"],["alias_attribute","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-alias_attribute","(new_name, old_name)",""],["alias_attribute","Module","classes/Module.html#method-i-alias_attribute","(new_name, old_name)","<p>Allows you to make aliases for attributes, which includes getter, setter,\nand query methods.\n<p>Example: …\n"],["alias_method_chain","Module","classes/Module.html#method-i-alias_method_chain","(target, feature)","<p>Encapsulates the common pattern of:\n\n<pre>alias_method :foo_without_feature, :foo\nalias_method :foo, :foo_with_feature</pre>\n"],["all","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-all","(*args)","<p>A convenience wrapper for <code>find(:all, *args)</code>. You can pass in\nall the same arguments to this method as …\n"],["all","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-all","(*args)","<p>This is an alias for find(:all).  You can pass in all the same arguments to\nthis method as you can to …\n"],["all","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-all","()","<p>Return an array of all TimeZone objects. There are multiple TimeZone\nobjects per time zone, in many cases, …\n"],["all","Rails::Application::Railties","classes/Rails/Application/Railties.html#method-i-all","(&block)",""],["all","Rails::Engine::Railties","classes/Rails/Engine/Railties.html#method-i-all","(&block)",""],["all","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-all","(klass)","<p>GET index\n"],["all","Rails::Plugin","classes/Rails/Plugin.html#method-c-all","(list, paths)",""],["all_day","Time","classes/Time.html#method-i-all_day","()","<p>Returns a Range representing the whole day of the current time.\n"],["all_helpers_from_path","ActionController::Helpers::ClassMethods","classes/ActionController/Helpers/ClassMethods.html#method-i-all_helpers_from_path","(path)",""],["all_month","Time","classes/Time.html#method-i-all_month","()","<p>Returns a Range representing the whole month of the current time.\n"],["all_paths","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-all_paths","()",""],["all_quarter","Time","classes/Time.html#method-i-all_quarter","()","<p>Returns a Range representing the whole quarter of the current time.\n"],["all_week","Time","classes/Time.html#method-i-all_week","(start_day = :monday)","<p>Returns a Range representing the whole week of the current time. Week\nstarts on start_day (default is …\n"],["all_year","Time","classes/Time.html#method-i-all_year","()","<p>Returns a Range representing the whole year of the current time.\n"],["announce","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-announce","(message)",""],["anonymous?","Module","classes/Module.html#method-i-anonymous-3F","()","<p>A module may or may not have a name.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">M</span>; <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-constant\">M</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-comment\"># =&gt; &quot;M&quot;</span>\n\n<span class=\"ruby-identifier\">m</span> = <span class=\"ruby-constant\">Module</span>.<span class=\"ruby-identifier\">new</span>\n<span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-comment\"># =&gt; &quot;&quot;</span>\n</pre>\n<p>A module …\n"],["any?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-any-3F","()",""],["api_behavior","ActionController::Responder","classes/ActionController/Responder.html#method-i-api_behavior","(error)","<p>This is the common behavior for formats associated with APIs, such as :xml\nand :json.\n"],["api_location","ActionController::Responder","classes/ActionController/Responder.html#method-i-api_location","()",""],["app","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-app","()",""],["app","ActionDispatch::IntegrationTest","classes/ActionDispatch/IntegrationTest.html#method-c-app","()",""],["app","ActionDispatch::IntegrationTest","classes/ActionDispatch/IntegrationTest.html#method-c-app","()",""],["app","ActionDispatch::IntegrationTest","classes/ActionDispatch/IntegrationTest.html#method-i-app","()",""],["app","ActionDispatch::IntegrationTest","classes/ActionDispatch/IntegrationTest.html#method-i-app","()",""],["app","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-app","()",""],["app","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-app","(create=false)","<p>reference the global “app” instance, created on demand. To recreate the\ninstance, pass a non-false …\n"],["app","Rails::Engine","classes/Rails/Engine.html#method-i-app","()",""],["app","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-app","()",""],["app","Rails::Server","classes/Rails/Server.html#method-i-app","()",""],["app=","ActionDispatch::IntegrationTest","classes/ActionDispatch/IntegrationTest.html#method-c-app-3D","(app)",""],["app=","ActionDispatch::IntegrationTest","classes/ActionDispatch/IntegrationTest.html#method-c-app-3D","(app)",""],["app_const","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-app_const","()",""],["app_const_base","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-app_const_base","()",""],["app_generators","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-app_generators","()","<p>This allows you to modify application’s generators from Railties.\n<p>Values set on app_generators will become …\n"],["app_middleware","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-app_middleware","()","<p>This allows you to modify the application’s middlewares from Engines.\n<p>All operations you run on the app_middleware …\n"],["app_name","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-app_name","()",""],["app_secret","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-app_secret","()",""],["app_templates_dir","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-app_templates_dir","()",""],["append_after_filter","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-append_after_filter","","<p>Append an after filter. See _insert_callbacks for parameter details.\n"],["append_around_filter","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-append_around_filter","","<p>Append an around filter. See _insert_callbacks for parameter details.\n"],["append_before_filter","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-append_before_filter","","<p>Append a before filter. See _insert_callbacks for parameter details.\n"],["append_features","ActiveSupport::Concern","classes/ActiveSupport/Concern.html#method-i-append_features","(base)",""],["append_view_path","AbstractController::ViewPaths","classes/AbstractController/ViewPaths.html#method-i-append_view_path","(path)",""],["append_view_path","AbstractController::ViewPaths::ClassMethods","classes/AbstractController/ViewPaths/ClassMethods.html#method-i-append_view_path","(path)","<p>Append a path to the list of view paths for this controller.\n<p>Parameters\n<p><code>path</code> - If a String is provided, ...\n"],["application","Rails","classes/Rails.html#method-c-application","()",""],["application","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-application","(data=nil, options={}, &block)",""],["application=","Rails","classes/Rails.html#method-c-application-3D","(application)",""],["application_definition","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-application_definition","()",""],["application_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-application_name","()","<p>Tries to retrieve the application name or simple return application.\n"],["application_trace","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-i-application_trace","()",""],["apply_finder_options","ActiveRecord::SpawnMethods","classes/ActiveRecord/SpawnMethods.html#method-i-apply_finder_options","(options)",""],["apply_join_dependency","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-apply_join_dependency","(relation, join_dependency)",""],["apply_rails_template","Rails::Generators::AppBase","classes/Rails/Generators/AppBase.html#method-i-apply_rails_template","()",""],["arel","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-arel","()",""],["arel_engine","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-arel_engine","()",""],["arel_table","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-arel_table","()",""],["arguments","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-c-arguments","(array)","<p>Sets default arguments on generator invocation. This can be overwritten\nwhen invoking it.\n\n<pre>arguments %w(app_name ...</pre>\n"],["around_filter","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-around_filter","","<p>Append an around filter. See _insert_callbacks for parameter details.\n"],["as_json","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-as_json","(options=nil)","<p>Returns an ActiveSupport::OrderedHash that can be used as the JSON\nrepresentation for this object.\n"],["as_json","ActiveModel::Serializers::JSON","classes/ActiveModel/Serializers/JSON.html#method-i-as_json","(options = nil)","<p>Returns a hash representing the model. Some configuration can be passed\nthrough <code>options</code>.\n<p>The option <code>include_root_in_json</code> …\n"],["as_json","ActiveSupport::JSON::Encoding::Encoder","classes/ActiveSupport/JSON/Encoding/Encoder.html#method-i-as_json","(value, use_options = true)","<p>like encode, but only calls as_json, without encoding to string\n"],["as_json","ActiveSupport::JSON::Variable","classes/ActiveSupport/JSON/Variable.html#method-i-as_json","(options = nil)",""],["as_json","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-as_json","(options = nil)","<p>Coerces time to a string for JSON encoding. The default format is ISO 8601.\nYou can get %Y/%m/%d %H:%M:% …\n"],["as_json","BigDecimal","classes/BigDecimal.html#method-i-as_json","(options = nil)","<p>A BigDecimal would be naturally represented as a JSON number. Most\nlibraries, however, parse non-integer …\n"],["as_json","FalseClass","classes/FalseClass.html#method-i-as_json","(options = nil)",""],["as_json","NilClass","classes/NilClass.html#method-i-as_json","(options = nil)",""],["as_json","Numeric","classes/Numeric.html#method-i-as_json","(options = nil)",""],["as_json","Regexp","classes/Regexp.html#method-i-as_json","(options = nil)",""],["as_json","String","classes/String.html#method-i-as_json","(options = nil)",""],["as_json","Symbol","classes/Symbol.html#method-i-as_json","(options = nil)",""],["as_json","TrueClass","classes/TrueClass.html#method-i-as_json","(options = nil)",""],["assert_blank","ActiveSupport::Testing::Assertions","classes/ActiveSupport/Testing/Assertions.html#method-i-assert_blank","(object, message=nil)","<p>Test if an expression is blank. Passes if object.blank? is true.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_blank</span> [] <span class=\"ruby-comment\"># =&gt; true</span>\n</pre>\n"],["assert_class_method","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-assert_class_method","(method, content, &block)","<p>Asserts the given class method exists in the given content. This method\ndoes not detect class methods …\n"],["assert_difference","ActiveSupport::Testing::Assertions","classes/ActiveSupport/Testing/Assertions.html#method-i-assert_difference","(expression, difference = 1, message = nil, &block)","<p>Test numeric difference between the return value of an expression as a\nresult of what is evaluated in …\n"],["assert_directory","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-assert_directory","(relative, *contents)",""],["assert_dom_equal","ActionDispatch::Assertions::DomAssertions","classes/ActionDispatch/Assertions/DomAssertions.html#method-i-assert_dom_equal","(expected, actual, message = \"\")","<p>Test two HTML strings for equivalency (e.g., identical up to reordering of\nattributes)\n<p>Examples\n\n<pre># assert ...</pre>\n"],["assert_dom_not_equal","ActionDispatch::Assertions::DomAssertions","classes/ActionDispatch/Assertions/DomAssertions.html#method-i-assert_dom_not_equal","(expected, actual, message = \"\")","<p>The negated form of <code>assert_dom_equivalent</code>.\n<p>Examples\n\n<pre># assert that the referenced method does not generate ...</pre>\n"],["assert_field_default_value","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-assert_field_default_value","(attribute_type, value)","<p>Asserts the given attribute type gets a proper default value:\n\n<pre>assert_field_default_value :string, &quot;MyString&quot;</pre>\n"],["assert_field_type","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-assert_field_type","(attribute_type, field_type)","<p>Asserts the given attribute type gets translated to a field type properly:\n\n<pre>assert_field_type :date, :date_select</pre>\n"],["assert_file","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-assert_file","(relative, *contents)","<p>Asserts a given file exists. You need to supply an absolute path or a path\nrelative to the configured …\n"],["assert_generates","ActionDispatch::Assertions::RoutingAssertions","classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-assert_generates","(expected_path, options, defaults={}, extras = {}, message=nil)","<p>Asserts that the provided options can be used to generate the provided\npath. This is the inverse of  …\n"],["assert_index","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-assert_index","(index, where)",""],["assert_instance_method","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-assert_instance_method","(method, content)","<p>Asserts the given method exists in the given content. When a block is\ngiven, it yields the content of …\n"],["assert_method","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-assert_method","(method, content)",""],["assert_migration","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-assert_migration","(relative, *contents, &block)","<p>Asserts a given migration exists. You need to supply an absolute path or a\npath relative to the configured …\n"],["assert_no_difference","ActiveSupport::Testing::Assertions","classes/ActiveSupport/Testing/Assertions.html#method-i-assert_no_difference","(expression, message = nil, &block)","<p>Assertion that the numeric result of evaluating an expression is not\nchanged before and after invoking …\n"],["assert_no_directory","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-assert_no_directory","(relative)",""],["assert_no_file","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-assert_no_file","(relative)","<p>Asserts a given file does not exist. You need to supply an absolute path or\na path relative to the configured …\n"],["assert_no_migration","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-assert_no_migration","(relative)","<p>Asserts a given migration does not exist. You need to supply an absolute\npath or a path relative to the …\n"],["assert_no_tag","ActionDispatch::Assertions::TagAssertions","classes/ActionDispatch/Assertions/TagAssertions.html#method-i-assert_no_tag","(*opts)","<p>Identical to <code>assert_tag</code>, but asserts that a matching tag does\n<em>not</em> exist. (See <code>assert_tag</code> for a full discussion …\n"],["assert_present","ActiveSupport::Testing::Assertions","classes/ActiveSupport/Testing/Assertions.html#method-i-assert_present","(object, message=nil)","<p>Test if an expression is not blank. Passes if object.present? is true.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_present</span> {:<span class=\"ruby-identifier\">data</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'x'</span> } <span class=\"ruby-operator\">...</span>\n</pre>\n"],["assert_recognizes","ActionDispatch::Assertions::RoutingAssertions","classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-assert_recognizes","(expected_options, path, extras={}, message=nil)","<p>Asserts that the routing of the given <code>path</code> was handled\ncorrectly and that the parsed options (given in …\n"],["assert_redirected_to","ActionDispatch::Assertions::ResponseAssertions","classes/ActionDispatch/Assertions/ResponseAssertions.html#method-i-assert_redirected_to","(options = {}, message=nil)","<p>Assert that the redirection options passed in match those of the redirect\ncalled in the latest action. …\n"],["assert_response","ActionDispatch::Assertions::ResponseAssertions","classes/ActionDispatch/Assertions/ResponseAssertions.html#method-i-assert_response","(type, message = nil)","<p>Asserts that the response is one of the following types:\n<p><code>:success</code>   - Status code was 200\n<p><code>:redirect</code>  - ...\n"],["assert_routing","ActionDispatch::Assertions::RoutingAssertions","classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-assert_routing","(path, options, defaults={}, extras={}, message=nil)","<p>Asserts that path and options match both ways; in other words, it verifies\nthat <code>path</code> generates <code>options</code> …\n"],["assert_select","ActionDispatch::Assertions::SelectorAssertions","classes/ActionDispatch/Assertions/SelectorAssertions.html#method-i-assert_select","(*args, &block)","<p>An assertion that selects elements and makes one or more equality tests.\n<p>If the first argument is an element, …\n"],["assert_select_email","ActionDispatch::Assertions::SelectorAssertions","classes/ActionDispatch/Assertions/SelectorAssertions.html#method-i-assert_select_email","(&block)","<p>Extracts the body of an email and runs nested assertions on it.\n<p>You must enable deliveries for this assertion …\n"],["assert_select_encoded","ActionDispatch::Assertions::SelectorAssertions","classes/ActionDispatch/Assertions/SelectorAssertions.html#method-i-assert_select_encoded","(element = nil, &block)","<p>Extracts the content of an element, treats it as encoded HTML and runs\nnested assertion on it.\n<p>You typically …\n"],["assert_tag","ActionDispatch::Assertions::TagAssertions","classes/ActionDispatch/Assertions/TagAssertions.html#method-i-assert_tag","(*opts)","<p>Asserts that there is a tag/node/element in the body of the response that\nmeets all of the given conditions. …\n"],["assert_template","ActionController::TemplateAssertions","classes/ActionController/TemplateAssertions.html#method-i-assert_template","(options = {}, message = nil)","<p>Asserts that the request was rendered with the appropriate template file or\npartials.\n<p>Examples\n\n<pre># assert ...</pre>\n"],["assert_valid_keys","Hash","classes/Hash.html#method-i-assert_valid_keys","(*valid_keys)","<p>Validate all keys in a hash match *valid keys, raising ArgumentError on a\nmismatch. Note that keys are …\n"],["asset_name","ActionView::Helpers::AssetTagHelper::AssetIncludeTag","classes/ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html#method-i-asset_name","()",""],["asset_name","ActionView::Helpers::AssetTagHelper::JavascriptIncludeTag","classes/ActionView/Helpers/AssetTagHelper/JavascriptIncludeTag.html#method-i-asset_name","()",""],["asset_name","ActionView::Helpers::AssetTagHelper::StylesheetIncludeTag","classes/ActionView/Helpers/AssetTagHelper/StylesheetIncludeTag.html#method-i-asset_name","()",""],["asset_name","Rails::Generators::AssetsGenerator","classes/Rails/Generators/AssetsGenerator.html#method-i-asset_name","()",""],["asset_tag","ActionView::Helpers::AssetTagHelper::AssetIncludeTag","classes/ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html#method-i-asset_tag","(source, options)",""],["asset_tag","ActionView::Helpers::AssetTagHelper::JavascriptIncludeTag","classes/ActionView/Helpers/AssetTagHelper/JavascriptIncludeTag.html#method-i-asset_tag","(source, options)",""],["asset_tag","ActionView::Helpers::AssetTagHelper::StylesheetIncludeTag","classes/ActionView/Helpers/AssetTagHelper/StylesheetIncludeTag.html#method-i-asset_tag","(source, options)",""],["assets_gemfile_entry","Rails::Generators::AppBase","classes/Rails/Generators/AppBase.html#method-i-assets_gemfile_entry","()",""],["assign_attributes","ActiveRecord::AttributeAssignment","classes/ActiveRecord/AttributeAssignment.html#method-i-assign_attributes","(new_attributes, options = {})","<p>Allows you to set all the attributes for a particular mass-assignment\nsecurity role by passing in a hash …\n"],["assign_shortcuts","ActionController::Compatibility","classes/ActionController/Compatibility.html#method-i-assign_shortcuts","(*)",""],["assigns","ActionDispatch::TestProcess","classes/ActionDispatch/TestProcess.html#method-i-assigns","(key = nil)",""],["assume_migrated_upto_version","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-assume_migrated_upto_version","(version, migrations_paths = ActiveRecord::Migrator.migrations_paths)",""],["at","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-at","(secs)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from number of seconds …\n"],["at","String","classes/String.html#method-i-at","(position)","<p>Returns the character at the <code>position</code> treating the string as\nan array (where 0 is the first character). …\n"],["at_beginning_of_day","Date","classes/Date.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_day","DateTime","classes/DateTime.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_day","Time","classes/Time.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_hour","DateTime","classes/DateTime.html#method-i-at_beginning_of_hour","()",""],["at_beginning_of_hour","Time","classes/Time.html#method-i-at_beginning_of_hour","()",""],["at_beginning_of_month","Date","classes/Date.html#method-i-at_beginning_of_month","()",""],["at_beginning_of_month","Time","classes/Time.html#method-i-at_beginning_of_month","()",""],["at_beginning_of_quarter","Date","classes/Date.html#method-i-at_beginning_of_quarter","()",""],["at_beginning_of_quarter","Time","classes/Time.html#method-i-at_beginning_of_quarter","()",""],["at_beginning_of_week","Date","classes/Date.html#method-i-at_beginning_of_week","(start_day = :monday)",""],["at_beginning_of_week","Time","classes/Time.html#method-i-at_beginning_of_week","(start_day = :monday)",""],["at_beginning_of_year","Date","classes/Date.html#method-i-at_beginning_of_year","()",""],["at_beginning_of_year","Time","classes/Time.html#method-i-at_beginning_of_year","()",""],["at_end_of_month","Date","classes/Date.html#method-i-at_end_of_month","()",""],["at_end_of_month","Time","classes/Time.html#method-i-at_end_of_month","()",""],["at_end_of_quarter","Date","classes/Date.html#method-i-at_end_of_quarter","()",""],["at_end_of_quarter","Time","classes/Time.html#method-i-at_end_of_quarter","()",""],["at_end_of_week","Date","classes/Date.html#method-i-at_end_of_week","(start_day = :monday)",""],["at_end_of_week","Time","classes/Time.html#method-i-at_end_of_week","(start_day = :monday)",""],["at_end_of_year","Date","classes/Date.html#method-i-at_end_of_year","()",""],["at_end_of_year","Time","classes/Time.html#method-i-at_end_of_year","()",""],["at_midnight","Date","classes/Date.html#method-i-at_midnight","()",""],["at_midnight","DateTime","classes/DateTime.html#method-i-at_midnight","()",""],["at_midnight","Time","classes/Time.html#method-i-at_midnight","()",""],["atom_feed","ActionView::Helpers::AtomFeedHelper","classes/ActionView/Helpers/AtomFeedHelper.html#method-i-atom_feed","(options = {}, &block)","<p>Adds easy defaults to writing Atom feeds with the Builder template engine\n(this does not work on ERB …\n"],["atomic_write","File","classes/File.html#method-c-atomic_write","(file_name, temp_dir = Dir.tmpdir)","<p>Write to a file atomically. Useful for situations where you don’t want\nother processes or threads to …\n"],["attach_to","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-c-attach_to","(namespace, log_subscriber=new, notifier=ActiveSupport::Notifications)",""],["attachments","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-attachments","()","<p>Allows you to add attachments to an email, like so:\n\n<pre>mail.attachments['filename.jpg'] = File.read('/path/to/filename.jpg')</pre>\n"],["attachments","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-attachments","()","<p>Access the message attachments list.\n"],["attr_accessible","ActiveModel::MassAssignmentSecurity::ClassMethods","classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-attr_accessible","(*args)","<p>Specifies a white list of model attributes that can be set via\nmass-assignment.\n<p>Like <code>attr_protected</code>, a …\n"],["attr_internal","Module","classes/Module.html#method-i-attr_internal","(*attrs)",""],["attr_internal_accessor","Module","classes/Module.html#method-i-attr_internal_accessor","(*attrs)","<p>Declares an attribute reader and writer backed by an internally-named\ninstance variable.\n"],["attr_internal_reader","Module","classes/Module.html#method-i-attr_internal_reader","(*attrs)","<p>Declares an attribute reader backed by an internally-named instance\nvariable.\n"],["attr_internal_writer","Module","classes/Module.html#method-i-attr_internal_writer","(*attrs)","<p>Declares an attribute writer backed by an internally-named instance\nvariable.\n"],["attr_protected","ActiveModel::MassAssignmentSecurity::ClassMethods","classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-attr_protected","(*args)","<p>Attributes named in this macro are protected from mass-assignment whenever\nattributes are sanitized before …\n"],["attr_readonly","ActiveRecord::ReadonlyAttributes::ClassMethods","classes/ActiveRecord/ReadonlyAttributes/ClassMethods.html#method-i-attr_readonly","(*attributes)","<p>Attributes listed as readonly will be used to create a new record but\nupdate operations will ignore these …\n"],["attribute_cast_code","ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","classes/ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html#method-i-attribute_cast_code","(attr_name)","<p>The enhanced read method automatically converts the UTC time stored in the\ndatabase to the time zone …\n"],["attribute_match","HTML::Selector","classes/HTML/Selector.html#method-i-attribute_match","(equality, value)","<p>Create a regular expression to match an attribute value based on the\nequality operator (=, ^=, |=, etc). …\n"],["attribute_method?","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-attribute_method-3F","(attr_name)",""],["attribute_method?","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-attribute_method-3F","(attribute)","<p>Check if method is an attribute method or not.\n"],["attribute_method?","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-attribute_method-3F","(attribute)",""],["attribute_method_affix","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_affix","(*affixes)","<p>Declares a method available for all attributes with the given prefix and\nsuffix. Uses <code>method_missing</code> …\n"],["attribute_method_prefix","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_prefix","(*prefixes)","<p>Declares a method available for all attributes with the given prefix. Uses\n<code>method_missing</code> and <code>respond_to</code> …\n"],["attribute_method_suffix","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_suffix","(*suffixes)","<p>Declares a method available for all attributes with the given suffix. Uses\n<code>method_missing</code> and <code>respond_to</code> …\n"],["attribute_methods_generated?","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-attribute_methods_generated-3F","()",""],["attribute_missing","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-attribute_missing","(match, *args, &block)","<p>attribute_missing is like method_missing, but for attributes. When\nmethod_missing is called we check …\n"],["attribute_names","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-attribute_names","()","<p>Returns an array of column names as strings if it’s not an abstract class\nand table exists. Otherwise …\n"],["attributes=","ActiveRecord::AttributeAssignment","classes/ActiveRecord/AttributeAssignment.html#method-i-attributes-3D","(new_attributes)","<p>Allows you to set all the attributes at once by passing in a hash with keys\nmatching the attribute names …\n"],["attributes_before_type_cast","ActiveRecord::AttributeMethods::BeforeTypeCast","classes/ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-attributes_before_type_cast","()","<p>Returns a hash of attributes before typecasting and deserialization.\n"],["attributes_before_type_cast","ActiveRecord::AttributeMethods::Serialization","classes/ActiveRecord/AttributeMethods/Serialization.html#method-i-attributes_before_type_cast","()",""],["attributes_protected_by_default","ActiveModel::MassAssignmentSecurity::ClassMethods","classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-attributes_protected_by_default","()",""],["attributes_protected_by_default","ActiveModel::SecurePassword::ClassMethods","classes/ActiveModel/SecurePassword/ClassMethods.html#method-c-attributes_protected_by_default","()",""],["audio_path","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-audio_path","(source)","<p>Computes the path to an audio asset in the public audios directory. Full\npaths from the document root …\n"],["audio_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-audio_tag","(source, options = {})","<p>Returns an html audio tag for the <code>source</code>. The\n<code>source</code> can be full path or file that exists in your public …\n"],["auth_type","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-auth_type","()",""],["auth_type=","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-auth_type-3D","(auth_type)",""],["auth_type=","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-i-auth_type-3D","(auth_type)","<p>Sets the auth type for remote service.\n"],["authenticate","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-authenticate","(request, &login_procedure)",""],["authenticate","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-authenticate","(request, realm, &password_procedure)","<p>Returns false on a valid response, true otherwise\n"],["authenticate","ActionController::HttpAuthentication::Token","classes/ActionController/HttpAuthentication/Token.html#method-i-authenticate","(controller, &login_procedure)","<p>If token Authorization header is present, call the login procedure with the\npresent token and options. …\n"],["authenticate","ActiveModel::SecurePassword::InstanceMethodsOnActivation","classes/ActiveModel/SecurePassword/InstanceMethodsOnActivation.html#method-i-authenticate","(unencrypted_password)","<p>Returns self if the password is correct, otherwise false.\n"],["authenticate_or_request_with_http_basic","ActionController::HttpAuthentication::Basic::ControllerMethods","classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-authenticate_or_request_with_http_basic","(realm = \"Application\", &login_procedure)",""],["authenticate_or_request_with_http_digest","ActionController::HttpAuthentication::Digest::ControllerMethods","classes/ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-authenticate_or_request_with_http_digest","(realm = \"Application\", &password_procedure)",""],["authenticate_or_request_with_http_token","ActionController::HttpAuthentication::Token::ControllerMethods","classes/ActionController/HttpAuthentication/Token/ControllerMethods.html#method-i-authenticate_or_request_with_http_token","(realm = \"Application\", &login_procedure)",""],["authenticate_with_http_basic","ActionController::HttpAuthentication::Basic::ControllerMethods","classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-authenticate_with_http_basic","(&login_procedure)",""],["authenticate_with_http_digest","ActionController::HttpAuthentication::Digest::ControllerMethods","classes/ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-authenticate_with_http_digest","(realm = \"Application\", &password_procedure)","<p>Authenticate with HTTP Digest, returns true or false\n"],["authenticate_with_http_token","ActionController::HttpAuthentication::Token::ControllerMethods","classes/ActionController/HttpAuthentication/Token/ControllerMethods.html#method-i-authenticate_with_http_token","(&login_procedure)",""],["authentication_header","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-authentication_header","(controller, realm)",""],["authentication_request","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-authentication_request","(controller, realm)",""],["authentication_request","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-authentication_request","(controller, realm, message = nil)",""],["authentication_request","ActionController::HttpAuthentication::Token","classes/ActionController/HttpAuthentication/Token.html#method-i-authentication_request","(controller, realm)","<p>Sets a WWW-Authenticate to let the client know a token is desired.\n<p>controller - ActionController::Base …\n"],["authorization","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-authorization","()","<p>Returns the authorization header regardless of whether it was specified\ndirectly or through one of the …\n"],["auto_discovery_link_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-auto_discovery_link_tag","(type = :rss, url_options = {}, tag_options = {})","<p>Returns a link tag that browsers and news readers can use to auto-detect an\nRSS or ATOM feed. The <code>type</code> …\n"],["auto_flushing=","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-auto_flushing-3D","(period)","<p>Set the auto-flush period. Set to true to flush after every log message, to\nan integer to flush every …\n"],["autoload","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-i-autoload","(const_name, path = @@at_path)",""],["autoload_at","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-i-autoload_at","(path)",""],["autoload_once","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-autoload_once","()",""],["autoload_once_paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-autoload_once_paths","()",""],["autoload_paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-autoload_paths","()",""],["autoload_paths","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-autoload_paths","()",""],["autoload_under","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-i-autoload_under","(path)",""],["autoloads","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-i-autoloads","()",""],["available_action?","AbstractController::Base","classes/AbstractController/Base.html#method-i-available_action-3F","(action_name)","<p>Returns true if a method for the action is available and can be dispatched,\nfalse otherwise.\n<p>Notice that …\n"],["available_views","Erb::Generators::ScaffoldGenerator","classes/Erb/Generators/ScaffoldGenerator.html#method-i-available_views","()",""],["average","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-average","(column_name, options = {})","<p>Calculates the average value on a given column. Returns <code>nil</code> if\nthere’s no row. See <code>calculate</code> for examples …\n"],["backend","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-backend","()",""],["backend=","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-backend-3D","(name)",""],["backend=","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-backend-3D","(name)",""],["backtrace_cleaner","Rails","classes/Rails.html#method-c-backtrace_cleaner","()",""],["bang?","ActiveRecord::DynamicFinderMatch","classes/ActiveRecord/DynamicFinderMatch.html#method-i-bang-3F","()",""],["banner","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-c-banner","()",""],["banner","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-banner","()","<p>Use Rails default banner.\n"],["banner","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-c-banner","()",""],["base_class","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-base_class","()","<p>Returns the base AR subclass that this class descends from. If A extends\nAR::Base, A.base_class will …\n"],["base_name","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-base_name","()","<p>Sets the base_name taking into account the current class namespace.\n"],["base_root","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-base_root","()","<p>Returns the base root for a common set of generators. This is used to\ndynamically guess the default source …\n"],["basename","ActiveRecord::MigrationProxy","classes/ActiveRecord/MigrationProxy.html#method-i-basename","()",""],["becomes","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-becomes","(klass)","<p>Returns an instance of the specified <code>klass</code> with the attributes\nof the current record. This is mostly …\n"],["before","ActionDispatch::Callbacks","classes/ActionDispatch/Callbacks.html#method-c-before","(*args, &block)",""],["before","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-before","()",""],["before_configuration","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-before_configuration","(&block)","<p>First configurable block to run. Called before any initializers are run.\n"],["before_eager_load","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-before_eager_load","(&block)","<p>Third configurable block to run. Does not run if config.cache_classes set\nto false.\n"],["before_filter","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-before_filter","","<p>Append a before filter. See _insert_callbacks for parameter details.\n"],["before_filters","ActionController::Testing::ClassMethods","classes/ActionController/Testing/ClassMethods.html#method-i-before_filters","()",""],["before_initialize","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-before_initialize","(&block)","<p>Second configurable block to run. Called before frameworks initialize.\n"],["before_validation","ActiveModel::Validations::Callbacks::ClassMethods","classes/ActiveModel/Validations/Callbacks/ClassMethods.html#method-i-before_validation","(*args, &block)",""],["begin_db_transaction","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-begin_db_transaction","()",""],["begin_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-begin_db_transaction","()","<p>Begins the transaction (and turns off auto-committing).\n"],["begin_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-begin_db_transaction","()","<p>Begins a transaction.\n"],["beginning_of_day","Date","classes/Date.html#method-i-beginning_of_day","()","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],["beginning_of_day","DateTime","classes/DateTime.html#method-i-beginning_of_day","()","<p>Returns a new DateTime representing the start of the day (0:00)\n"],["beginning_of_day","Time","classes/Time.html#method-i-beginning_of_day","()","<p>Returns a new Time representing the start of the day (0:00)\n"],["beginning_of_hour","DateTime","classes/DateTime.html#method-i-beginning_of_hour","()","<p>Returns a new DateTime representing the start of the hour (hh:00:00)\n"],["beginning_of_hour","Time","classes/Time.html#method-i-beginning_of_hour","()","<p>Returns a new Time representing the start of the hour (x:00)\n"],["beginning_of_month","Date","classes/Date.html#method-i-beginning_of_month","()","<p>Returns a new ; DateTime objects will have time set to 0:00DateTime\nrepresenting the start of the month …\n"],["beginning_of_month","Time","classes/Time.html#method-i-beginning_of_month","()","<p>Returns a new Time representing the start of the month (1st of the month,\n0:00)\n"],["beginning_of_quarter","Date","classes/Date.html#method-i-beginning_of_quarter","()","<p>Returns a new Date/DateTime representing the start of the quarter (1st of\njanuary, april, july, october; …\n"],["beginning_of_quarter","Time","classes/Time.html#method-i-beginning_of_quarter","()","<p>Returns  a new Time representing the start of the quarter (1st of january,\napril, july, october, 0:00) …\n"],["beginning_of_week","Date","classes/Date.html#method-i-beginning_of_week","(start_day = :monday)","<p>Returns a new <code>Date</code>/<code>DateTime</code> representing the\nstart of this week. Week is assumed to start on <code>start_day</code> …\n"],["beginning_of_week","Time","classes/Time.html#method-i-beginning_of_week","(start_day = :monday)","<p>Returns a new Time representing the “start” of this week, week starts on\nstart_day (default …\n"],["beginning_of_year","Date","classes/Date.html#method-i-beginning_of_year","()","<p>Returns a new Date/DateTime representing the start of the year (1st of\njanuary; DateTime objects will …\n"],["beginning_of_year","Time","classes/Time.html#method-i-beginning_of_year","()","<p>Returns a new Time representing the start of the year (1st of january,\n0:00)\n"],["behavior","ActiveSupport::Deprecation","classes/ActiveSupport/Deprecation.html#method-c-behavior","()","<p>Returns the set behavior or if one isn’t set, defaults to\n<code>:stderr</code>\n"],["behavior=","ActiveSupport::Deprecation","classes/ActiveSupport/Deprecation.html#method-c-behavior-3D","(behavior)","<p>Sets the behavior to the specified value. Can be a single value or an\narray.\n<p>Examples\n\n<pre>ActiveSupport::Deprecation.behavior ...</pre>\n"],["belongs_to","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-belongs_to","(name, options = {})","<p>Specifies a one-to-one association with another class. This method should\nonly be used if this class …\n"],["belongs_to","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-belongs_to","(*args)",""],["belongs_to","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-belongs_to","(*args)",""],["belongs_to?","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-belongs_to-3F","(group)",""],["benchmark","ActiveSupport::Benchmarkable","classes/ActiveSupport/Benchmarkable.html#method-i-benchmark","(message = \"Benchmarking\", options = {})","<p>Allows you to measure the execution time of a block in a template and\nrecords the result to the log. …\n"],["benchmark","ActiveSupport::Testing::Performance::Metrics::Base","classes/ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-benchmark","()",""],["best_install_method","RailsEnvironment","classes/RailsEnvironment.html#method-i-best_install_method","()",""],["between?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-between-3F","(min, max)",""],["bind","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-bind","(value)",""],["bind","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-bind","(context)",""],["blank?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-blank-3F","()",""],["blank?","FalseClass","classes/FalseClass.html#method-i-blank-3F","()","<p><code>false</code> is blank:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">false</span>.<span class=\"ruby-identifier\">blank?</span> <span class=\"ruby-comment\"># =&gt; true</span>\n</pre>\n"],["blank?","NilClass","classes/NilClass.html#method-i-blank-3F","()","<p><code>nil</code> is blank:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">blank?</span> <span class=\"ruby-comment\"># =&gt; true</span>\n</pre>\n"],["blank?","Object","classes/Object.html#method-i-blank-3F","()","<p>An object is blank if it’s false, empty, or a whitespace string. For\nexample, “”, “   …\n"],["blank?","String","classes/String.html#method-i-blank-3F","()","<p>A string is blank if it’s empty or contains whitespaces only:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;&quot;</span>.<span class=\"ruby-identifier\">blank?</span>                 <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-string\">&quot;   ...\n</span></pre>\n"],["blank?","TrueClass","classes/TrueClass.html#method-i-blank-3F","()","<p><code>true</code> is not blank:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">true</span>.<span class=\"ruby-identifier\">blank?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n</pre>\n"],["block_format","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-block_format","(text)","<p>Uses Text::Format to take the text and format it, indented two spaces for\neach line, and wrapped at 72 …\n"],["body","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-body","()","<p>The request body is an IO input stream. If the RAW_POST_DATA environment\nvariable is already set, wrap …\n"],["body","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-body","()",""],["body=","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-body-3D","(body)",""],["body_parts","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-body_parts","()",""],["breakpoint","Kernel","classes/Kernel.html#method-i-breakpoint","()",""],["build","ActionController::Middleware","classes/ActionController/Middleware.html#method-c-build","(app)",""],["build","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-build","(app = nil, &block)",""],["build","ActionDispatch::MiddlewareStack::Middleware","classes/ActionDispatch/MiddlewareStack/Middleware.html#method-i-build","(app)",""],["build","ActionView::Resolver::Path","classes/ActionView/Resolver/Path.html#method-c-build","(name, prefix, partial)",""],["build","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-build","(*args, &block)",""],["build","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-build","(attributes = {})","<p>Builds a new, unsaved record using the default values from the remote\nserver so that it can be used with …\n"],["build","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-build","(klass, params=nil)","<p>GET new POST create\n"],["build","Rails::Generators::AppBase","classes/Rails/Generators/AppBase.html#method-i-build","(meth, *args)",""],["build_arel","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-build_arel","()",""],["build_mem_cache","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-c-build_mem_cache","(*addresses)",""],["build_original_fullpath","Rails::Application","classes/Rails/Application.html#method-i-build_original_fullpath","(env)",""],["builder","Rails::Generators::AppBase","classes/Rails/Generators/AppBase.html#method-i-builder","()",""],["bundle_command","Rails::Generators::AppBase","classes/Rails/Generators/AppBase.html#method-i-bundle_command","(command)",""],["button","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-button","(value=nil, options={})","<p>Add the submit button for the given form. When no value is given, it checks\nif the object is a new resource …\n"],["button_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-button_tag","(content_or_options = nil, options = nil, &block)","<p>Creates a button element that defines a <code>submit</code> button,\n<code>reset</code>button or a generic button which can be used …\n"],["button_to","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-button_to","(name, options = {}, html_options = {})","<p>Generates a form containing a single button that submits to the URL created\nby the set of <code>options</code>. This …\n"],["button_to_function","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-button_to_function","(name, function=nil, html_options={})","<p>Returns a button whose <code>onclick</code> handler triggers the passed\nJavaScript.\n<p>The helper receives a name, JavaScript …\n"],["byte","Numeric","classes/Numeric.html#method-i-byte","()",""],["bytes","Numeric","classes/Numeric.html#method-i-bytes","()","<p>Enables the use of byte calculations and declarations, like 45.bytes +\n2.6.megabytes\n"],["cache","ActionController::Caching","classes/ActionController/Caching.html#method-i-cache","(key, options = {}, &block)","<p>Convenience accessor\n"],["cache","ActionView::Helpers::CacheHelper","classes/ActionView/Helpers/CacheHelper.html#method-i-cache","(name = {}, options = nil, &block)","<p>This helper exposes a method for caching fragments of a view  rather than\nan entire action or page.  …\n"],["cache","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-cache","()","<p>Enable the query cache within the block.\n"],["cache","ActiveRecord::QueryCache::ClassMethods","classes/ActiveRecord/QueryCache/ClassMethods.html#method-i-cache","(&block)","<p>Enable the query cache within the block if Active Record is configured.\n"],["cache","Rails","classes/Rails.html#method-c-cache","()",""],["cache_attribute?","ActiveRecord::AttributeMethods::Read::ClassMethods","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-cache_attribute-3F","(attr_name)","<p>Returns <code>true</code> if the provided attribute is being cached.\n"],["cache_attributes","ActiveRecord::AttributeMethods::Read::ClassMethods","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-cache_attributes","(*attribute_names)","<p><code>cache_attributes</code> allows you to declare which converted\nattribute values should be cached. Usually caching ...\n"],["cache_fixtures","ActiveRecord::Fixtures","classes/ActiveRecord/Fixtures.html#method-c-cache_fixtures","(connection, fixtures_map)",""],["cache_for_connection","ActiveRecord::Fixtures","classes/ActiveRecord/Fixtures.html#method-c-cache_for_connection","(connection)",""],["cache_key","ActiveRecord::Integration","classes/ActiveRecord/Integration.html#method-i-cache_key","()","<p>Returns a cache key that can be used to identify this record.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Product</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">cache_key</span>     <span class=\"ruby-comment\"># =&gt; &quot;products/new&quot; ...</span>\n</pre>\n"],["cache_page","ActionController::Caching::Pages","classes/ActionController/Caching/Pages.html#method-i-cache_page","(content = nil, options = nil, gzip = Zlib::BEST_COMPRESSION)","<p>Manually cache the <code>content</code> in the key determined by\n<code>options</code>. If no content is provided, the contents …\n"],["cache_page","ActionController::Caching::Pages::ClassMethods","classes/ActionController/Caching/Pages/ClassMethods.html#method-i-cache_page","(content, path, extension = nil, gzip = Zlib::BEST_COMPRESSION)","<p>Manually cache the <code>content</code> in the key determined by\n<code>path</code>. Example:\n\n<pre>cache_page &quot;I'm the cached content&quot;, ...</pre>\n"],["cache_store","ActionController::Caching::ConfigMethods","classes/ActionController/Caching/ConfigMethods.html#method-i-cache_store","()",""],["cache_store=","ActionController::Caching::ConfigMethods","classes/ActionController/Caching/ConfigMethods.html#method-i-cache_store-3D","(store)",""],["cache_template_loading","ActionView::Base","classes/ActionView/Base.html#method-c-cache_template_loading","()",""],["cache_template_loading=","ActionView::Base","classes/ActionView/Base.html#method-c-cache_template_loading-3D","(value)",""],["cached_attributes","ActiveRecord::AttributeMethods::Read::ClassMethods","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-cached_attributes","()","<p>Returns the attributes which are cached. By default time related columns\nwith datatype <code>:datetime, :timestamp,</code> …\n"],["cached_fixtures","ActiveRecord::Fixtures","classes/ActiveRecord/Fixtures.html#method-c-cached_fixtures","(connection, keys_to_fetch = nil)",""],["caches_action","ActionController::Caching::Actions::ClassMethods","classes/ActionController/Caching/Actions/ClassMethods.html#method-i-caches_action","(*actions)","<p>Declares that <code>actions</code> should be cached. See\nActionController::Caching::Actions for details.\n"],["caches_page","ActionController::Caching::Pages::ClassMethods","classes/ActionController/Caching/Pages/ClassMethods.html#method-i-caches_page","(*actions)","<p>Caches the <code>actions</code> using the page-caching approach that’ll\nstore the cache in a path within the page_cache_directory …\n"],["caching_allowed?","ActionController::Caching","classes/ActionController/Caching.html#method-i-caching_allowed-3F","()",""],["calculate","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-calculate","(operation, column_name, options = {})","<p>This calculates aggregate values in the given column. Methods for count,\nsum, average, minimum, and maximum …\n"],["calculate_ip","ActionDispatch::RemoteIp::GetIp","classes/ActionDispatch/RemoteIp/GetIp.html#method-i-calculate_ip","()","<p>Determines originating IP address. REMOTE_ADDR is the standard but will be\nwrong if the user is behind …\n"],["call","ActionController::Metal","classes/ActionController/Metal.html#method-c-call","(env)","<p>Makes the controller a rack endpoint that points to the action in the given\nenv’s action_dispatch.request.path_parameters …\n"],["call","ActionController::Middleware::ActionMiddleware","classes/ActionController/Middleware/ActionMiddleware.html#method-i-call","(env)",""],["call","ActionController::Responder","classes/ActionController/Responder.html#method-c-call","(*args)","<p>Initializes a new responder an invoke the proper format. If the format is\nnot defined, call to_format. …\n"],["call","ActionDispatch::BestStandardsSupport","classes/ActionDispatch/BestStandardsSupport.html#method-i-call","(env)",""],["call","ActionDispatch::Callbacks","classes/ActionDispatch/Callbacks.html#method-i-call","(env)",""],["call","ActionDispatch::Cookies","classes/ActionDispatch/Cookies.html#method-i-call","(env)",""],["call","ActionDispatch::DebugExceptions","classes/ActionDispatch/DebugExceptions.html#method-i-call","(env)",""],["call","ActionDispatch::FileHandler","classes/ActionDispatch/FileHandler.html#method-i-call","(env)",""],["call","ActionDispatch::Flash","classes/ActionDispatch/Flash.html#method-i-call","(env)",""],["call","ActionDispatch::Head","classes/ActionDispatch/Head.html#method-i-call","(env)",""],["call","ActionDispatch::ParamsParser","classes/ActionDispatch/ParamsParser.html#method-i-call","(env)",""],["call","ActionDispatch::PublicExceptions","classes/ActionDispatch/PublicExceptions.html#method-i-call","(env)",""],["call","ActionDispatch::Reloader","classes/ActionDispatch/Reloader.html#method-i-call","(env)",""],["call","ActionDispatch::RemoteIp","classes/ActionDispatch/RemoteIp.html#method-i-call","(env)",""],["call","ActionDispatch::RequestId","classes/ActionDispatch/RequestId.html#method-i-call","(env)",""],["call","ActionDispatch::Rescue","classes/ActionDispatch/Rescue.html#method-i-call","(env)",""],["call","ActionDispatch::ShowExceptions","classes/ActionDispatch/ShowExceptions.html#method-i-call","(env)",""],["call","ActionDispatch::Static","classes/ActionDispatch/Static.html#method-i-call","(env)",""],["call","ActionView::Template::Handlers::Builder","classes/ActionView/Template/Handlers/Builder.html#method-i-call","(template)",""],["call","ActionView::Template::Handlers::ERB","classes/ActionView/Template/Handlers/ERB.html#method-i-call","(template)",""],["call","ActionView::Template::Handlers::ERB","classes/ActionView/Template/Handlers/ERB.html#method-c-call","(template)",""],["call","ActiveRecord::ConnectionAdapters::ConnectionManagement","classes/ActiveRecord/ConnectionAdapters/ConnectionManagement.html#method-i-call","(env)",""],["call","ActiveRecord::IdentityMap::Middleware","classes/ActiveRecord/IdentityMap/Middleware.html#method-i-call","(env)",""],["call","ActiveRecord::QueryCache","classes/ActiveRecord/QueryCache.html#method-i-call","(env)",""],["call","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-i-call","(message, *args)",""],["call","I18n::ExceptionHandler","classes/I18n/ExceptionHandler.html#method-i-call","(exception, locale, key, options)",""],["call","Logger::SimpleFormatter","classes/Logger/SimpleFormatter.html#method-i-call","(severity, timestamp, progname, msg)","<p>This method is invoked when a log event occurs\n"],["call","Rails::Application","classes/Rails/Application.html#method-i-call","(env)",""],["call","Rails::Engine","classes/Rails/Engine.html#method-i-call","(env)",""],["call","Rails::Rack::Debugger","classes/Rails/Rack/Debugger.html#method-i-call","(env)",""],["call","Rails::Rack::LogTailer","classes/Rails/Rack/LogTailer.html#method-i-call","(env)",""],["call","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-i-call","(env)",""],["call_app","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-i-call_app","(request, env)",""],["camelcase","String","classes/String.html#method-i-camelcase","(first_letter = :upper)",""],["camelize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-camelize","(term, uppercase_first_letter = true)","<p>By default, <code>camelize</code> converts strings to UpperCamelCase. If\nthe argument to <code>camelize</code> is set to <code>:lower</code> …\n"],["camelize","String","classes/String.html#method-i-camelize","(first_letter = :upper)","<p>By default, <code>camelize</code> converts strings to UpperCamelCase. If\nthe argument to camelize is set to <code>:lower</code> …\n"],["camelized","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-camelized","()",""],["camelized","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-camelized","()",""],["capify!","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-capify-21","()","<p>Just run the capify command in root\n<p>Example\n\n<pre>capify!</pre>\n"],["capitalize","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-capitalize","()","<p>Converts the first character to uppercase and the remainder to lowercase.\n<p>Example:\n\n<pre>'über'.mb_chars.capitalize.to_s ...</pre>\n"],["capture","ActionView::Helpers::CaptureHelper","classes/ActionView/Helpers/CaptureHelper.html#method-i-capture","(*args)","<p>The capture method allows you to extract part of a template into a\nvariable. You can then use this variable …\n"],["capture","Kernel","classes/Kernel.html#method-i-capture","(stream)","<p>Captures the given stream and returns it:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">stream</span> = <span class=\"ruby-identifier\">capture</span>(:<span class=\"ruby-identifier\">stdout</span>) { <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-string\">&quot;Cool&quot;</span> }\n<span class=\"ruby-identifier\">stream</span> <span class=\"ruby-comment\"># =&gt; &quot;Cool\\n&quot;</span>\n</pre>\n"],["case_insensitive_comparison","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-case_insensitive_comparison","(table, attribute, column, value)",""],["case_insensitive_comparison","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-case_insensitive_comparison","(table, attribute, column, value)",""],["case_sensitive_equality_operator","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-case_sensitive_equality_operator","()",""],["case_sensitive_modifier","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-case_sensitive_modifier","(node)",""],["case_sensitive_modifier","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-case_sensitive_modifier","(node)",""],["cattr_accessor","Class","classes/Class.html#method-i-cattr_accessor","(*syms, &blk)","<p>Defines both class and instance accessors for class attributes.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-identifier\">cattr_accessor</span> :<span class=\"ruby-identifier\">hair_colors</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["cattr_reader","Class","classes/Class.html#method-i-cattr_reader","(*syms)","<p>Defines a class attribute if it’s not defined and creates a reader method\nthat returns the attribute …\n"],["cattr_writer","Class","classes/Class.html#method-i-cattr_writer","(*syms)","<p>Defines a class attribute if it’s not defined and creates a writer method\nto allow assignment to the …\n"],["cdata_block","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-cdata_block","(string)",""],["cdata_section","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-cdata_section","(content)","<p>Returns a CDATA section with the given <code>content</code>. CDATA sections\nare used to escape blocks of text containing …\n"],["center","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-center","(integer, padstr=' ')","<p>Works just like <code>String#center</code>, only integer specifies\ncharacters instead of bytes.\n<p>Example:\n\n<pre>&quot;¾ cup&quot;.mb_chars.center(8).to_s ...</pre>\n"],["change","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-change","(column_name, type, options = {})","<p>Changes the column’s definition according to the new options. See\nTableDefinition#column for details …\n"],["change","Date","classes/Date.html#method-i-change","(options)","<p>Returns a new Date where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],["change","DateTime","classes/DateTime.html#method-i-change","(options)","<p>Returns a new DateTime where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],["change","Time","classes/Time.html#method-i-change","(options)","<p>Returns a new Time where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],["change_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-change_column","(table_name, column_name, type, options = {})","<p>Changes the column of a table.\n"],["change_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column","(table_name, column_name, type, options = {})","<p>Changes the column’s definition according to the new options. See\nTableDefinition#column for details …\n"],["change_column_default","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-change_column_default","(table_name, column_name, default)",""],["change_column_default","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-change_column_default","(table_name, column_name, default)","<p>Changes the default value of a table column.\n"],["change_column_default","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column_default","(table_name, column_name, default)","<p>Sets a new default value for a column.\n<p>Examples\n\n<pre>change_column_default(:suppliers, :qualification, 'new') ...</pre>\n"],["change_column_null","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_null","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_null","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-change_column_sql","(table_name, column_name, type, options = {})",""],["change_default","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-change_default","(column_name, default)","<p>Sets a new default value for a column. See\nSchemaStatements#change_column_default\n<p>Examples\n\n<pre>t.change_default(:qualification, ...</pre>\n"],["change_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_table","(table_name, options = {})","<p>A block for changing columns in <code>table</code>.\n<p>Example\n\n<pre># change_table() yields a Table instance\nchange_table(:suppliers) ...</pre>\n"],["changed","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changed","()","<p>List of attributes with unsaved changes.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changed</span> <span class=\"ruby-comment\"># =&gt; []</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">name</span> = <span class=\"ruby-string\">'bob'</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changed</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["changed?","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changed-3F","()","<p>Returns true if any attribute have unsaved changes, false otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changed?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["changed_attributes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changed_attributes","()","<p>Map of change <code>attr =&gt; original value</code>.\n"],["changed_for_autosave?","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-changed_for_autosave-3F","()","<p>Returns whether or not this record has been changed in any way (including\nwhether any of its nested autosave …\n"],["changes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changes","()","<p>Map of changed attrs =&gt; [original value, new value].\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changes</span> <span class=\"ruby-comment\"># =&gt; {}</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">name</span> = <span class=\"ruby-string\">'bob'</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changes</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["characters","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-characters","(string)",""],["charset","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-charset","()","<p>Returns the database character set.\n"],["check_box","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-check_box","(method, options = {}, checked_value = \"1\", unchecked_value = \"0\")",""],["check_box","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-check_box","(object_name, method, options = {}, checked_value = \"1\", unchecked_value = \"0\")","<p>Returns a checkbox tag tailored for accessing a specified attribute\n(identified by <code>method</code>) on an object …\n"],["check_box_checked?","ActionView::Helpers::InstanceTag","classes/ActionView/Helpers/InstanceTag.html#method-c-check_box_checked-3F","(value, checked_value)",""],["check_box_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-check_box_tag","(name, value = \"1\", checked = false, options = {})","<p>Creates a check box form input tag.\n<p>Options\n<p><code>:disabled</code> - If set to true, the user will not be able to use\n...\n"],["check_class_collision","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-c-check_class_collision","(options={})","<p>Add a class collisions name to be checked on class initialization. You can\nsupply a hash with a :prefix …\n"],["check_validity!","ActiveModel::EachValidator","classes/ActiveModel/EachValidator.html#method-i-check_validity-21","()","<p>Hook method that gets called by the initializer allowing verification that\nthe arguments supplied are …\n"],["check_validity!","ActiveModel::Validations::ExclusionValidator","classes/ActiveModel/Validations/ExclusionValidator.html#method-i-check_validity-21","()",""],["check_validity!","ActiveModel::Validations::FormatValidator","classes/ActiveModel/Validations/FormatValidator.html#method-i-check_validity-21","()",""],["check_validity!","ActiveModel::Validations::InclusionValidator","classes/ActiveModel/Validations/InclusionValidator.html#method-i-check_validity-21","()",""],["check_validity!","ActiveModel::Validations::LengthValidator","classes/ActiveModel/Validations/LengthValidator.html#method-i-check_validity-21","()",""],["check_validity!","ActiveModel::Validations::NumericalityValidator","classes/ActiveModel/Validations/NumericalityValidator.html#method-i-check_validity-21","()",""],["checkin","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkin","(conn)","<p>Check-in a database connection back into the pool, indicating that you no\nlonger need this connection. …\n"],["checkout","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkout","()","<p>Check-out a database connection from the pool, indicating that you want to\nuse it. You should call #checkin …\n"],["children","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-children","()",""],["civil_from_format","DateTime","classes/DateTime.html#method-c-civil_from_format","(utc_or_local, year, month=1, day=1, hour=0, min=0, sec=0)",""],["class_attribute","Class","classes/Class.html#method-i-class_attribute","(*attrs)","<p>Declare a class-level attribute whose value is inheritable by subclasses.\nSubclasses can change their …\n"],["class_eval","Kernel","classes/Kernel.html#method-i-class_eval","(*args, &block)","<p>class_eval on an object acts like singleton_class.class_eval.\n"],["class_name","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-class_name","()","<p>Returns the class name for the macro.\n<p><code>composed_of :balance, :class_name =&gt; 'Money'</code> returns\n<code>'Money'</code> ...\n"],["class_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-class_name","()",""],["class_of_active_record_descendant","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-class_of_active_record_descendant","(klass)","<p>Returns the class descending directly from ActiveRecord::Base or an\nabstract class, if any, in the inheritance …\n"],["class_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-class_path","()",""],["classify","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-classify","(table_name)","<p>Create a class name from a plural table name like Rails does for table\nnames to models. Note that this …\n"],["classify","String","classes/String.html#method-i-classify","()","<p>Create a class name from a plural table name like Rails does for table\nnames to models. Note that this …\n"],["clean","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-clean","(backtrace, kind = :silent)","<p>Returns the backtrace after all filters and silencers have been run against\nit. Filters run first, then …\n"],["cleanup","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-cleanup","(options = nil)",""],["cleanup","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-cleanup","(options = nil)",""],["cleanup","ActiveSupport::Cache::NullStore","classes/ActiveSupport/Cache/NullStore.html#method-i-cleanup","(options = nil)",""],["cleanup","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-cleanup","(options = nil)","<p>Cleanup the cache by removing expired entries.\n<p>Options are passed to the underlying cache implementation. …\n"],["cleanup!","ActionDispatch::Reloader","classes/ActionDispatch/Reloader.html#method-c-cleanup-21","()","<p>Execute all cleanup callbacks.\n"],["clear","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-clear","()",""],["clear","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-clear","()","<p>Clear the messages\n"],["clear","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-clear","()",""],["clear","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-clear","()",""],["clear","ActiveRecord::ConnectionAdapters::SQLiteAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter/StatementPool.html#method-i-clear","()",""],["clear","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-clear","()",""],["clear","ActiveRecord::IdentityMap","classes/ActiveRecord/IdentityMap.html#method-c-clear","()",""],["clear","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-i-clear","(options = nil)","<p>Clear the entire cache on all memcached servers. This method should be used\nwith care when shared cache …\n"],["clear","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::Cache::NullStore","classes/ActiveSupport/Cache/NullStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-clear","(options = nil)","<p>Clear the entire cache. Be careful with this method since it could affect\nother processes if shared cache …\n"],["clear","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-c-clear","()",""],["clear","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-clear","(scope = :all)","<p>Clears the loaded inflections within a given scope (default is\n<code>:all</code>). Give the scope as a symbol of the …\n"],["clear","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-clear","()",""],["clear!","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-clear-21","()","<p>Clears out internal caches\n"],["clear!","ActiveSupport::Dependencies::ClassCache","classes/ActiveSupport/Dependencies/ClassCache.html#method-i-clear-21","()",""],["clear_action_methods!","AbstractController::Base","classes/AbstractController/Base.html#method-c-clear_action_methods-21","()","<p>action_methods are cached and there is sometimes need to refresh them.\nclear_action_methods! allows you …\n"],["clear_active_connections!","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-clear_active_connections-21","()",""],["clear_active_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_active_connections-21","()","<p>Returns any connections in use by the current thread back to the pool.\n"],["clear_all_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_all_connections-21","()",""],["clear_cache","ActionView::Resolver","classes/ActionView/Resolver.html#method-i-clear_cache","()",""],["clear_cache!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-clear_cache-21","()","<p>Clear any caching the database adapter may be doing, for example clearing\nthe prepared statement cache. …\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_cache-21","()",""],["clear_cache!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_helpers","AbstractController::Helpers::ClassMethods","classes/AbstractController/Helpers/ClassMethods.html#method-i-clear_helpers","()","<p>Clears up all existing helpers in this class, only keeping the helper with\nthe same name as this class. …\n"],["clear_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-clear_query_cache","()","<p>Clears the query cache.\n<p>One reason you may wish to call this method explicitly is between queries\nthat …\n"],["clear_reloadable_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_reloadable_connections-21","()","<p>Clears the cache which maps classes.\n"],["clear_reloadable_connections!","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_reloadable_connections-21","()","<p>Clears the cache which maps classes.\n"],["clear_respond_to","ActionController::MimeResponds::ClassMethods","classes/ActionController/MimeResponds/ClassMethods.html#method-i-clear_respond_to","()","<p>Clear all mime types in <code>respond_to</code>.\n"],["clear_stale_cached_connections!","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_stale_cached_connections-21","()","<p>Return any checked-out connections back to the pool by threads that are no\nlonger alive.\n"],["clear_table_cache!","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-clear_table_cache-21","(table_name)","<p>Clear out internal caches for table with <code>table_name</code>.\n"],["clear_tags!","ActiveSupport::TaggedLogging","classes/ActiveSupport/TaggedLogging.html#method-i-clear_tags-21","()",""],["client_encoding","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-client_encoding","()","<p>Get the client encoding for this database\n"],["client_min_messages","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-client_min_messages","()","<p>Returns the current client message level.\n"],["client_min_messages=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-client_min_messages-3D","(level)","<p>Set the client message level.\n"],["clone","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-clone","()","<p>Returns a clone of the resource that hasn’t been assigned an\n<code>id</code> yet and is treated as a new resource. …\n"],["clone_empty","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-clone_empty","()",""],["close","ActionDispatch::BodyProxy","classes/ActionDispatch/BodyProxy.html#method-i-close","()",""],["close","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-close","()",""],["close","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-close","()","<p>Check the connection back in to the connection pool\n"],["close","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-close","()",""],["close","ActiveSupport::Gzip::Stream","classes/ActiveSupport/Gzip/Stream.html#method-i-close","()",""],["closed?","ActionDispatch::BodyProxy","classes/ActionDispatch/BodyProxy.html#method-i-closed-3F","()",""],["code","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-code","()","<p>Returns a String to ensure compatibility with Net::HTTPResponse\n"],["collation","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-collation","()","<p>Returns the database collation strategy.\n"],["collection","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-collection","()","<p>To add a route to the collection:\n\n<pre>resources :photos do\n  collection do\n    get 'search'\n  end\nend</pre>\n<p>This …\n"],["collection_name","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-collection_name","()",""],["collection_path","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-collection_path","(options = nil)",""],["collection_path","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-collection_path","(prefix_options = {}, query_options = nil)","<p>Gets the collection path for the REST resources.  If the\n<code>query_options</code> parameter is omitted, Rails will …\n"],["collection_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-collection_select","(method, collection, value_method, text_method, options = {}, html_options = {})",""],["collection_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_select","(object, method, collection, value_method, text_method, options = {}, html_options = {})","<p>Returns <code>&lt;select&gt;</code> and <code>&lt;option&gt;</code> tags\nfor the collection of existing return values of <code>method</code> …\n"],["color","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-i-color","(text, color, bold=false)","<p>Set color by using a string or one of the defined constants. If a third\noption is set to true, it also …\n"],["colorize_logging","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-colorize_logging","()",""],["colorize_logging=","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-colorize_logging-3D","(val)",""],["column","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-column","(column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["column","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column","(name, type, options = {})","<p>Instantiates a new column for the table. The <code>type</code> parameter is\nnormally one of the migrations native …\n"],["column_defaults","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-column_defaults","()","<p>Returns a hash where the keys are column names and the values are default\nvalues when instantiating the …\n"],["column_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-column_exists-3F","(table_name, column_name, type = nil, options = {})","<p>Checks to see if a column exists in a given table.\n<p>Examples\n\n<pre># Check a column exists\ncolumn_exists?(:suppliers, ...</pre>\n"],["column_exists?","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-column_exists-3F","(column_name, type = nil, options = {})","<p>Checks to see if a column exists. See SchemaStatements#column_exists?\n"],["column_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-column_name_length","()","<p>Returns the maximum length of a column name.\n"],["column_names","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-column_names","()","<p>Returns an array of column names as strings.\n"],["columns","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-columns","()",""],["columns","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-columns","(table_name, name = nil)","<p>Returns the list of all column definitions for a table.\n"],["columns","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-columns","(table = nil)","<p>Get the columns for a table\n"],["columns","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-columns","(table_name, name = nil)","<p>Returns an array of Column objects for the table specified by\n<code>table_name</code>. See the concrete implementation …\n"],["columns","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-columns","()","<p>Returns an array of column objects for the table associated with this\nclass.\n"],["columns_for_remove","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-columns_for_remove","(table_name, *column_names)",""],["columns_hash","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-columns_hash","()",""],["columns_hash","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-columns_hash","(table = nil)","<p>Get the columns for a table as a hash, key is the column name value is the\ncolumn object.\n"],["columns_hash","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-columns_hash","()","<p>Returns a hash of column objects for the table associated with this class.\n"],["columns_per_multicolumn_index","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-columns_per_multicolumn_index","()","<p>Returns the maximum number of columns in a multicolumn index.\n"],["columns_per_table","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-columns_per_table","()","<p>Returns the maximum number of columns per table.\n"],["comment_if","Rails::Generators::AppBase","classes/Rails/Generators/AppBase.html#method-i-comment_if","(value)",""],["commit_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-commit_db_transaction","()","<p>Commits the transaction (and turns on auto-committing).\n"],["commit_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-commit_db_transaction","()","<p>Commits a transaction.\n"],["commit_transaction_records","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-commit_transaction_records","()","<p>Send a commit message to all records after they have been committed.\n"],["comparable_time","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-comparable_time","()",""],["compare_with_coercion","Time","classes/Time.html#method-i-compare_with_coercion","(other)","<p>Layers additional behavior on Time#&lt;=&gt; so that DateTime and\nActiveSupport::TimeWithZone instances …\n"],["compare_without_coercion","Time","classes/Time.html#method-i-compare_without_coercion","(other)",""],["compile_methods!","ActiveSupport::Configurable::Configuration","classes/ActiveSupport/Configurable/Configuration.html#method-i-compile_methods-21","()",""],["compile_methods!","ActiveSupport::Configurable::Configuration","classes/ActiveSupport/Configurable/Configuration.html#method-c-compile_methods-21","(keys)","<p>compiles reader methods so we don’t have to go through method_missing\n"],["compiled_asset_path","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-compiled_asset_path","()",""],["compose","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-compose","()","<p>Performs composition on all the characters.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'é'</span>.<span class=\"ruby-identifier\">length</span>                       <span class=\"ruby-comment\"># =&gt; 3</span>\n<span class=\"ruby-string\">'é'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">compose</span>.<span class=\"ruby-identifier\">to_s</span>.<span class=\"ruby-identifier\">length</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["compose_codepoints","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-compose_codepoints","(codepoints)","<p>Compose decomposed characters to the composed form.\n"],["composed_of","ActiveRecord::Aggregations::ClassMethods","classes/ActiveRecord/Aggregations/ClassMethods.html#method-i-composed_of","(part_id, options = {})","<p>Adds reader and writer methods for manipulating a value object:\n<code>composed_of :address</code> adds <code>address</code> and …\n"],["compress","ActiveSupport::Gzip","classes/ActiveSupport/Gzip.html#method-c-compress","(source)","<p>Compresses a string using gzip.\n"],["compressed?","ActiveSupport::Cache::Entry","classes/ActiveSupport/Cache/Entry.html#method-i-compressed-3F","()",""],["compute_tags","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-i-compute_tags","(request)",""],["compute_type","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-compute_type","(type_name)","<p>Returns the class type of the record using the current module as a prefix.\nSo descendants of MyApp::Business::Account …\n"],["concat","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-concat","(string)","<p>The preferred method of outputting text in your views is to use the &lt;%=\n“text” %&gt; eRuby …\n"],["concat","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-concat","(value)",""],["conditional_layout?","AbstractController::Layouts","classes/AbstractController/Layouts.html#method-i-conditional_layout-3F","()",""],["conditional_layout?","AbstractController::Layouts::ClassMethods::LayoutConditions","classes/AbstractController/Layouts/ClassMethods/LayoutConditions.html#method-i-conditional_layout-3F","()","<p>Determines whether the current action has a layout by checking the action\nname against the :only and …\n"],["config","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-config","()",""],["config","ActiveSupport::Configurable","classes/ActiveSupport/Configurable.html#method-i-config","()","<p>Reads and writes attributes from a configuration <code>OrderedHash</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'active_support/configurable'</span>\n\n<span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["config","ActiveSupport::Configurable::ClassMethods","classes/ActiveSupport/Configurable/ClassMethods.html#method-i-config","()",""],["config","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-config","()",""],["config","Rails::Engine","classes/Rails/Engine.html#method-i-config","()",""],["config","Rails::Plugin","classes/Rails/Plugin.html#method-i-config","()",""],["config","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-config","()",""],["config","Rails::Railtie","classes/Rails/Railtie.html#method-i-config","()",""],["config_accessor","ActiveSupport::Configurable::ClassMethods","classes/ActiveSupport/Configurable/ClassMethods.html#method-i-config_accessor","(*names)","<p>Allows you to add shortcut so that you don’t have to refer to attribute\nthrough config. Also look at …\n"],["configru","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-configru","()",""],["configuration","Rails","classes/Rails.html#method-c-configuration","()","<p>The Configuration instance used to configure the Rails environment\n"],["configurations","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-configurations","","<p>Contains the database configuration - as is typically stored in\nconfig/database.yml - as a Hash.\n<p>For example, …\n"],["configure","ActiveSupport::Configurable::ClassMethods","classes/ActiveSupport/Configurable/ClassMethods.html#method-i-configure","()",""],["configure","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-configure","(&block)",""],["connected?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-connected-3F","()","<p>Returns true if Active Record is connected.\n"],["connected?","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connected-3F","(klass)","<p>Returns true if a connection that’s accessible to this class has already\nbeen opened.\n"],["connected?","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connected-3F","()","<p>Returns true if a connection has already been opened.\n"],["connection","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-connection","()","<p>Returns the connection currently associated with the class. This can also\nbe used to “borrow” …\n"],["connection","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-connection","()","<p>Returns the connection currently associated with the class. This can also\nbe used to “borrow” …\n"],["connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connection","()","<p>Retrieve the connection associated with the current thread, or call\n#checkout to obtain one if necessary. …\n"],["connection","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-connection","()",""],["connection","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-connection","()",""],["connection","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-connection","(refresh = false)",""],["connection","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-connection","(refresh = false)","<p>An instance of ActiveResource::Connection that is the base connection to\nthe remote service. The <code>refresh</code> …\n"],["connection_config","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-connection_config","()","<p>Returns the configuration of the associated connection as a hash:\n\n<pre>ActiveRecord::Base.connection_config ...</pre>\n"],["connection_handler","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-connection_handler","","<p>The connection handler\n"],["connection_id","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-connection_id","()",""],["connection_id=","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-connection_id-3D","(connection_id)",""],["connection_pool","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-connection_pool","()",""],["connection_pool","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-connection_pool","()",""],["consider_all_requests_local?","Rails::InfoController","classes/Rails/InfoController.html#method-i-consider_all_requests_local-3F","()",""],["console","Rails::Railtie","classes/Rails/Railtie.html#method-c-console","(&blk)",""],["constantize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-constantize","(camel_cased_word)","<p>Tries to find a constant with the name specified in the argument string:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;Module&quot;</span>.<span class=\"ruby-identifier\">constantize</span>     <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["constantize","String","classes/String.html#method-i-constantize","()","<p><code>constantize</code> tries to find a declared constant with the name\nspecified in the string. It raises a NameError ...\n"],["constraints","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-constraints","(constraints = {})","<p>Parameter Restriction\n<p>Allows you to constrain the nested routes based on a set of rules. For\ninstance, …\n"],["construct_join_dependency_for_association_find","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-construct_join_dependency_for_association_find","()",""],["construct_limited_ids_condition","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-construct_limited_ids_condition","(relation)",""],["construct_relation_for_association_calculations","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-construct_relation_for_association_calculations","()",""],["construct_relation_for_association_find","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-construct_relation_for_association_find","(join_dependency)",""],["consumes?","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-c-consumes-3F","(string)","<p>Returns <code>true</code> when the proxy class can handle the string.\nReturns <code>false</code> otherwise.\n"],["contains_bad_protocols?","HTML::WhiteListSanitizer","classes/HTML/WhiteListSanitizer.html#method-i-contains_bad_protocols-3F","(attr_name, value)",""],["content_columns","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-content_columns","()","<p>Returns an array of column objects where the primary id, all columns ending\nin “_id” or “_count”, …\n"],["content_for","ActionView::Helpers::CaptureHelper","classes/ActionView/Helpers/CaptureHelper.html#method-i-content_for","(name, content = nil, &block)","<p>Calling content_for stores a block of markup in an identifier for later\nuse. You can make subsequent …\n"],["content_for?","ActionView::Helpers::CaptureHelper","classes/ActionView/Helpers/CaptureHelper.html#method-i-content_for-3F","(name)","<p>content_for? simply checks whether any content has been captured yet using\ncontent_for Useful to render …\n"],["content_length","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-content_length","()","<p>Returns the content length of the request as an integer.\n"],["content_mime_type","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-content_mime_type","()","<p>The MIME type of the HTTP request, such as Mime::XML.\n<p>For backward compatibility, the post format is extracted …\n"],["content_tag","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-content_tag","(name, content_or_options_with_block = nil, options = nil, escape = true, &block)","<p>Returns an HTML block tag of type <code>name</code> surrounding the\n<code>content</code>. Add HTML attributes by passing an attributes …\n"],["content_tag_for","ActionView::Helpers::RecordTagHelper","classes/ActionView/Helpers/RecordTagHelper.html#method-i-content_tag_for","(tag_name, single_or_multiple_records, prefix = nil, options = nil, &block)","<p>content_tag_for creates an HTML element with id and class parameters that\nrelate to the specified Active …\n"],["content_type","ActionController::Metal","classes/ActionController/Metal.html#method-i-content_type","()",""],["content_type","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-content_type","()",""],["content_type=","ActionController::Metal","classes/ActionController/Metal.html#method-i-content_type-3D","(type)","<p>Basic implementations for content_type=, location=, and headers are\nprovided to reduce the dependency …\n"],["controller","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-controller","(controller, options={})","<p>Scopes routes to a specific controller\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">controller</span> <span class=\"ruby-string\">&quot;food&quot;</span> <span class=\"ruby-keyword\">do</span>\n  <span class=\"ruby-identifier\">match</span> <span class=\"ruby-string\">&quot;bacon&quot;</span>, :<span class=\"ruby-identifier\">action</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;bacon&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["controller","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-controller","()",""],["controller_class","ActionController::TestCase::Behavior::ClassMethods","classes/ActionController/TestCase/Behavior/ClassMethods.html#method-i-controller_class","()",""],["controller_class=","ActionController::TestCase::Behavior::ClassMethods","classes/ActionController/TestCase/Behavior/ClassMethods.html#method-i-controller_class-3D","(new_class)",""],["controller_class_name","Rails::Generators::ResourceHelpers","classes/Rails/Generators/ResourceHelpers.html#method-i-controller_class_name","()",""],["controller_class_path","Rails::Generators::ResourceHelpers","classes/Rails/Generators/ResourceHelpers.html#method-i-controller_class_path","()",""],["controller_file_name","Rails::Generators::ResourceHelpers","classes/Rails/Generators/ResourceHelpers.html#method-i-controller_file_name","()",""],["controller_file_path","Rails::Generators::ResourceHelpers","classes/Rails/Generators/ResourceHelpers.html#method-i-controller_file_path","()",""],["controller_i18n_scope","Rails::Generators::ResourceHelpers","classes/Rails/Generators/ResourceHelpers.html#method-i-controller_i18n_scope","()",""],["controller_name","ActionController::Metal","classes/ActionController/Metal.html#method-c-controller_name","()","<p>Returns the last part of the controller’s name, underscored, without the\nending <code>Controller</code>. For instance, …\n"],["controller_name","ActionController::Metal","classes/ActionController/Metal.html#method-i-controller_name","()","<p>Delegates to the class’ <code>controller_name</code>\n"],["controller_path","AbstractController::Base","classes/AbstractController/Base.html#method-c-controller_path","()","<p>Returns the full controller name, underscored, without the ending\nController. For instance, MyApp::MyPostsController …\n"],["controller_path","AbstractController::Base","classes/AbstractController/Base.html#method-i-controller_path","()","<p>Delegates to the class’ #controller_path\n"],["controller_path","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-controller_path","()",""],["controller_path=","ActionView::TestCase::TestController","classes/ActionView/TestCase/TestController.html#method-i-controller_path-3D","(path)",""],["convert_database_option_for_jruby","Rails::Generators::AppBase","classes/Rails/Generators/AppBase.html#method-i-convert_database_option_for_jruby","()",""],["convert_key","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_key","(key)",""],["convert_key","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_key","(key)",""],["convert_to_model","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-convert_to_model","(object)","<p>Converts the given object to an ActiveModel compliant one.\n"],["convert_value","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_value","(value)",""],["convert_value","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_value","(value)",""],["cookie_jar","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-cookie_jar","()",""],["cookies","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-cookies","()","<p>A map of the cookies returned by the last response, and which will be sent\nwith the next request.\n"],["cookies","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-cookies","()","<p>Returns the response cookies, converted to a Hash of (name =&gt; value)\npairs\n\n<pre>assert_equal 'AuthorOfNewPage', ...</pre>\n"],["cookies","ActionDispatch::TestProcess","classes/ActionDispatch/TestProcess.html#method-i-cookies","()",""],["cookies","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-cookies","()",""],["copy","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-copy","(destination, sources, options = {})",""],["copy_javascript","Js::Generators::AssetsGenerator","classes/Js/Generators/AssetsGenerator.html#method-i-copy_javascript","()",""],["copy_stylesheet","Css::Generators::AssetsGenerator","classes/Css/Generators/AssetsGenerator.html#method-i-copy_stylesheet","()",""],["copy_stylesheet","Css::Generators::ScaffoldGenerator","classes/Css/Generators/ScaffoldGenerator.html#method-i-copy_stylesheet","()","<p>In order to allow the Sass generators to pick up the default Rails CSS and\ntransform it, we leave it …\n"],["copy_view_files","Erb::Generators::ControllerGenerator","classes/Erb/Generators/ControllerGenerator.html#method-i-copy_view_files","()",""],["copy_view_files","Erb::Generators::ScaffoldGenerator","classes/Erb/Generators/ScaffoldGenerator.html#method-i-copy_view_files","()",""],["count","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-count","()","<p>Returns the number of error messages.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">add</span>(:<span class=\"ruby-identifier\">name</span>, <span class=\"ruby-string\">&quot;can't be blank&quot;</span>)\n<span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">count</span> <span class=\"ruby-comment\"># =&gt; 1</span>\n<span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">add</span>(:<span class=\"ruby-identifier\">name</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["count","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-count","(column_name = nil, options = {})","<p>Count operates using three different approaches.\n<p>Count all: By not passing any parameters to count, it …\n"],["count_by_sql","ActiveRecord::Querying","classes/ActiveRecord/Querying.html#method-i-count_by_sql","(sql)","<p>Returns the result of an SQL statement that should only include a COUNT(*)\nin the SELECT part. The use …\n"],["count_observers","ActiveModel::Observing::ClassMethods","classes/ActiveModel/Observing/ClassMethods.html#method-i-count_observers","()","<p>Total number of observers.\n"],["create","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-create","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)",""],["create","ActiveRecord::Persistence::ClassMethods","classes/ActiveRecord/Persistence/ClassMethods.html#method-i-create","(attributes = nil, options = {}, &block)","<p>Creates an object (or multiple objects) and saves it to the database, if\nvalidations pass. The resulting …\n"],["create","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-create","(*args, &block)",""],["create","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-create","(attributes = {})","<p>Creates a new resource instance and makes a request to the remote service\nthat it be saved, making it …\n"],["create","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-create","()","<p>Create (i.e., save to the remote service) the new resource.\n"],["create","ActiveSupport::Cache::Entry","classes/ActiveSupport/Cache/Entry.html#method-c-create","(raw_value, created_at, options = {})","<p>Create an entry with internal attributes set. This method is intended to be\nused by implementations that …\n"],["create","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-create","(name, utc_offset = nil, tzinfo = nil)",""],["create!","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-create-21","(*args, &block)",""],["create!","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-create-21","(attributes = nil, options = {}, &block)","<p>Creates an object just like Base.create but calls <code>save!</code>\ninstead of <code>save</code> so an exception is raised if …\n"],["create_active_record_files","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-create_active_record_files","()",""],["create_app_files","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-create_app_files","()",""],["create_app_files","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-create_app_files","()",""],["create_boot_file","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-create_boot_file","()",""],["create_config_files","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-create_config_files","()",""],["create_config_files","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-create_config_files","()",""],["create_controller_files","Rails::Generators::ControllerGenerator","classes/Rails/Generators/ControllerGenerator.html#method-i-create_controller_files","()",""],["create_controller_files","Rails::Generators::ScaffoldControllerGenerator","classes/Rails/Generators/ScaffoldControllerGenerator.html#method-i-create_controller_files","()",""],["create_database","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-create_database","(name, options = {})","<p>Create a new MySQL database with optional <code>:charset</code> and\n<code>:collation</code>. Charset defaults to utf8.\n<p>Example: …\n"],["create_database","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-create_database","(name, options = {})","<p>Create a new PostgreSQL database. Options include <code>:owner</code>,\n<code>:template</code>, <code>:encoding</code>, <code>:tablespace</code>,\nand <code>:connection_limit</code> …\n"],["create_db_files","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-create_db_files","()",""],["create_doc_files","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-create_doc_files","()",""],["create_dummy_app","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-create_dummy_app","(path = nil)",""],["create_fixture_file","TestUnit::Generators::ModelGenerator","classes/TestUnit/Generators/ModelGenerator.html#method-i-create_fixture_file","()",""],["create_fixtures","ActiveRecord::Fixtures","classes/ActiveRecord/Fixtures.html#method-c-create_fixtures","(fixtures_directory, table_names, class_names = {})",""],["create_fixtures","Object","classes/Object.html#method-i-create_fixtures","(*table_names, &block)",""],["create_generated_attribute","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-create_generated_attribute","(attribute_type, name = 'test', index = nil)","<p>Create a Rails::Generators::GeneratedAttribute by supplying the attribute\ntype and, optionally, the attribute …\n"],["create_generator_files","Rails::Generators::GeneratorGenerator","classes/Rails/Generators/GeneratorGenerator.html#method-i-create_generator_files","()",""],["create_helper_files","Rails::Generators::HelperGenerator","classes/Rails/Generators/HelperGenerator.html#method-i-create_helper_files","()",""],["create_helper_files","TestUnit::Generators::HelperGenerator","classes/TestUnit/Generators/HelperGenerator.html#method-i-create_helper_files","()",""],["create_images_directory","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-create_images_directory","()",""],["create_javascript_files","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-create_javascript_files","()",""],["create_lib_files","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-create_lib_files","()",""],["create_lib_files","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-create_lib_files","()",""],["create_log_files","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-create_log_files","()",""],["create_path_and_open_file","ActiveSupport::Testing::Performance::Profiler","classes/ActiveSupport/Testing/Performance/Profiler.html#method-i-create_path_and_open_file","(printer_name)",""],["create_public_files","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-create_public_files","()",""],["create_public_stylesheets_files","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-create_public_stylesheets_files","()",""],["create_reflection","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-create_reflection","(macro, name, options, active_record)",""],["create_root","Rails::Generators::AppBase","classes/Rails/Generators/AppBase.html#method-i-create_root","()",""],["create_root_files","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-create_root_files","()",""],["create_root_files","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-create_root_files","()",""],["create_root_folder","Erb::Generators::ScaffoldGenerator","classes/Erb/Generators/ScaffoldGenerator.html#method-i-create_root_folder","()",""],["create_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-create_savepoint","()",""],["create_savepoint","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-create_savepoint","()",""],["create_savepoint","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-create_savepoint","()",""],["create_savepoint","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-create_savepoint","()",""],["create_script_files","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-create_script_files","()",""],["create_script_files","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-create_script_files","()",""],["create_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_table","(table_name, options = {})","<p>Creates a new table with the name <code>table_name</code>.\n<code>table_name</code> may either be a String or a Symbol.\n<p>There are …\n"],["create_task_files","Rails::Generators::TaskGenerator","classes/Rails/Generators/TaskGenerator.html#method-i-create_task_files","()",""],["create_test_dummy_files","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-create_test_dummy_files","()",""],["create_test_file","TestUnit::Generators::ModelGenerator","classes/TestUnit/Generators/ModelGenerator.html#method-i-create_test_file","()",""],["create_test_files","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-create_test_files","()",""],["create_test_files","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-create_test_files","()",""],["create_test_files","TestUnit::Generators::ControllerGenerator","classes/TestUnit/Generators/ControllerGenerator.html#method-i-create_test_files","()",""],["create_test_files","TestUnit::Generators::IntegrationGenerator","classes/TestUnit/Generators/IntegrationGenerator.html#method-i-create_test_files","()",""],["create_test_files","TestUnit::Generators::MailerGenerator","classes/TestUnit/Generators/MailerGenerator.html#method-i-create_test_files","()",""],["create_test_files","TestUnit::Generators::ObserverGenerator","classes/TestUnit/Generators/ObserverGenerator.html#method-i-create_test_files","()",""],["create_test_files","TestUnit::Generators::PerformanceGenerator","classes/TestUnit/Generators/PerformanceGenerator.html#method-i-create_test_files","()",""],["create_test_files","TestUnit::Generators::PluginGenerator","classes/TestUnit/Generators/PluginGenerator.html#method-i-create_test_files","()",""],["create_test_files","TestUnit::Generators::ScaffoldGenerator","classes/TestUnit/Generators/ScaffoldGenerator.html#method-i-create_test_files","()",""],["create_tmp_files","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-create_tmp_files","()",""],["create_vendor_files","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-create_vendor_files","()",""],["create_with","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-create_with","(value)",""],["creator?","ActiveRecord::DynamicFinderMatch","classes/ActiveRecord/DynamicFinderMatch.html#method-i-creator-3F","()",""],["csrf_meta_tag","ActionView::Helpers::CsrfHelper","classes/ActionView/Helpers/CsrfHelper.html#method-i-csrf_meta_tag","()","<p>For backwards compatibility.\n"],["csrf_meta_tags","ActionView::Helpers::CsrfHelper","classes/ActionView/Helpers/CsrfHelper.html#method-i-csrf_meta_tags","()","<p>Returns meta tags “csrf-param” and “csrf-token” with the name of the\ncross-site request …\n"],["css_select","ActionDispatch::Assertions::SelectorAssertions","classes/ActionDispatch/Assertions/SelectorAssertions.html#method-i-css_select","(*args)","<p>Select and return all matching elements.\n<p>If called with a single argument, uses that argument as a selector …\n"],["current","Date","classes/Date.html#method-c-current","()","<p>Returns Time.zone.today when <code>Time.zone</code> or\n<code>config.time_zone</code> are set, otherwise just returns Date.today …\n"],["current","DateTime","classes/DateTime.html#method-c-current","()","<p>Returns <code>Time.zone.now.to_datetime</code> when <code>Time.zone</code>\nor <code>config.time_zone</code> are set, otherwise returns\n<code>Time.now</code> …\n"],["current","Time","classes/Time.html#method-c-current","()","<p>Returns <code>Time.zone.now</code> when <code>Time.zone</code> or\n<code>config.time_zone</code> are set, otherwise just returns\n<code>Time.now</code>.\n"],["current_cycle","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-current_cycle","(name = \"default\")","<p>Returns the current cycle string after a cycle has been started. Useful for\ncomplex table highlighting …\n"],["current_database","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-current_database","()",""],["current_database","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-current_database","()","<p>Returns the current database name.\n"],["current_hash","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-current_hash","()",""],["current_hash","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-current_hash","()",""],["current_page?","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-current_page-3F","(options)","<p>True if the current request URI was generated by the given\n<code>options</code>.\n<p>Examples\n<p>Let’s say we’re in the <code>/shop/checkout</code> …\n"],["current_savepoint_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-current_savepoint_name","()",""],["current_schema","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-current_schema","()","<p>Returns the current schema name.\n"],["custom_dir","ActionView::Helpers::AssetTagHelper::AssetIncludeTag","classes/ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html#method-i-custom_dir","()",""],["custom_dir","ActionView::Helpers::AssetTagHelper::JavascriptIncludeTag","classes/ActionView/Helpers/AssetTagHelper/JavascriptIncludeTag.html#method-i-custom_dir","()",""],["custom_dir","ActionView::Helpers::AssetTagHelper::StylesheetIncludeTag","classes/ActionView/Helpers/AssetTagHelper/StylesheetIncludeTag.html#method-i-custom_dir","()",""],["custom_method_collection_url","ActiveResource::CustomMethods::ClassMethods","classes/ActiveResource/CustomMethods/ClassMethods.html#method-i-custom_method_collection_url","(method_name, options = {})",""],["cycle","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-cycle","(first_value, *values)","<p>Creates a Cycle object whose <em>to_s</em> method cycles through elements\nof an array every time it is called. …\n"],["daemon","Process","classes/Process.html#method-c-daemon","(nochdir = nil, noclose = nil)",""],["dangerous_attribute_method?","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-dangerous_attribute_method-3F","(name)","<p>A method name is ‘dangerous’ if it is already defined by Active Record, but\nnot by any ancestors. (So …\n"],["dangerous_attribute_method?","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-dangerous_attribute_method-3F","(method_name)",""],["dasherize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-dasherize","(underscored_word)","<p>Replaces underscores with dashes in the string.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;puni_puni&quot;</span> <span class=\"ruby-comment\"># =&gt; &quot;puni-puni&quot;</span>\n</pre>\n"],["dasherize","String","classes/String.html#method-i-dasherize","()","<p>Replaces underscores with dashes in the string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;puni_puni&quot;</span> <span class=\"ruby-comment\"># =&gt; &quot;puni-puni&quot;</span>\n</pre>\n"],["data","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-i-data","()","<p>Lazy-unmarshal session state.\n"],["data","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-i-data","()","<p>Lazy-unmarshal session state.\n"],["data_column","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-data_column","","<p>The data field defaults to ‘data’.\n"],["data_column_name","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-c-data_column_name","","<p>Customizable data column name. Defaults to ‘data’.\n"],["data_column_name","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-data_column_name","",""],["data_column_size_limit","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-c-data_column_size_limit","()",""],["database_configuration","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-database_configuration","()","<p>Loads and returns the contents of the #database_configuration_file. The\ncontents of the file are processed …\n"],["database_gemfile_entry","Rails::Generators::AppBase","classes/Rails/Generators/AppBase.html#method-i-database_gemfile_entry","()",""],["database_yml","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-database_yml","()",""],["date_select","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-date_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for year, month, and day) pre-selected\nfor accessing a specified date-based …\n"],["date_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-date_select","(method, options = {}, html_options = {})",""],["datetime_select","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-datetime_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for year, month, day, hour, and minute)\npre-selected for accessing …\n"],["datetime_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-datetime_select","(method, options = {}, html_options = {})",""],["day","Numeric","classes/Numeric.html#method-i-day","()",""],["days","Numeric","classes/Numeric.html#method-i-days","()",""],["days_in_month","Time","classes/Time.html#method-c-days_in_month","(month, year = now.year)","<p>Return the number of days in the given month. If no year is specified, it\nwill use the current year. …\n"],["days_to_week_start","Date","classes/Date.html#method-i-days_to_week_start","(start_day = :monday)","<p>Returns number of days to start of this week. Week is assumed to start on\n<code>start_day</code>, default is <code>:monday</code> …\n"],["days_to_week_start","Time","classes/Time.html#method-i-days_to_week_start","(start_day = :monday)","<p>Returns number of days to start of this week, week starts on start_day\n(default is :monday).\n"],["db","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-db","()",""],["debug","ActionView::Helpers::DebugHelper","classes/ActionView/Helpers/DebugHelper.html#method-i-debug","(object)","<p>Returns a YAML representation of <code>object</code> wrapped with\n&lt;pre&gt; and &lt;/pre&gt;. If the object cannot …\n"],["debug_protected_attribute_removal","ActiveModel::MassAssignmentSecurity::Sanitizer","classes/ActiveModel/MassAssignmentSecurity/Sanitizer.html#method-i-debug_protected_attribute_removal","(attributes, sanitized_attributes)",""],["debugger","Kernel","classes/Kernel.html#method-i-debugger","()","<p>Starts a debugging session if ruby-debug has been loaded (call rails server\n–debugger to do load it). …\n"],["decode","ActiveResource::Formats::JsonFormat","classes/ActiveResource/Formats/JsonFormat.html#method-i-decode","(json)",""],["decode","ActiveResource::Formats::XmlFormat","classes/ActiveResource/Formats/XmlFormat.html#method-i-decode","(xml)",""],["decode","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-decode","(json, options ={})",""],["decode64","ActiveSupport::Base64","classes/ActiveSupport/Base64.html#method-c-decode64","(value)",""],["decode64","Base64","classes/Base64.html#method-c-decode64","(data)","<p>Decodes a base 64 encoded string to its original representation.\n\n<pre>ActiveSupport::Base64.decode64(&quot;T3JpZ2luYWwgdW5lbmNvZGVkIHN0cmluZw==&quot;) ...</pre>\n"],["decode_credentials","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-decode_credentials","(request)",""],["decode_credentials","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-decode_credentials","(header)",""],["decode_credentials_header","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-decode_credentials_header","(request)",""],["decompose","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-decompose","()","<p>Performs canonical decomposition on all the characters.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'é'</span>.<span class=\"ruby-identifier\">length</span>                         <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["decompose_codepoints","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-decompose_codepoints","(type, codepoints)","<p>Decompose composed characters to the decomposed form.\n"],["decompress","ActiveSupport::Gzip","classes/ActiveSupport/Gzip.html#method-c-decompress","(source)","<p>Decompresses a gzipped string.\n"],["deconstantize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-deconstantize","(path)","<p>Removes the rightmost segment from the constant expression in the string:\n\n<pre>&quot;Net::HTTP&quot;.deconstantize   ...</pre>\n"],["deconstantize","String","classes/String.html#method-i-deconstantize","()","<p>Removes the rightmost segment from the constant expression in the string.\n\n<pre>&quot;Net::HTTP&quot;.deconstantize   ...</pre>\n"],["decrement","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-decrement","(attribute, by = 1)","<p>Initializes <code>attribute</code> to zero if <code>nil</code> and\nsubtracts the value passed as <code>by</code> (default is 1). The decrement\n…\n"],["decrement","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-decrement","(name, amount = 1, options = nil)",""],["decrement","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-decrement","(name, amount = 1, options = nil)","<p>Decrement an integer value in the cache.\n"],["decrement","ActiveSupport::Cache::NullStore","classes/ActiveSupport/Cache/NullStore.html#method-i-decrement","(name, amount = 1, options = nil)",""],["decrement","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-decrement","(name, amount = 1, options = nil)","<p>Increment an integer value in the cache.\n<p>Options are passed to the underlying cache implementation.\n<p>All …\n"],["decrement!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-decrement-21","(attribute, by = 1)","<p>Wrapper around <code>decrement</code> that saves the record. This method\ndiffers from its non-bang version in that …\n"],["decrement_counter","ActiveRecord::CounterCache","classes/ActiveRecord/CounterCache.html#method-i-decrement_counter","(counter_name, id)","<p>Decrement a number field by one, usually representing a count.\n<p>This works the same as increment_counter …\n"],["decrement_open_transactions","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-decrement_open_transactions","()",""],["decrypt","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-i-decrypt","(value)",""],["decrypt_and_verify","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-i-decrypt_and_verify","(value)","<p>Decrypt and verify a message. We need to verify the message in order to\navoid padding attacks. Reference: …\n"],["deep_dup","Hash","classes/Hash.html#method-i-deep_dup","()","<p>Returns a deep copy of hash.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hash</span> = { :<span class=\"ruby-identifier\">a</span> =<span class=\"ruby-operator\">&gt;</span> { :<span class=\"ruby-identifier\">b</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'b'</span> } }\n<span class=\"ruby-identifier\">dup</span>  = <span class=\"ruby-identifier\">hash</span>.<span class=\"ruby-identifier\">deep_dup</span>\n<span class=\"ruby-identifier\">dup</span>[:<span class=\"ruby-identifier\">a</span>][:<span class=\"ruby-identifier\">c</span>] = <span class=\"ruby-string\">'c'</span>\n\n<span class=\"ruby-identifier\">hash</span>[:<span class=\"ruby-identifier\">a</span>][:<span class=\"ruby-identifier\">c</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["deep_merge","Hash","classes/Hash.html#method-i-deep_merge","(other_hash)","<p>Returns a new hash with <code>self</code> and <code>other_hash</code>\nmerged recursively.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h1</span> = {:<span class=\"ruby-identifier\">x</span> =<span class=\"ruby-operator\">&gt;</span> {:<span class=\"ruby-identifier\">y</span> =<span class=\"ruby-operator\">&gt;</span> [<span class=\"ruby-value\">4</span>,<span class=\"ruby-value\">5</span>,<span class=\"ruby-value\">6</span>]}, :<span class=\"ruby-identifier\">z</span> =<span class=\"ruby-operator\">&gt;</span> [<span class=\"ruby-value\">7</span>,<span class=\"ruby-value\">8</span>,<span class=\"ruby-value\">9</span>]} <span class=\"ruby-operator\">...</span>\n</pre>\n"],["deep_merge!","Hash","classes/Hash.html#method-i-deep_merge-21","(other_hash)","<p>Same as <code>deep_merge</code>, but modifies <code>self</code>.\n"],["deep_munge","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-deep_munge","(hash)","<p>Remove nils from the params hash\n"],["default","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-default","(value = nil)",""],["default","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-default","(key = nil)",""],["default","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-default","(key = nil)",""],["default","Rails::Generators::GeneratedAttribute","classes/Rails/Generators/GeneratedAttribute.html#method-i-default","()",""],["default","RailsEnvironment","classes/RailsEnvironment.html#method-c-default","()",""],["default=","RailsEnvironment","classes/RailsEnvironment.html#method-c-default-3D","(rails_env)",""],["default_action","ActionController::Responder","classes/ActionController/Responder.html#method-i-default_action","()","<p>By default, render the <code>:edit</code> action for HTML requests with\nfailure, unless the verb is POST.\n"],["default_aliases_for_option","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_aliases_for_option","(name, options)","<p>Return default aliases for the option name given doing a lookup in\nRails::Generators.aliases.\n"],["default_charset=","ActionController::Compatibility","classes/ActionController/Compatibility.html#method-c-default_charset-3D","(new_charset)",""],["default_for_option","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_for_option","(config, name, options, default)","<p>Return default for the option name given doing a lookup in config.\n"],["default_generator_root","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_generator_root","()",""],["default_inspect","Date","classes/Date.html#method-i-default_inspect","()",""],["default_inspect","DateTime","classes/DateTime.html#method-i-default_inspect","()",""],["default_middleware_stack","Rails::Application","classes/Rails/Application.html#method-i-default_middleware_stack","()",""],["default_middleware_stack","Rails::Engine","classes/Rails/Engine.html#method-i-default_middleware_stack","()",""],["default_options","Rails::Server","classes/Rails/Server.html#method-i-default_options","()",""],["default_primary_key_type","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-default_primary_key_type","()",""],["default_render","ActionController::ImplicitRender","classes/ActionController/ImplicitRender.html#method-i-default_render","(*args)",""],["default_render","ActionController::Responder","classes/ActionController/Responder.html#method-i-default_render","()","<p>If a response block was given, use it, otherwise call render on controller.\n"],["default_scope","ActiveRecord::Scoping::Default::ClassMethods","classes/ActiveRecord/Scoping/Default/ClassMethods.html#method-i-default_scope","(scope = {})","<p>Use this macro in your model to set a default scope for all operations on\nthe model.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Article</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["default_sequence_name","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-default_sequence_name","(table, column)",""],["default_source_root","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_source_root","()","<p>Returns the default source root for a given generator. This is used\ninternally by rails to set its generators …\n"],["default_timezone","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-default_timezone","","<p>Determines whether to use Time.local (using :local) or Time.utc (using\n:utc) when pulling dates and times …\n"],["default_url_options","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-default_url_options","()",""],["default_url_options","ActionDispatch::Routing::Mapper::Base","classes/ActionDispatch/Routing/Mapper/Base.html#method-i-default_url_options","(options)",""],["default_url_options=","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-default_url_options-3D","(options)",""],["default_url_options=","ActionDispatch::Routing::Mapper::Base","classes/ActionDispatch/Routing/Mapper/Base.html#method-i-default_url_options-3D","(options)",""],["default_value_for_option","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_value_for_option","(name, options)","<p>Return the default value for the option name given doing a lookup in\nRails::Generators.options.\n"],["defaults","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-defaults","(defaults = {})","<p>Allows you to set default parameters for a route, such as this:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">defaults</span> :<span class=\"ruby-identifier\">id</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'home'</span> <span class=\"ruby-keyword\">do</span>\n  <span class=\"ruby-identifier\">match</span> <span class=\"ruby-string\">'scoped_pages/(:id)'</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["define","ActiveRecord::Schema","classes/ActiveRecord/Schema.html#method-c-define","(info={}, &block)","<p>Eval the given block. All methods available to the current connection\nadapter are available within the …\n"],["define_attribute_method","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-define_attribute_method","(attr_name)",""],["define_attribute_methods","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-define_attribute_methods","(attr_names)","<p>Declares the attributes that should be prefixed and suffixed by\nActiveModel::AttributeMethods.\n<p>To use, …\n"],["define_attribute_methods","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-define_attribute_methods","()","<p>Generates all the attribute related methods for columns in the database\naccessors, mutators and query …\n"],["define_callbacks","ActiveRecord::Observer","classes/ActiveRecord/Observer.html#method-i-define_callbacks","(klass)",""],["define_callbacks","ActiveSupport::Callbacks::ClassMethods","classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-define_callbacks","(*callbacks)","<p>Define sets of events in the object lifecycle that support callbacks.\n\n<pre>define_callbacks :validate\ndefine_callbacks ...</pre>\n"],["define_method__attribute","ActiveRecord::AttributeMethods::DeprecatedUnderscoreRead::ClassMethods","classes/ActiveRecord/AttributeMethods/DeprecatedUnderscoreRead/ClassMethods.html#method-i-define_method__attribute","(attr_name)",""],["define_method_attribute","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-define_method_attribute","(attr_name)",""],["define_method_attribute","ActiveRecord::AttributeMethods::Read::ClassMethods","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-define_method_attribute","(attr_name)","<p>We want to generate the methods via module_eval rather than define_method,\nbecause define_method is slower …\n"],["define_method_attribute=","ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","classes/ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html#method-i-define_method_attribute-3D","(attr_name)","<p>Defined for all <code>datetime</code> and <code>timestamp</code> attributes\nwhen <code>time_zone_aware_attributes</code> are enabled. This enhanced …\n"],["define_method_attribute=","ActiveRecord::AttributeMethods::Write::ClassMethods","classes/ActiveRecord/AttributeMethods/Write/ClassMethods.html#method-i-define_method_attribute-3D","(attr_name)",""],["define_model_callbacks","ActiveModel::Callbacks","classes/ActiveModel/Callbacks.html#method-i-define_model_callbacks","(*callbacks)","<p>define_model_callbacks accepts the same options define_callbacks does, in\ncase you want to overwrite …\n"],["defined_app_const_base","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-defined_app_const_base","()",""],["defined_app_const_base?","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-defined_app_const_base-3F","()",""],["defined_app_name","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-defined_app_name","()",""],["delegate","Module","classes/Module.html#method-i-delegate","(*methods)","<p>Provides a delegate class method to easily expose contained objects’\nmethods as your own. Pass one or …\n"],["delegate_to_scoped_klass","ActiveRecord::Delegation","classes/ActiveRecord/Delegation.html#method-c-delegate_to_scoped_klass","(method)",""],["delete","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-delete","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating DELETE HTTP method and set/volley the\nresponse\n"],["delete","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-delete","(key)",""],["delete","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-delete","(path, parameters = nil, headers = nil)","<p>Performs a DELETE request with the given parameters. See <code>#get</code>\nfor more details.\n"],["delete","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-delete","(target)",""],["delete","ActionDispatch::Routing::Mapper::HttpHelpers","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-delete","(*args, &block)","<p>Define a route that only recognizes HTTP PUT. For supported arguments, see\n<code>Base#match</code>.\n<p>Example:\n<p>delete …\n"],["delete","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-delete","(key)","<p>Delete messages for <code>key</code>\n"],["delete","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-delete","(arel, name = nil, binds = [])","<p>Executes the delete statement and returns the number of rows affected.\n"],["delete","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-delete","(key)",""],["delete","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-delete","(sql_key)",""],["delete","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-delete","(key)",""],["delete","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-delete","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["delete","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-delete","(id_or_array)","<p>Deletes the row with a primary key matching the <code>id</code> argument,\nusing a SQL <code>DELETE</code> statement, and returns …\n"],["delete","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-delete","(id, options = {})","<p>Deletes the resources with the ID in the <code>id</code> parameter.\n<p>Options\n<p>All options specify prefix and query parameters. …\n"],["delete","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-i-delete","(path, headers = {})","<p>Executes a DELETE request (see HTTP protocol documentation if unfamiliar).\nUsed to delete resources. …\n"],["delete","ActiveResource::CustomMethods","classes/ActiveResource/CustomMethods.html#method-i-delete","(method_name, options = {})",""],["delete","ActiveResource::CustomMethods","classes/ActiveResource/CustomMethods.html#method-c-delete","(custom_method_name, options = {})",""],["delete","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-delete","(name, options = nil)","<p>Deletes an entry in the cache. Returns <code>true</code> if an entry is\ndeleted.\n<p>Options are passed to the underlying …\n"],["delete","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-delete","(key)","<p>Removes a specified key from the hash.\n"],["delete","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-delete","(key)","<p>Removes a specified key from the hash.\n"],["delete","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-delete","(key)",""],["delete?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-delete-3F","()","<p>Is this a DELETE request? Equivalent to <code>request.request_method_symbol\n== :delete</code>.\n"],["delete_all","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-delete_all","(conditions = nil)","<p>Deletes the records matching <code>conditions</code> without instantiating\nthe records first, and hence not calling …\n"],["delete_cookie","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-delete_cookie","(key, value={})",""],["delete_entry","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-delete_entry","(key, options)",""],["delete_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-delete_entry","(key, options)",""],["delete_if","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-delete_if","()",""],["delete_matched","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_matched","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_matched","ActiveSupport::Cache::NullStore","classes/ActiveSupport/Cache/NullStore.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_matched","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-delete_matched","(matcher, options = nil)","<p>Delete all entries with keys matching the pattern.\n<p>Options are passed to the underlying cache implementation. …\n"],["delete_responses_to_replace","ActiveResource::HttpMock","classes/ActiveResource/HttpMock.html#method-c-delete_responses_to_replace","(new_responses)",""],["delete_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-delete_sql","(sql, name = nil)","<p>Executes the delete statement and returns the number of rows affected.\n"],["delete_via_redirect","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-delete_via_redirect","(path, parameters = nil, headers = nil)","<p>Performs a DELETE request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["demodulize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-demodulize","(path)","<p>Removes the module part from the expression in the string:\n\n<pre>&quot;ActiveRecord::CoreExtensions::String::Inflections&quot;.demodulize ...</pre>\n"],["demodulize","String","classes/String.html#method-i-demodulize","()","<p>Removes the module part from the constant expression in the string.\n\n<pre>&quot;ActiveRecord::CoreExtensions::String::Inflections&quot;.demodulize ...</pre>\n"],["deny?","ActiveModel::MassAssignmentSecurity::BlackList","classes/ActiveModel/MassAssignmentSecurity/BlackList.html#method-i-deny-3F","(key)",""],["deny?","ActiveModel::MassAssignmentSecurity::PermissionSet","classes/ActiveModel/MassAssignmentSecurity/PermissionSet.html#method-i-deny-3F","(key)",""],["deny?","ActiveModel::MassAssignmentSecurity::WhiteList","classes/ActiveModel/MassAssignmentSecurity/WhiteList.html#method-i-deny-3F","(key)",""],["deprecate","Module","classes/Module.html#method-i-deprecate","(*method_names)","<p>Declare that a method has been deprecated.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">deprecate</span> :<span class=\"ruby-identifier\">foo</span>\n<span class=\"ruby-identifier\">deprecate</span> :<span class=\"ruby-identifier\">bar</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'message'</span>\n<span class=\"ruby-identifier\">deprecate</span> :<span class=\"ruby-identifier\">foo</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["deprecate_methods","ActiveSupport::Deprecation","classes/ActiveSupport/Deprecation.html#method-c-deprecate_methods","(target_module, *method_names)","<p>Declare that a method has been deprecated.\n"],["deprecated_method_warning","ActiveSupport::Deprecation","classes/ActiveSupport/Deprecation.html#method-c-deprecated_method_warning","(method_name, message = nil)",""],["desc","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-desc","(description=nil)","<p>Tries to get the description from a USAGE file one folder above the source\nroot otherwise uses a default …\n"],["desc","Rails::SubTestTask","classes/Rails/SubTestTask.html#method-i-desc","(string)",""],["descendants","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-i-descendants","()",""],["descendants","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-c-descendants","(klass)",""],["descends_from_active_record?","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-descends_from_active_record-3F","()","<p>True if this isn’t a concrete subclass needing a STI type condition.\n"],["describe","ActiveSupport::Testing::Declarative","classes/ActiveSupport/Testing/Declarative.html#method-c-describe","(text)",""],["destination","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-c-destination","(path)","<p>Sets the destination of generator files:\n\n<pre>destination File.expand_path(&quot;../tmp&quot;, File.dirname(__FILE__))</pre>\n"],["destroy","ActionDispatch::Session::DestroyableSession","classes/ActionDispatch/Session/DestroyableSession.html#method-i-destroy","()",""],["destroy","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-destroy","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["destroy","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-destroy","(id)","<p>Destroy an object (or multiple objects) that has the given id, the object\nis instantiated first, therefore …\n"],["destroy","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-i-destroy","()",""],["destroy","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-destroy","()","<p>Deletes the resource from the remote service.\n<p>Examples\n\n<pre>my_id = 3\nmy_person = Person.find(my_id)\nmy_person.destroy ...</pre>\n"],["destroy","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-destroy","()","<p>DELETE destroy\n"],["destroy_all","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-destroy_all","(conditions = nil)","<p>Destroys the records matching <code>conditions</code> by instantiating each\nrecord and calling its <code>destroy</code> method. …\n"],["destroy_session","ActionDispatch::Session::CacheStore","classes/ActionDispatch/Session/CacheStore.html#method-i-destroy_session","(env, sid, options)","<p>Remove a session from the cache.\n"],["destroyed?","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-destroyed-3F","()","<p>Returns true if this object has been destroyed, otherwise returns false.\n"],["detail_args_for","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-detail_args_for","(options)","<p>Compute details hash and key according to user options (e.g. passed from\n#render).\n"],["details_for_lookup","AbstractController::ViewPaths","classes/AbstractController/ViewPaths.html#method-i-details_for_lookup","()",""],["determine_default_controller_class","ActionController::TestCase::Behavior::ClassMethods","classes/ActionController/TestCase/Behavior/ClassMethods.html#method-i-determine_default_controller_class","(name)",""],["determine_default_helper_class","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-determine_default_helper_class","(name)",""],["determine_install_method","Rails::Commands::Install","classes/Rails/Commands/Install.html#method-i-determine_install_method","()",""],["diff","Hash","classes/Hash.html#method-i-diff","(h2)","<p>Returns a hash that represents the difference between two hashes.\n<p>Examples:\n\n<pre class=\"ruby\">{<span class=\"ruby-value\">1</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">2</span>}.<span class=\"ruby-identifier\">diff</span>(<span class=\"ruby-value\">1</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">2</span>)      <span class=\"ruby-operator\">...</span>\n</pre>\n"],["direct_descendants","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-i-direct_descendants","()",""],["direct_descendants","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-c-direct_descendants","(klass)",""],["dirname","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-c-dirname","()","<p>Returns the directory in which the data files are stored\n"],["dirties_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-c-dirties_query_cache","(base, *method_names)",""],["disable","ActiveModel::ObserverArray","classes/ActiveModel/ObserverArray.html#method-i-disable","(*observers, &block)","<p>Disables one or more observers. This supports multiple forms:\n\n<pre>ORM.observers.disable :user_observer\n  # ...</pre>\n"],["disable_cache","ActionView::LookupContext::DetailsCache","classes/ActionView/LookupContext/DetailsCache.html#method-i-disable_cache","()","<p>Temporary skip passing the details_key forward.\n"],["disable_query_cache!","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-disable_query_cache-21","()",""],["disable_referential_integrity","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disable_referential_integrity","()","<p>Override to turn off referential integrity while executing\n<code>&amp;block</code>.\n"],["disabled_for?","ActiveModel::Observer","classes/ActiveModel/Observer.html#method-i-disabled_for-3F","(object)",""],["disabled_for?","ActiveModel::ObserverArray","classes/ActiveModel/ObserverArray.html#method-i-disabled_for-3F","(observer)","<p>Returns true if the given observer is disabled for the model class.\n"],["disabled_observer_stack","ActiveModel::ObserverArray","classes/ActiveModel/ObserverArray.html#method-i-disabled_observer_stack","()",""],["disabled_observers","ActiveModel::ObserverArray","classes/ActiveModel/ObserverArray.html#method-i-disabled_observers","()",""],["discard","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-discard","(k = nil)","<p>Marks the entire flash or a single flash entry to be discarded by the end\nof the current action:\n\n<pre>flash.discard ...</pre>\n"],["disconnect!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-disconnect-21","()","<p>Disconnects all connections in the pool, and clears the pool.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["dispatch","ActionController::RackDelegation","classes/ActionController/RackDelegation.html#method-i-dispatch","(action, request, response = ActionDispatch::Response.new)",""],["display","ActionController::Responder","classes/ActionController/Responder.html#method-i-display","(resource, given_options={})","<p>Display is just a shortcut to render a resource with the current format.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">display</span> <span class=\"ruby-ivar\">@user</span>, :<span class=\"ruby-identifier\">status</span> =<span class=\"ruby-operator\">&gt;</span> :<span class=\"ruby-identifier\">ok</span>\n</pre>\n"],["display","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-display","(results, options={})","<p>Prints the mapping from filenames to annotations in <code>results</code>\nordered by filename. The <code>options</code> hash is …\n"],["display_errors","ActionController::Responder","classes/ActionController/Responder.html#method-i-display_errors","()",""],["distance_of_time_in_words","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-distance_of_time_in_words","(from_time, to_time = 0, include_seconds = false, options = {})","<p>Reports the approximate distance in time between two Time, Date or DateTime\nobjects or integers as seconds. …\n"],["distance_of_time_in_words_to_now","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-distance_of_time_in_words_to_now","(from_time, include_seconds = false, options = {})",""],["distinct","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-distinct","(columns, order_by)","<p>SELECT DISTINCT clause for a given set of columns and a given ORDER BY\nclause. Both PostgreSQL and Oracle …\n"],["div_for","ActionView::Helpers::RecordTagHelper","classes/ActionView/Helpers/RecordTagHelper.html#method-i-div_for","(record, *args, &block)","<p>Produces a wrapper DIV element with id and class parameters that relate to\nthe specified Active Record …\n"],["doc","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-doc","()",""],["dom_class","ActionController::RecordIdentifier","classes/ActionController/RecordIdentifier.html#method-i-dom_class","(record_or_class, prefix = nil)","<p>The DOM class convention is to use the singular form of an object or class.\nExamples:\n\n<pre>dom_class(post) ...</pre>\n"],["dom_id","ActionController::RecordIdentifier","classes/ActionController/RecordIdentifier.html#method-i-dom_id","(record, prefix = nil)","<p>The DOM id convention is to use the singular form of an object or class\nwith the id following an underscore. …\n"],["domain","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-domain","(tld_length = @@tld_length)","<p>Returns the domain part of a host, such as “rubyonrails.org” in\n“www.rubyonrails.org”. …\n"],["down","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-down","()",""],["downcase","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-downcase","()","<p>Convert characters in the string to lowercase.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'VĚDA A VÝZKUM'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">downcase</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; &quot;věda ...</span>\n</pre>\n"],["download","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-i-download","(link)",""],["drop_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-drop_table","(table_name, options = {})","<p>Drops a table from the database.\n"],["dst?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-dst-3F","()",""],["dummy_path","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-dummy_path","(path = nil)",""],["dup","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-dup","()","<p>Duplicates the current resource without saving it.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">my_invoice</span> = <span class=\"ruby-constant\">Invoice</span>.<span class=\"ruby-identifier\">create</span>(:<span class=\"ruby-identifier\">customer</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'That ...\n</span></pre>\n"],["dup","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-dup","()","<p>Returns an exact copy of the hash.\n"],["dup","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-dup","()","<p>Returns an exact copy of the hash.\n"],["duplicable?","BigDecimal","classes/BigDecimal.html#method-i-duplicable-3F","()",""],["duplicable?","Class","classes/Class.html#method-i-duplicable-3F","()","<p>Classes are not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">c</span> = <span class=\"ruby-constant\">Class</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-comment\"># =&gt; #&lt;Class:0x10328fd80&gt;</span>\n<span class=\"ruby-identifier\">c</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; #&lt;Class:0x10328fd80&gt;</span>\n</pre>\n"],["duplicable?","FalseClass","classes/FalseClass.html#method-i-duplicable-3F","()","<p><code>false</code> is not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">false</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-keyword\">false</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can't dup FalseClass</span>\n</pre>\n"],["duplicable?","Module","classes/Module.html#method-i-duplicable-3F","()","<p>Modules are not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-constant\">Module</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-comment\"># =&gt; #&lt;Module:0x10328b6e0&gt;</span>\n<span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">dup</span>          <span class=\"ruby-comment\"># =&gt; #&lt;Module:0x10328b6e0&gt;</span>\n</pre>\n"],["duplicable?","NilClass","classes/NilClass.html#method-i-duplicable-3F","()","<p><code>nil</code> is not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can't dup NilClass</span>\n</pre>\n"],["duplicable?","Numeric","classes/Numeric.html#method-i-duplicable-3F","()","<p>Numbers are not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">3</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-value\">3</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can't dup Fixnum</span>\n</pre>\n"],["duplicable?","Object","classes/Object.html#method-i-duplicable-3F","()","<p>Can you safely dup this object?\n<p>False for <code>nil</code>, <code>false</code>, <code>true</code>, symbols,\nnumbers, class and module objects; …\n"],["duplicable?","Symbol","classes/Symbol.html#method-i-duplicable-3F","()","<p>Symbols are not duplicable:\n\n<pre class=\"ruby\">:<span class=\"ruby-identifier\">my_symbol</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n:<span class=\"ruby-identifier\">my_symbol</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can't ...</span>\n</pre>\n"],["duplicable?","TrueClass","classes/TrueClass.html#method-i-duplicable-3F","()","<p><code>true</code> is not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">true</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-keyword\">true</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can't dup TrueClass</span>\n</pre>\n"],["each","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-each","(&block)",""],["each","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-each","()",""],["each","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-each","()","<p>Iterates through each error key, value pair in the error messages hash.\nYields the attribute and the …\n"],["each","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-each","(&block)",""],["each","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-each","(&block)",""],["each","ActiveRecord::ConnectionAdapters::SQLiteAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter/StatementPool.html#method-i-each","(&block)",""],["each","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-each","()",""],["each","ActiveRecord::Fixtures","classes/ActiveRecord/Fixtures.html#method-i-each","(&block)",""],["each","ActiveRecord::Fixtures::File","classes/ActiveRecord/Fixtures/File.html#method-i-each","(&block)",""],["each","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-each","()",""],["each","ActiveSupport::Dependencies::WatchStack","classes/ActiveSupport/Dependencies/WatchStack.html#method-i-each","(&block)",""],["each","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-each","()",""],["each_key","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-each_key","()",""],["each_pair","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-each_pair","()",""],["each_subclass_array","ActiveModel::ObserverArray","classes/ActiveModel/ObserverArray.html#method-i-each_subclass_array","()",""],["each_value","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-each_value","()",""],["each_with_object","Enumerable","classes/Enumerable.html#method-i-each_with_object","(memo)","<p>Iterates over a collection, passing the current element\n<strong>and</strong> the <code>memo</code> to the block. Handy for building\n…\n"],["eager_autoload","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-i-eager_autoload","()",""],["eager_autoload!","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-c-eager_autoload-21","()",""],["eager_load","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-eager_load","(*args)",""],["eager_load","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-eager_load","()",""],["eager_load!","Rails::Engine","classes/Rails/Engine.html#method-i-eager_load-21","()",""],["eager_load!","Rails::Railtie","classes/Rails/Railtie.html#method-i-eager_load-21","()",""],["eager_load_paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-eager_load_paths","()",""],["eager_loading?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-eager_loading-3F","()",""],["element_name","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-element_name","()",""],["element_path","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-element_path","(options = nil)",""],["element_path","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-element_path","(id, prefix_options = {}, query_options = nil)","<p>Gets the element path for the given ID in <code>id</code>.  If the\n<code>query_options</code> parameter is omitted, Rails will …\n"],["email_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-email_field","(object_name, method, options = {})","<p>Returns a text_field of type “email”.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">email_field</span>(<span class=\"ruby-string\">&quot;user&quot;</span>, <span class=\"ruby-string\">&quot;address&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; &lt;input id=&quot;user_address&quot; ...</span>\n</pre>\n"],["email_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-email_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “email”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["emitted_hidden_id?","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-emitted_hidden_id-3F","()",""],["empty?","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-empty-3F","()",""],["empty?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-empty-3F","()","<p>Returns true if no errors are found, false otherwise. If the error message\nis a string it can be empty. …\n"],["empty?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-empty-3F","()","<p>Returns true if there are no records.\n"],["empty?","ActiveSupport::Dependencies::ClassCache","classes/ActiveSupport/Dependencies/ClassCache.html#method-i-empty-3F","()",""],["empty_directory_with_gitkeep","Rails::Generators::AppBase","classes/Rails/Generators/AppBase.html#method-i-empty_directory_with_gitkeep","(destination, config = {})",""],["empty_insert_statement_value","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-empty_insert_statement_value","()",""],["empty_insert_statement_value","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-empty_insert_statement_value","()",""],["emulate_booleans","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-c-emulate_booleans","","<p>By default, the MysqlAdapter will consider all columns of type\n<code>tinyint(1)</code> as boolean. If you wish to …\n"],["enable","ActiveModel::ObserverArray","classes/ActiveModel/ObserverArray.html#method-i-enable","(*observers, &block)","<p>Enables one or more observers. This supports multiple forms:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ORM</span>.<span class=\"ruby-identifier\">observers</span>.<span class=\"ruby-identifier\">enable</span> :<span class=\"ruby-identifier\">user_observer</span>\n  <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["enable_query_cache!","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-enable_query_cache-21","()",""],["enable_warnings","Kernel","classes/Kernel.html#method-i-enable_warnings","()","<p>Sets $VERBOSE to true for the duration of the block and back to its\noriginal value afterwards.\n"],["enabled","ActiveRecord::IdentityMap","classes/ActiveRecord/IdentityMap.html#method-c-enabled","()",""],["enabled=","ActiveRecord::IdentityMap","classes/ActiveRecord/IdentityMap.html#method-c-enabled-3D","(flag)",""],["enabled?","ActiveRecord::IdentityMap","classes/ActiveRecord/IdentityMap.html#method-c-enabled-3F","()",""],["encode","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-encode","(options={})","<p>Returns the serialized string representation of the resource in the\nconfigured serialization format specified …\n"],["encode","ActiveResource::Formats::JsonFormat","classes/ActiveResource/Formats/JsonFormat.html#method-i-encode","(hash, options = nil)",""],["encode","ActiveResource::Formats::XmlFormat","classes/ActiveResource/Formats/XmlFormat.html#method-i-encode","(hash, options={})",""],["encode","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-encode","(value, options = nil)","<p>Dumps object in JSON (JavaScript Object Notation). See www.json.org for\nmore info.\n"],["encode","ActiveSupport::JSON::Encoding::Encoder","classes/ActiveSupport/JSON/Encoding/Encoder.html#method-i-encode","(value, use_options = true)",""],["encode!","ActionView::Template","classes/ActionView/Template.html#method-i-encode-21","()","<p>This method is responsible for properly setting the encoding of the source.\nUntil this point, we assume …\n"],["encode64","ActiveSupport::Base64","classes/ActiveSupport/Base64.html#method-c-encode64","(value)",""],["encode64","Base64","classes/Base64.html#method-c-encode64","(data)","<p>Encodes a string to its base 64 representation. Each 60 characters of\noutput is separated by a newline …\n"],["encode64s","ActiveSupport::Base64","classes/ActiveSupport/Base64.html#method-c-encode64s","(value)",""],["encode_credentials","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-encode_credentials","(user_name, password)",""],["encode_credentials","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-encode_credentials","(http_method, credentials, password, password_is_ha1)",""],["encode_credentials","ActionController::HttpAuthentication::Token","classes/ActionController/HttpAuthentication/Token.html#method-i-encode_credentials","(token, options = {})","<p>Encodes the given token and options into an Authorization header value.\n<p>token   - String token. options …\n"],["encode_json","ActiveSupport::JSON::Variable","classes/ActiveSupport/JSON/Variable.html#method-i-encode_json","(encoder)",""],["encode_json","FalseClass","classes/FalseClass.html#method-i-encode_json","(encoder)",""],["encode_json","Hash","classes/Hash.html#method-i-encode_json","(encoder)",""],["encode_json","NilClass","classes/NilClass.html#method-i-encode_json","(encoder)",""],["encode_json","Numeric","classes/Numeric.html#method-i-encode_json","(encoder)",""],["encode_json","String","classes/String.html#method-i-encode_json","(encoder)",""],["encode_json","TrueClass","classes/TrueClass.html#method-i-encode_json","(encoder)",""],["encode_with","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-encode_with","(coder)","<p>Populate <code>coder</code> with attributes about this record that should\nbe serialized. The structure of <code>coder</code> defined …\n"],["encode_with","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-encode_with","(coder)",""],["encode_with","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-encode_with","(coder)",""],["encode_with","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-encode_with","(coder)",""],["encode_with","BigDecimal","classes/BigDecimal.html#method-i-encode_with","(coder)",""],["encoding","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-encoding","()","<p>Returns the current database encoding format.\n"],["encoding=","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-encoding-3D","(value)",""],["encoding_aware?","String","classes/String.html#method-i-encoding_aware-3F","()",""],["encrypt","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-i-encrypt","(value)",""],["encrypt_and_sign","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-i-encrypt_and_sign","(value)","<p>Encrypt and sign a message. We need to sign the message in order to avoid\npadding attacks. Reference: …\n"],["end_document","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-end_document","()",""],["end_element","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-end_element","(name)",""],["end_of_day","Date","classes/Date.html#method-i-end_of_day","()","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the end of the day (23:59:59) …\n"],["end_of_day","DateTime","classes/DateTime.html#method-i-end_of_day","()","<p>Returns a new DateTime representing the end of the day (23:59:59)\n"],["end_of_day","Time","classes/Time.html#method-i-end_of_day","()","<p>Returns a new Time representing the end of the day, 23:59:59.999999\n(.999999999 in ruby1.9)\n"],["end_of_hour","DateTime","classes/DateTime.html#method-i-end_of_hour","()","<p>Returns a new DateTime representing the end of the hour (hh:59:59)\n"],["end_of_hour","Time","classes/Time.html#method-i-end_of_hour","()","<p>Returns a new Time representing the end of the hour, x:59:59.999999\n(.999999999 in ruby1.9)\n"],["end_of_month","Date","classes/Date.html#method-i-end_of_month","()","<p>Returns a new Date/DateTime representing the end of the month (last day of\nthe month; DateTime objects …\n"],["end_of_month","Time","classes/Time.html#method-i-end_of_month","()","<p>Returns a new Time representing the end of the month (end of the last day\nof the month)\n"],["end_of_quarter","Date","classes/Date.html#method-i-end_of_quarter","()","<p>Returns a new Date/DateTime representing the end of the quarter (last day\nof march, june, september, …\n"],["end_of_quarter","Time","classes/Time.html#method-i-end_of_quarter","()","<p>Returns a new Time representing the end of the quarter (end of the last day\nof march, june, september, …\n"],["end_of_week","Date","classes/Date.html#method-i-end_of_week","(start_day = :monday)","<p>Returns a new <code>Date</code>/<code>DateTime</code> representing the end\nof this week. Week is assumed to start on <code>start_day</code> …\n"],["end_of_week","Time","classes/Time.html#method-i-end_of_week","(start_day = :monday)","<p>Returns a new Time representing the end of this week, week starts on\nstart_day (default is :monday,  …\n"],["end_of_year","Date","classes/Date.html#method-i-end_of_year","()","<p>Returns a new Time representing the end of the year (31st of december;\nDateTime objects will have time …\n"],["end_of_year","Time","classes/Time.html#method-i-end_of_year","()","<p>Returns a new Time representing the end of the year (end of the 31st of\ndecember)\n"],["end_transaction","ActiveModel::ObserverArray","classes/ActiveModel/ObserverArray.html#method-i-end_transaction","()",""],["endpoint","Rails::Engine","classes/Rails/Engine.html#method-i-endpoint","()",""],["endpoint","Rails::Engine","classes/Rails/Engine.html#method-c-endpoint","(endpoint = nil)",""],["engine","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-engine","()",""],["engine=","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-engine-3D","(name)",""],["engines","Rails::Engine::Railties","classes/Rails/Engine/Railties.html#method-c-engines","()",""],["enlist_fixture_connections","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-enlist_fixture_connections","()",""],["entry","ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder","classes/ActionView/Helpers/AtomFeedHelper/AtomFeedBuilder.html#method-i-entry","(record, options = {})","<p>Creates an entry tag for a specific record and prefills the id using class\nand id.\n<p>Options:\n<p><code>:published</code> ...\n"],["enumerate","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-c-enumerate","(tag, options={})","<p>Prints all annotations with tag <code>tag</code> under the root directories\n<code>app</code>, <code>config</code>, <code>lib</code>,\n<code>script</code>, and <code>test</code> (recursively). …\n"],["env","ActionController::Metal","classes/ActionController/Metal.html#method-i-env","()",""],["env","Rails","classes/Rails.html#method-c-env","()",""],["env=","Rails","classes/Rails.html#method-c-env-3D","(environment)",""],["env_config","Rails::Application","classes/Rails/Application.html#method-i-env_config","()","<p>Rails.application.env_config stores some of the Rails initial environment\nparameters. Currently stores: …\n"],["env_config","Rails::Engine","classes/Rails/Engine.html#method-i-env_config","()",""],["env_filter","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-env_filter","()",""],["environment","ActiveSupport::Testing::Performance::Benchmarker","classes/ActiveSupport/Testing/Performance/Benchmarker.html#method-i-environment","()",""],["environment","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-environment","(data=nil, options={}, &block)","<p>Adds a line inside the Application class for config/application.rb.\n<p>If options :env is specified, the …\n"],["environment=","Rails::Commands::Plugin","classes/Rails/Commands/Plugin.html#method-i-environment-3D","(value)",""],["eql?","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-i-eql-3F","(resolver)",""],["eql?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-eql-3F","(comparison_object)",""],["eql?","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-eql-3F","(other)","<p>Tests for equality (delegates to ==).\n"],["eql?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-eql-3F","(other)",""],["eql?","Time","classes/Time.html#method-i-eql-3F","(other)",""],["eql_with_coercion","Time","classes/Time.html#method-i-eql_with_coercion","(other)","<p>Layers additional behavior on Time#eql? so that ActiveSupport::TimeWithZone\ninstances can be eql? to …\n"],["eql_without_coercion","Time","classes/Time.html#method-i-eql_without_coercion","(other)",""],["error","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-error","(error_message)",""],["error_message","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-error_message","()",""],["error_number","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-error_number","(exception)",""],["error_wrapping","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-error_wrapping","(html_tag)",""],["errors","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-errors","()","<p>Returns the <code>Errors</code> object that holds all information about\nattribute error messages.\n"],["errors","ActiveResource::Validations","classes/ActiveResource/Validations.html#method-i-errors","()","<p>Returns the Errors object that holds all information about attribute error\nmessages.\n"],["errors","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-errors","()","<p>POST create PUT update\n"],["escape","ActiveSupport::JSON::Encoding::Encoder","classes/ActiveSupport/JSON/Encoding/Encoder.html#method-i-escape","(string)",""],["escape_bytea","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-escape_bytea","(value)","<p>Escapes binary strings for bytea input to the database.\n"],["escape_glob_chars","ActionDispatch::FileHandler","classes/ActionDispatch/FileHandler.html#method-i-escape_glob_chars","(path)",""],["escape_javascript","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-escape_javascript","(javascript)","<p>Escapes carriage returns and single and double quotes for JavaScript\nsegments.\n<p>Also available through …\n"],["escape_once","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-escape_once","(html)","<p>Returns an escaped version of <code>html</code> without affecting existing\nescaped entities.\n<p>Examples\n\n<pre>escape_once(&quot;1 ...</pre>\n"],["establish_connection","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-establish_connection","(spec = ENV[\"DATABASE_URL\"])","<p>Establishes the connection to the database. Accepts a hash as input where\nthe <code>:adapter</code> key must be specified …\n"],["establish_connection","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-establish_connection","(name, spec)",""],["etag=","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-etag-3D","(etag)",""],["etag_matches?","ActionDispatch::Http::Cache::Request","classes/ActionDispatch/Http/Cache/Request.html#method-i-etag_matches-3F","(etag)",""],["evaluate_default_scope","ActiveRecord::Scoping::Default::ClassMethods","classes/ActiveRecord/Scoping/Default/ClassMethods.html#method-i-evaluate_default_scope","()","<p>The ignore_default_scope flag is used to prevent an infinite recursion\nsituation where a default scope …\n"],["exabyte","Numeric","classes/Numeric.html#method-i-exabyte","()",""],["exabytes","Numeric","classes/Numeric.html#method-i-exabytes","()",""],["except","ActiveRecord::SpawnMethods","classes/ActiveRecord/SpawnMethods.html#method-i-except","(*skips)","<p>Removes from the query the condition(s) specified in <code>skips</code>.\n<p>Example:\n\n<pre>Post.order('id asc').except(:order) ...</pre>\n"],["except","Hash","classes/Hash.html#method-i-except","(*keys)","<p>Return a hash that includes everything but the given keys. This is useful\nfor limiting a set of parameters …\n"],["except!","Hash","classes/Hash.html#method-i-except-21","(*keys)","<p>Replaces the hash without the given keys.\n"],["excerpt","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-excerpt","(text, phrase, *args)","<p>Extracts an excerpt from <code>text</code> that matches the first instance\nof <code>phrase</code>. The <code>:radius</code> option expands the …\n"],["exclude?","Enumerable","classes/Enumerable.html#method-i-exclude-3F","(object)","<p>The negative of the <code>Enumerable#include?</code>. Returns true if the\ncollection does not include the object. …\n"],["exclude?","String","classes/String.html#method-i-exclude-3F","(string)","<p>The inverse of <code>String#include?</code>. Returns true if the string\ndoes not include the other string.\n\n<pre>&quot;hello&quot;.exclude? ...</pre>\n"],["exec_delete","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_delete","(sql, name, binds)","<p>Executes delete <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_delete","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_delete","(sql, name, binds)",""],["exec_delete","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-exec_delete","(sql, name, binds)",""],["exec_delete","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-exec_delete","(sql, name = 'SQL', binds = [])",""],["exec_delete","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-exec_delete","(sql, name = 'SQL', binds = [])",""],["exec_insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_insert","(sql, name, binds)","<p>Executes insert <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_insert","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_insert","(sql, name, binds)",""],["exec_query","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_query","(sql, name = 'SQL', binds = [])","<p>Executes <code>sql</code> statement in the context of this connection using\n<code>binds</code> as the bind substitutes. <code>name</code> is …\n"],["exec_query","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_query","(sql, name = 'SQL', binds = [])",""],["exec_query","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-exec_query","(sql, name = 'SQL', binds = [])",""],["exec_query","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-exec_query","(sql, name = 'SQL', binds = [])",""],["exec_query","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-exec_query","(sql, name = nil, binds = [])",""],["exec_script_rails!","Rails::ScriptRailsLoader","classes/Rails/ScriptRailsLoader.html#method-c-exec_script_rails-21","()",""],["exec_update","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_update","(sql, name, binds)","<p>Executes update <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_update","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_update","(sql, name, binds)",""],["exec_update","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-exec_update","(sql, name, binds)",""],["exec_update","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-exec_update","(sql, name = 'SQL', binds = [])",""],["exec_update","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-exec_update","(sql, name = 'SQL', binds = [])",""],["exec_without_stmt","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_without_stmt","(sql, name = 'SQL', binds = [])",""],["execute","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-execute","(sql, name = nil)","<p>Executes an SQL statement, returning a PGresult object on success or\nraising a PGError exception otherwise. …\n"],["execute","ActiveSupport::FileUpdateChecker","classes/ActiveSupport/FileUpdateChecker.html#method-i-execute","()","<p>Executes the given block and updates the counter to latest timestamp.\n"],["execute_and_free","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-execute_and_free","(sql, name = nil)",""],["execute_hook","ActiveSupport","classes/ActiveSupport.html#method-c-execute_hook","(base, options, block)",""],["execute_if_updated","ActiveSupport::FileUpdateChecker","classes/ActiveSupport/FileUpdateChecker.html#method-i-execute_if_updated","()","<p>Execute the block given if updated.\n"],["exist?","ActionDispatch::RailsEntityStore","classes/ActionDispatch/RailsEntityStore.html#method-i-exist-3F","(key)",""],["exist?","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-exist-3F","(name, options = nil)","<p>Return true if the cache contains an entry for the given key.\n<p>Options are passed to the underlying cache …\n"],["existent","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-existent","()","<p>Returns all expanded paths but only if they exist in the filesystem.\n"],["existent_directories","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-existent_directories","()",""],["exists?","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-exists-3F","(name, prefixes = [], partial = false, keys = [], options = {})",""],["exists?","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-exists-3F","(id = false)","<p>Returns true if a record exists in the table that matches the\n<code>id</code> or conditions given, or false otherwise. …\n"],["exists?","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-exists-3F","()","<p>Evaluates to <code>true</code> if this resource is not <code>new?</code>\nand is found on the remote service.  Using this method, …\n"],["exists?","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-exists-3F","(id, options = {})","<p>Asserts the existence of a resource, returning <code>true</code> if the\nresource is found.\n<p>Examples\n\n<pre>Note.create(:title ...</pre>\n"],["exit_on_failure?","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-c-exit_on_failure-3F","()","<p>We want to exit on failure to be kind to other libraries This is only when\naccessing via CLI\n"],["expand_cache_key","ActiveSupport::Cache","classes/ActiveSupport/Cache.html#method-c-expand_cache_key","(key, namespace = nil)",""],["expand_hash_conditions_for_aggregates","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-expand_hash_conditions_for_aggregates","(attrs)","<p>Accepts a hash of SQL conditions and replaces those attributes that\ncorrespond to a <code>composed_of</code> relationship …\n"],["expanded","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-expanded","()","<p>Expands all paths against the root and return all unique values.\n"],["expected_response","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-expected_response","(http_method, uri, credentials, password, password_is_ha1=true)","<p>Returns the expected response for a request of <code>http_method</code> to\n<code>uri</code> with the decoded <code>credentials</code> and the …\n"],["expire","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-expire","()",""],["expire_action","ActionController::Caching::Actions","classes/ActionController/Caching/Actions.html#method-i-expire_action","(options = {})",""],["expire_fragment","ActionController::Caching::Fragments","classes/ActionController/Caching/Fragments.html#method-i-expire_fragment","(key, options = nil)","<p>Removes fragments from the cache.\n<p><code>key</code> can take one of three forms:\n<p>String - This would normally take the …\n"],["expire_page","ActionController::Caching::Pages","classes/ActionController/Caching/Pages.html#method-i-expire_page","(options = {})","<p>Expires the page that was cached with the <code>options</code> as a key.\nExample:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">expire_page</span> :<span class=\"ruby-identifier\">controller</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;lists&quot;</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["expire_page","ActionController::Caching::Pages::ClassMethods","classes/ActionController/Caching/Pages/ClassMethods.html#method-i-expire_page","(path)","<p>Expires the page that was cached with the <code>path</code> as a key.\nExample:\n\n<pre>expire_page &quot;/lists/show&quot;</pre>\n"],["expired?","ActiveSupport::Cache::Entry","classes/ActiveSupport/Cache/Entry.html#method-i-expired-3F","()","<p>Check if the entry is expired. The <code>expires_in</code> parameter can\noverride the value set when the entry was …\n"],["expires_at","ActiveSupport::Cache::Entry","classes/ActiveSupport/Cache/Entry.html#method-i-expires_at","()","<p>Seconds since the epoch when the entry will expire.\n"],["expires_at=","ActiveSupport::Cache::Entry","classes/ActiveSupport/Cache/Entry.html#method-i-expires_at-3D","(time)","<p>Set a new time when the entry will expire.\n"],["expires_in","ActionController::ConditionalGet","classes/ActionController/ConditionalGet.html#method-i-expires_in","(seconds, options = {})","<p>Sets a HTTP 1.1 Cache-Control header. Defaults to issuing a\n<code>private</code> instruction, so that intermediate …\n"],["expires_now","ActionController::ConditionalGet","classes/ActionController/ConditionalGet.html#method-i-expires_now","()","<p>Sets a HTTP 1.1 Cache-Control header of <code>no-cache</code> so no caching\nshould occur by the browser or intermediate …\n"],["explain","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-explain","(arel, binds = [])","<p>DATABASE STATEMENTS ======================================\n"],["explain","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-explain","(arel, binds = [])","<p>DATABASE STATEMENTS ======================================\n"],["explain","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-explain","(arel, binds = [])","<p>DATABASE STATEMENTS ======================================\n"],["explain","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-explain","()","<p>Runs EXPLAIN on the query or queries triggered by this relation and returns\nthe result as a string.  …\n"],["ext","ActionDispatch::FileHandler","classes/ActionDispatch/FileHandler.html#method-i-ext","()",""],["extended","ActiveModel::Callbacks","classes/ActiveModel/Callbacks.html#method-c-extended","(base)",""],["extended","ActiveRecord::Explain","classes/ActiveRecord/Explain.html#method-c-extended","(base)",""],["extended","ActiveSupport::Concern","classes/ActiveSupport/Concern.html#method-c-extended","(base)",""],["extended","ActiveSupport::Memoizable","classes/ActiveSupport/Memoizable.html#method-c-extended","(base)",""],["extended","ActiveSupport::Testing::Declarative","classes/ActiveSupport/Testing/Declarative.html#method-c-extended","(klass)",""],["extending","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-extending","(*modules)","<p>Used to extend a scope with additional methods, either through a module or\nthrough a block provided. …\n"],["extension","ActionView::Helpers::AssetTagHelper::AssetIncludeTag","classes/ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html#method-i-extension","()",""],["extension","ActionView::Helpers::AssetTagHelper::JavascriptIncludeTag","classes/ActionView/Helpers/AssetTagHelper/JavascriptIncludeTag.html#method-i-extension","()",""],["extension","ActionView::Helpers::AssetTagHelper::StylesheetIncludeTag","classes/ActionView/Helpers/AssetTagHelper/StylesheetIncludeTag.html#method-i-extension","()",""],["extension","ActiveResource::Formats::JsonFormat","classes/ActiveResource/Formats/JsonFormat.html#method-i-extension","()",""],["extension","ActiveResource::Formats::XmlFormat","classes/ActiveResource/Formats/XmlFormat.html#method-i-extension","()",""],["externals","RailsEnvironment","classes/RailsEnvironment.html#method-i-externals","()",""],["externals=","RailsEnvironment","classes/RailsEnvironment.html#method-i-externals-3D","(items)",""],["extify","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-extify","(name)","<p>Add an extension to the given name based on the platform.\n"],["extract!","Hash","classes/Hash.html#method-i-extract-21","(*keys)","<p>Removes and returns the key/value pairs matching the given keys.\n\n<pre class=\"ruby\">{:<span class=\"ruby-identifier\">a</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">1</span>, :<span class=\"ruby-identifier\">b</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">2</span>, :<span class=\"ruby-identifier\">c</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">3</span>, :<span class=\"ruby-identifier\">d</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">4</span>}.<span class=\"ruby-identifier\">extract!</span>(:<span class=\"ruby-identifier\">a</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["extract_annotations_from","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-extract_annotations_from","(file, pattern)","<p>If <code>file</code> is the filename of a file that contains annotations\nthis method returns a hash with a single …\n"],["extract_domain","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-c-extract_domain","(host, tld_length = @@tld_length)",""],["extract_options!","Array","classes/Array.html#method-i-extract_options-21","()","<p>Extracts options from a set of arguments. Removes and returns the last\nelement in the array if it’s a …\n"],["extract_schema_and_table","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Utils","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Utils.html#method-i-extract_schema_and_table","(name)","<p>Returns an array of <code>[schema_name, table_name]</code> extracted from\n<code>name</code>. <code>schema_name</code> is nil if not specified …\n"],["extract_session_id","ActionDispatch::Session::StaleSessionCheck","classes/ActionDispatch/Session/StaleSessionCheck.html#method-i-extract_session_id","(env)",""],["extract_subdomain","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-c-extract_subdomain","(host, tld_length = @@tld_length)",""],["extract_subdomains","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-c-extract_subdomains","(host, tld_length = @@tld_length)",""],["extractable_options?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-extractable_options-3F","()","<p>Always returns true, so that <code>Array#extract_options!</code> finds\nmembers of this class.\n"],["extractable_options?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-extractable_options-3F","()","<p>Always returns true, so that <code>Array#extract_options!</code> finds\nmembers of this class.\n"],["extractable_options?","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-extractable_options-3F","()","<p>Returns true to make sure that this hash is extractable via\n<code>Array#extract_options!</code>\n"],["extractable_options?","Hash","classes/Hash.html#method-i-extractable_options-3F","()","<p>By default, only instances of Hash itself are extractable. Subclasses of\nHash may implement this method …\n"],["fallbacks","Rails::Generators","classes/Rails/Generators.html#method-c-fallbacks","()","<p>Hold configured generators fallbacks. If a plugin developer wants a\ngenerator group to fallback to another …\n"],["favicon_link_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-favicon_link_tag","(source='/favicon.ico', options={})","\n<pre>&lt;%= favicon_link_tag %&gt;</pre>\n<p>generates\n\n<pre>&lt;link href=&quot;/favicon.ico&quot; rel=&quot;shortcut icon&quot; type=&quot;image/vnd.microsoft.icon&quot; ...</pre>\n"],["fetch","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-fetch","(name, options = nil)","<p>Fetches data from the cache, using the given key. If there is data in the\ncache with the given key, then …\n"],["fetch","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-fetch","(key, *extras)","<p>Same as <code>Hash#fetch</code> where the key passed as argument can be\neither a string or a symbol:\n\n<pre>counters = HashWithIndifferentAccess.new ...</pre>\n"],["fetch","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-fetch","(key, *extras)","<p>Same as <code>Hash#fetch</code> where the key passed as argument can be\neither a string or a symbol:\n\n<pre>counters = HashWithIndifferentAccess.new ...</pre>\n"],["fetch","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-i-fetch","(links = @urls_to_fetch)",""],["fetch_dir","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-i-fetch_dir","(url)",""],["field_set_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-field_set_tag","(legend = nil, options = nil, &block)","<p>Creates a field set for grouping HTML form elements.\n<p><code>legend</code> will become the fieldset's title (optional ...\n"],["field_type","Rails::Generators::GeneratedAttribute","classes/Rails/Generators/GeneratedAttribute.html#method-i-field_type","()",""],["fields_for","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-fields_for","(record_name, record_object = nil, fields_options = {}, &block)",""],["fields_for","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-fields_for","(record_name, record_object = nil, options = {}, &block)","<p>Creates a scope around a specific model object like form_for, but doesn’t\ncreate the form tags themselves. …\n"],["fifth","Array","classes/Array.html#method-i-fifth","()","<p>Equal to <code>self[4]</code>.\n"],["file","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-file","(*args, &block)","<p>Define file as an alias to create_file for backwards compatibility.\n"],["file_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-file_field","(method, options = {})",""],["file_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-file_field","(object_name, method, options = {})","<p>Returns a file upload input tag tailored for accessing a specified\nattribute (identified by <code>method</code>) on …\n"],["file_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-file_field_tag","(name, options = {})","<p>Creates a file upload field. If you are using file uploads then you will\nalso need to set the multipart …\n"],["file_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-file_path","()",""],["filename","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-c-filename","()","<p>Returns the filename for the data file for this version\n"],["filter","ActionDispatch::Http::ParameterFilter","classes/ActionDispatch/Http/ParameterFilter.html#method-i-filter","(params)",""],["filter_by","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-filter_by","(constraint)",""],["filtered_env","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-filtered_env","()","<p>Return a hash of request.env with all sensitive data replaced.\n"],["filtered_options","ActiveModel::Validations::NumericalityValidator","classes/ActiveModel/Validations/NumericalityValidator.html#method-i-filtered_options","(value)",""],["filtered_parameters","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-filtered_parameters","()","<p>Return a hash of parameters with all sensitive data replaced.\n"],["filtered_path","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-filtered_path","()","<p>Reconstructed a path with all sensitive GET parameters replaced.\n"],["filtered_query_string","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-filtered_query_string","()",""],["find","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-find","(name, prefixes = [], partial = false, keys = [], options = {})",""],["find","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find","(*args)","<p>Find operates with four different retrieval approaches:\n<p>Find by id - This can either be a specific id …\n"],["find","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-find","(*arguments)","<p>Core method for finding resources.  Used similarly to Active Record’s\n<code>find</code> method.\n<p>Arguments\n<p>The first …\n"],["find","Plugin","classes/Plugin.html#method-c-find","(name)",""],["find","Rails::Engine","classes/Rails/Engine.html#method-c-find","(path)","<p>Finds engine with given path\n"],["find","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-find","(klass, params=nil)","<p>GET show GET edit PUT update DELETE destroy\n"],["find","RailsEnvironment","classes/RailsEnvironment.html#method-c-find","(dir=nil)",""],["find","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-find","(dirs=%w(app config lib script test))","<p>Returns a hash that maps filenames under <code>dirs</code> (recursively) to\narrays with their annotations.\n"],["find_all","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-find_all","(name, prefixes = [], partial = false, keys = [], options = {})",""],["find_all","ActionView::Resolver","classes/ActionView/Resolver.html#method-i-find_all","(name, prefix=nil, partial=false, details={}, key=nil, locals=[])","<p>Normalizes the arguments and passes it on to find_template.\n"],["find_all_tag","ActionDispatch::Assertions::TagAssertions","classes/ActionDispatch/Assertions/TagAssertions.html#method-i-find_all_tag","(conditions)",""],["find_by_attributes","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_by_attributes","(match, attributes, *args)",""],["find_by_session_id","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-c-find_by_session_id","(session_id)","<p>Hook to set up sessid compatibility.\n"],["find_by_session_id","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-find_by_session_id","(session_id)","<p>Look up a session by id and unmarshal its data if found.\n"],["find_by_sql","ActiveRecord::Querying","classes/ActiveRecord/Querying.html#method-i-find_by_sql","(sql, binds = [])","<p>Executes a custom SQL query against your database and returns all the\nresults. The results will be returned …\n"],["find_cmd","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-find_cmd","(*commands)",""],["find_each","ActiveRecord::Batches","classes/ActiveRecord/Batches.html#method-i-find_each","(options = {})","<p>Yields each record that was found by the find <code>options</code>. The\nfind is performed by find_in_batches with …\n"],["find_first","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_first","()",""],["find_in","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-find_in","(dir)","<p>Returns a hash that maps filenames under <code>dir</code> (recursively) to\narrays with their annotations. Only files …\n"],["find_in_batches","ActiveRecord::Batches","classes/ActiveRecord/Batches.html#method-i-find_in_batches","(options = {})","<p>Yields each batch of records that was found by the find\n<code>options</code> as an array. The size of each batch is …\n"],["find_last","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_last","()",""],["find_one","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_one","(id)",""],["find_or_instantiator_by_attributes","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_or_instantiator_by_attributes","(match, attributes, *args)",""],["find_root_with_flag","Rails::Engine","classes/Rails/Engine.html#method-i-find_root_with_flag","(flag, default=nil)",""],["find_some","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_some","(ids)",""],["find_tag","ActionDispatch::Assertions::TagAssertions","classes/ActionDispatch/Assertions/TagAssertions.html#method-i-find_tag","(conditions)",""],["find_template","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-find_template","(name, prefixes = [], partial = false, keys = [], options = {})",""],["find_tzinfo","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-find_tzinfo","(name)",""],["find_with_associations","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_with_associations","()",""],["find_with_ids","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_with_ids","(*ids)",""],["find_zone","Time","classes/Time.html#method-c-find_zone","(time_zone)",""],["find_zone!","Time","classes/Time.html#method-c-find_zone-21","(time_zone)","<p>Returns a TimeZone instance or nil, or raises an ArgumentError for invalid\ntimezones.\n"],["finder?","ActiveRecord::DynamicFinderMatch","classes/ActiveRecord/DynamicFinderMatch.html#method-i-finder-3F","()",""],["finish_template","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-finish_template","()",""],["finish_template","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-finish_template","()",""],["first","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-first","(*args)","<p>A convenience wrapper for <code>find(:first, *args)</code>. You can pass in\nall the same arguments to this method …\n"],["first","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-first","(*args)","<p>A convenience wrapper for <code>find(:first, *args)</code>. You can pass in\nall the same arguments to this method …\n"],["first","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-first","()",""],["first","String","classes/String.html#method-i-first","(limit = 1)","<p>Returns the first character of the string or the first <code>limit</code>\ncharacters.\n<p>Examples:\n\n<pre>&quot;hello&quot;.first     # ...</pre>\n"],["first!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-first-21","()","<p>Same as <code>first</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found. Note that\n<code>first!</code> accepts …\n"],["first_or_create","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-first_or_create","(attributes = nil, options = {}, &block)","<p>Tries to load the first record; if it fails, then <code>create</code> is\ncalled with the same arguments as this method. …\n"],["first_or_create!","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-first_or_create-21","(attributes = nil, options = {}, &block)","<p>Like <code>first_or_create</code> but calls <code>create!</code> so an\nexception is raised if the created record is invalid.\n<p>Expects …\n"],["first_or_initialize","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-first_or_initialize","(attributes = nil, options = {}, &block)","<p>Like <code>first_or_create</code> but calls <code>new</code> instead of\n<code>create</code>.\n<p>Expects arguments in the same format as <code>Base.new</code> …\n"],["fixture_file_upload","ActionDispatch::TestProcess","classes/ActionDispatch/TestProcess.html#method-i-fixture_file_upload","(path, mime_type = nil, binary = false)","<p>Shortcut for\n<code>Rack::Test::UploadedFile.new(ActionController::TestCase.fixture_path\n+ path, type)</code>:\n\n<pre>post ...</pre>\n"],["fixture_is_cached?","ActiveRecord::Fixtures","classes/ActiveRecord/Fixtures.html#method-c-fixture_is_cached-3F","(connection, table_name)",""],["fixtures","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-fixtures","(*fixture_names)",""],["flash","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-flash","()","<p>Access the contents of the flash. Use <code>flash[\"notice\"]</code> to read\na notice you put there or <code>flash[\"notice\"]</code> …\n"],["flash","ActionDispatch::TestProcess","classes/ActionDispatch/TestProcess.html#method-i-flash","()",""],["flush","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-flush","()",""],["flush","ActiveSupport::LogSubscriber::TestHelper::MockLogger","classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-flush","()",""],["flush","ActiveSupport::TaggedLogging","classes/ActiveSupport/TaggedLogging.html#method-i-flush","()",""],["flush_all!","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-c-flush_all-21","()","<p>Flush all log_subscribers’ logger.\n"],["flush_cache","ActiveSupport::Memoizable::InstanceMethods","classes/ActiveSupport/Memoizable/InstanceMethods.html#method-i-flush_cache","(*syms)",""],["flushable_loggers","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-c-flushable_loggers","()",""],["follow_redirect!","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-follow_redirect-21","()","<p>Follow a single redirect response. If the last response was not a redirect,\nan exception will be raised. …\n"],["font_path","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-font_path","(source)","<p>Computes the path to a font asset in the public fonts directory. Full paths\nfrom the document root will …\n"],["for_class","HTML::Selector","classes/HTML/Selector.html#method-c-for_class","(cls)","<p>Creates a new selector for the given class name.\n"],["for_id","HTML::Selector","classes/HTML/Selector.html#method-c-for_id","(id)","<p>Creates a new selector for the given id.\n"],["for_tag","ActiveSupport::TestCase","classes/ActiveSupport/TestCase.html#method-c-for_tag","(tag)",""],["force_ssl","ActionController::ForceSSL::ClassMethods","classes/ActionController/ForceSSL/ClassMethods.html#method-i-force_ssl","(options = {})","<p>Force the request to this particular controller or specified actions to be\nunder HTTPS protocol.\n<p>Note …\n"],["foreign_key","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-foreign_key","(class_name, separate_class_name_and_id_with_underscore = true)","<p>Creates a foreign key name from a class name.\n<code>separate_class_name_and_id_with_underscore</code> sets whether …\n"],["foreign_key","String","classes/String.html#method-i-foreign_key","(separate_class_name_and_id_with_underscore = true)","<p>Creates a foreign key name from a class name.\n<code>separate_class_name_and_id_with_underscore</code> sets whether …\n"],["forking_env?","ActiveSupport::Testing::Isolation","classes/ActiveSupport/Testing/Isolation.html#method-c-forking_env-3F","()",""],["form_authenticity_param","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-form_authenticity_param","()","<p>The form’s authenticity parameter. Override to provide your own.\n"],["form_authenticity_token","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-form_authenticity_token","()","<p>Sets the token value for the current session.\n"],["form_data?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-form_data-3F","()",""],["form_for","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-form_for","(record, options = {}, &block)","<p>Creates a form and a scope around a specific model object that is used as a\nbase for questioning about …\n"],["form_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-form_tag","(url_for_options = {}, options = {}, &block)","<p>Starts a form tag that points the action to an url configured with\n<code>url_for_options</code> just like ActionController::Base#url_for …\n"],["format","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-format","(view_path = [])","<p>Returns the MIME type for the format used in the request.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">GET</span> <span class=\"ruby-regexp\">/posts/</span><span class=\"ruby-value\">5</span>.<span class=\"ruby-identifier\">xml</span>   <span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">request</span>.<span class=\"ruby-identifier\">format</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">Mime</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["format","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-format","()","<p>Returns the current format, default is ActiveResource::Formats::JsonFormat.\n"],["format","ActiveSupport::Testing::Performance::Metrics::Amount","classes/ActiveSupport/Testing/Performance/Metrics/Amount.html#method-i-format","(measurement)",""],["format","ActiveSupport::Testing::Performance::Metrics::DigitalInformationUnit","classes/ActiveSupport/Testing/Performance/Metrics/DigitalInformationUnit.html#method-i-format","(measurement)",""],["format","ActiveSupport::Testing::Performance::Metrics::Time","classes/ActiveSupport/Testing/Performance/Metrics/Time.html#method-i-format","(measurement)",""],["format","Erb::Generators::MailerGenerator","classes/Erb/Generators/MailerGenerator.html#method-i-format","()",""],["format=","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-format-3D","(extension)","<p>Sets the format by string extension, which can be used to force custom\nformats that are not controlled …\n"],["format=","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-format-3D","(mime_type_reference_or_format)","<p>Sets the format that attributes are sent and received in from a mime type\nreference:\n\n<pre>Person.format = :json ...</pre>\n"],["format_paragraph","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-format_paragraph","(text, len = 72, indent = 2)","<p>Returns <code>text</code> wrapped at <code>len</code> columns and indented\n<code>indent</code> spaces.\n<p>Examples\n\n<pre>my_text = &quot;Here is a sample text ...</pre>\n"],["formats","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-formats","()",""],["formatted_offset","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)",""],["formatted_offset","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-formatted_offset","(colon=true, alternate_utc_string = nil)","<p>Returns the offset of this time zone as a formatted string, of the format\n“+HH:MM”.\n"],["formatted_offset","DateTime","classes/DateTime.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>Returns the <code>utc_offset</code> as an +HH:MM formatted string.\nExamples:\n\n<pre>datetime = DateTime.civil(2000, 1, 1, ...</pre>\n"],["formatted_offset","Time","classes/Time.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>Returns the UTC offset as an +HH:MM formatted string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2000</span>).<span class=\"ruby-identifier\">formatted_offset</span>         <span class=\"ruby-comment\"># =&gt; &quot;-06:00&quot; ...</span>\n</pre>\n"],["fortnight","Numeric","classes/Numeric.html#method-i-fortnight","()",""],["fortnights","Numeric","classes/Numeric.html#method-i-fortnights","()",""],["forty_two","Array","classes/Array.html#method-i-forty_two","()","<p>Equal to <code>self[41]</code>. Also known as accessing “the reddit”.\n"],["fourth","Array","classes/Array.html#method-i-fourth","()","<p>Equal to <code>self[3]</code>.\n"],["fragment_cache_key","ActionController::Caching::Fragments","classes/ActionController/Caching/Fragments.html#method-i-fragment_cache_key","(key)","<p>Given a key (as described in <code>expire_fragment</code>), returns a key\nsuitable for use in reading, writing, or …\n"],["fragment_exist?","ActionController::Caching::Fragments","classes/ActionController/Caching/Fragments.html#method-i-fragment_exist-3F","(key, options = nil)","<p>Check if a cached fragment from the location signified by  <code>key</code>\nexists (see <code>expire_fragment</code> for acceptable …\n"],["framework_trace","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-i-framework_trace","()",""],["framework_version","Rails::Info","classes/Rails/Info.html#method-c-framework_version","(framework)",""],["frameworks","Rails::Info","classes/Rails/Info.html#method-c-frameworks","()",""],["freeze","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-freeze","()","<p>Freeze the attributes hash such that associations are still accessible,\neven on destroyed records.\n"],["freeze","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-freeze","()",""],["freeze_with_memoizable","ActiveSupport::Memoizable::InstanceMethods","classes/ActiveSupport/Memoizable/InstanceMethods.html#method-i-freeze_with_memoizable","()",""],["fresh?","ActionDispatch::Http::Cache::Request","classes/ActionDispatch/Http/Cache/Request.html#method-i-fresh-3F","(response)","<p>Check response freshness (Last-Modified and ETag) against request\nIf-Modified-Since and If-None-Match …\n"],["fresh_when","ActionController::ConditionalGet","classes/ActionController/ConditionalGet.html#method-i-fresh_when","(record_or_options, additional_options = {})","<p>Sets the etag, last_modified, or both on the response and renders a\n<code>304 Not Modified</code> response if the …\n"],["from","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-from","(value)",""],["from","Array","classes/Array.html#method-i-from","(position)","<p>Returns the tail of the array from <code>position</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">from</span>(<span class=\"ruby-value\">0</span>)  <span class=\"ruby-comment\"># =&gt; %w( a b c d )</span>\n<span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">from</span>(<span class=\"ruby-value\">2</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["from","String","classes/String.html#method-i-from","(position)","<p>Returns the remaining of the string from the <code>position</code> treating\nthe string as an array (where 0 is the …\n"],["from_array","ActiveResource::Errors","classes/ActiveResource/Errors.html#method-i-from_array","(messages, save_cache = false)","<p>Grabs errors from an array of messages (like ActiveRecord::Validations).\nThe second parameter directs …\n"],["from_json","ActiveModel::Serializers::JSON","classes/ActiveModel/Serializers/JSON.html#method-i-from_json","(json, include_root=include_root_in_json)",""],["from_json","ActiveResource::Errors","classes/ActiveResource/Errors.html#method-i-from_json","(json, save_cache = false)","<p>Grabs errors from a json response.\n"],["from_now","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-from_now","(time = ::Time.current)",""],["from_now","Numeric","classes/Numeric.html#method-i-from_now","(time = ::Time.current)","<p>Reads best without arguments:  10.minutes.from_now\n"],["from_rails_root","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-from_rails_root","(string)",""],["from_response","ActionDispatch::TestResponse","classes/ActionDispatch/TestResponse.html#method-c-from_response","(response)",""],["from_trusted_xml","Hash","classes/Hash.html#method-c-from_trusted_xml","(xml)",""],["from_xml","ActiveModel::Serializers::Xml","classes/ActiveModel/Serializers/Xml.html#method-i-from_xml","(xml)",""],["from_xml","ActiveResource::Errors","classes/ActiveResource/Errors.html#method-i-from_xml","(xml, save_cache = false)","<p>Grabs errors from an XML response.\n"],["from_xml","Hash","classes/Hash.html#method-c-from_xml","(xml, disallowed_types = nil)",""],["frozen?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-frozen-3F","()","<p>Returns <code>true</code> if the attributes hash has been frozen.\n"],["full?","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-full-3F","()",""],["full_message","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-full_message","(attribute, message)","<p>Returns a full message for a given attribute.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">company</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">full_message</span>(:<span class=\"ruby-identifier\">name</span>, <span class=\"ruby-string\">&quot;is invalid&quot;</span>)  <span class=\"ruby-comment\"># =&gt;</span>\n <span class=\"ruby-operator\">...</span>\n</pre>\n"],["full_messages","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-full_messages","()","<p>Returns all the full error messages in an array.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Company</span>\n  <span class=\"ruby-identifier\">validates_presence_of</span> :<span class=\"ruby-identifier\">name</span>, :<span class=\"ruby-identifier\">address</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["full_profile_options","ActiveSupport::Testing::Performance","classes/ActiveSupport/Testing/Performance.html#method-i-full_profile_options","()",""],["full_test_name","ActiveSupport::Testing::Performance","classes/ActiveSupport/Testing/Performance.html#method-i-full_test_name","()",""],["full_trace","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-i-full_trace","()",""],["fullpath","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-fullpath","()",""],["future?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-future-3F","()",""],["future?","Date","classes/Date.html#method-i-future-3F","()","<p>Returns true if the Date object’s date lies in the future.\n"],["future?","DateTime","classes/DateTime.html#method-i-future-3F","()","<p>Tells whether the DateTime object’s datetime lies in the future\n"],["future?","Time","classes/Time.html#method-i-future-3F","()","<p>Tells whether the Time object’s time lies in the future\n"],["g_length","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-g_length","()","<p>Returns the number of grapheme clusters in the string.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'क्षि'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">length</span>   <span class=\"ruby-comment\"># =&gt; 4</span>\n<span class=\"ruby-string\">'क्षि'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">g_length</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["g_pack","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-g_pack","(unpacked)","<p>Reverse operation of g_unpack.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Unicode</span>.<span class=\"ruby-identifier\">g_pack</span>(<span class=\"ruby-constant\">Unicode</span>.<span class=\"ruby-identifier\">g_unpack</span>(<span class=\"ruby-string\">'क्षि'</span>)) <span class=\"ruby-comment\"># =&gt; 'क्षि'</span>\n</pre>\n"],["g_unpack","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-g_unpack","(string)","<p>Unpack the string at grapheme boundaries. Returns a list of character\nlists.\n<p>Example:\n\n<pre>Unicode.g_unpack('क्षि') ...</pre>\n"],["gem","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-gem","(*args)","<p>Adds an entry into Gemfile for the supplied gem. If env is specified, add\nthe gem to the given environment. …\n"],["gem_for_database","Rails::Generators::AppBase","classes/Rails/Generators/AppBase.html#method-i-gem_for_database","()",""],["gem_group","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-gem_group","(*names, &block)","<p>Wraps gem entries inside a group.\n<p>Example\n\n<pre>gem_group :development, :test do\n  gem &quot;rspec-rails&quot;\nend</pre>\n"],["gemfile","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-gemfile","()",""],["gemfile","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-gemfile","()",""],["gemspec","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-gemspec","()",""],["generate","ActiveSupport::MessageVerifier","classes/ActiveSupport/MessageVerifier.html#method-i-generate","(value)",""],["generate","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-generate","(what, *args)","<p>Generate something using a generator from Rails or a plugin. The second\nparameter is the argument string …\n"],["generate_message","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-generate_message","(attribute, type = :invalid, options = {})","<p>Translates an error message in its default scope\n(<code>activemodel.errors.messages</code>).\n<p>Error messages are first …\n"],["generate_method_for_mime","AbstractController::Collector","classes/AbstractController/Collector.html#method-c-generate_method_for_mime","(mime)",""],["generate_railtie_name","Rails::Railtie","classes/Rails/Railtie.html#method-c-generate_railtie_name","(class_or_module)",""],["generate_sid","ActionDispatch::Session::Compatibility","classes/ActionDispatch/Session/Compatibility.html#method-i-generate_sid","()",""],["generate_test_dummy","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-generate_test_dummy","(force = false)",""],["generated_external_attribute_methods","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-generated_external_attribute_methods","()","<p>We will define the methods as instance methods, but will call them as\nsingleton methods. This allows …\n"],["generated_feature_methods","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-generated_feature_methods","()",""],["generator","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-generator","(args=self.default_arguments, options={}, config={})","<p>Instantiate the generator.\n"],["generator_dir","Rails::Generators::GeneratorGenerator","classes/Rails/Generators/GeneratorGenerator.html#method-i-generator_dir","()",""],["generator_name","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-generator_name","()","<p>Removes the namespaces and get the generator name. For example,\nRails::Generators::ModelGenerator will …\n"],["generators","Rails::Railtie","classes/Rails/Railtie.html#method-c-generators","(&blk)",""],["get","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-get","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating GET HTTP method and set/volley the response\n"],["get","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-get","(path, parameters = nil, headers = nil)","<p>Performs a GET request with the given parameters.\n<p><code>path</code>: The URI (as a String) on which you want to perform ...\n"],["get","ActionDispatch::Routing::Mapper::HttpHelpers","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-get","(*args, &block)","<p>Define a route that only recognizes HTTP GET. For supported arguments, see\n<code>Base#match</code>.\n<p>Example:\n<p>get ‘bacon’, …\n"],["get","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-get","(key)","<p>Get messages for <code>key</code>\n"],["get","ActiveRecord::IdentityMap","classes/ActiveRecord/IdentityMap.html#method-c-get","(klass, primary_key)",""],["get","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-i-get","(path, headers = {})","<p>Executes a GET request. Used to get (find) resources.\n"],["get","ActiveResource::CustomMethods","classes/ActiveResource/CustomMethods.html#method-i-get","(method_name, options = {})",""],["get","ActiveResource::CustomMethods","classes/ActiveResource/CustomMethods.html#method-c-get","(custom_method_name, options = {})","<p>Invokes a GET to a given custom REST method. For example:\n\n<pre>Person.get(:active)  # GET /people/active.json ...</pre>\n"],["get","ActiveSupport::Dependencies::ClassCache","classes/ActiveSupport/Dependencies/ClassCache.html#method-i-get","(key)",""],["get?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-get-3F","()","<p>Is this a GET (or HEAD) request? Equivalent to\n<code>request.request_method_symbol == :get</code>.\n"],["get_builder_class","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-get_builder_class","()",""],["get_builder_class","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-get_builder_class","()",""],["get_session","ActionDispatch::Session::CacheStore","classes/ActionDispatch/Session/CacheStore.html#method-i-get_session","(env, sid)","<p>Get a session from the cache.\n"],["get_via_redirect","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-get_via_redirect","(path, parameters = nil, headers = nil)","<p>Performs a GET request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["getgm","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-getgm","()",""],["getlocal","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-getlocal","()",""],["getutc","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-getutc","()",""],["getutc","DateTime","classes/DateTime.html#method-i-getutc","()",""],["gigabyte","Numeric","classes/Numeric.html#method-i-gigabyte","()",""],["gigabytes","Numeric","classes/Numeric.html#method-i-gigabytes","()",""],["git","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-git","(commands={})","<p>Run a command in git.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">git</span> :<span class=\"ruby-identifier\">init</span>\n<span class=\"ruby-identifier\">git</span> :<span class=\"ruby-identifier\">add</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;this.file that.rb&quot;</span>\n<span class=\"ruby-identifier\">git</span> :<span class=\"ruby-identifier\">add</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;onefile.rb&quot;</span>, :<span class=\"ruby-identifier\">rm</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["git_keep","Rails::Generators::AppBase","classes/Rails/Generators/AppBase.html#method-i-git_keep","(destination)",""],["git_url?","Plugin","classes/Plugin.html#method-i-git_url-3F","()",""],["gitignore","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-gitignore","()",""],["gitignore","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-gitignore","()",""],["global_plugins","Rails::Plugin","classes/Rails/Plugin.html#method-c-global_plugins","()",""],["gmt?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-gmt-3F","()",""],["gmt_offset","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-gmt_offset","()",""],["gmtime","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-gmtime","()",""],["gmtoff","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-gmtoff","()",""],["group","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-group","(*args)",""],["group_by","Enumerable","classes/Enumerable.html#method-i-group_by","()","<p>Collect an enumerable into sets, grouped by the result of a block. Useful,\nfor example, for grouping …\n"],["grouped_collection_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-grouped_collection_select","(method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})",""],["grouped_collection_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-grouped_collection_select","(object, method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})","<p>Returns <code>&lt;select&gt;</code>, <code>&lt;optgroup&gt;</code> and\n<code>&lt;option&gt;</code> tags for the collection of existing return …\n"],["grouped_options_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-grouped_options_for_select","(grouped_options, selected_key = nil, prompt = nil)","<p>Returns a string of <code>&lt;option&gt;</code> tags, like\n<code>options_for_select</code>, but wraps them with\n<code>&lt;optgroup&gt;</code> …\n"],["groups","Rails","classes/Rails.html#method-c-groups","(*groups)","<p>Returns all rails groups for loading based on:\n<p>The Rails environment;\n<p>The environment variable RAILS_GROUPS …\n"],["h","ERB::Util","classes/ERB/Util.html#method-c-h","(s)",""],["ha1","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-ha1","(credentials, password)",""],["halted_callback","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-halted_callback","(event)",""],["handle_unverified_request","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-handle_unverified_request","()","<p>This is the method that defines the application behavior when a request is\nfound to be unverified. By …\n"],["handler_for_rescue","ActiveSupport::Rescuable","classes/ActiveSupport/Rescuable.html#method-i-handler_for_rescue","(exception)",""],["handles_encoding?","ActionView::Template::Handlers::ERB","classes/ActionView/Template/Handlers/ERB.html#method-i-handles_encoding-3F","()",""],["has_and_belongs_to_many","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_and_belongs_to_many","(name, options = {}, &extension)","<p>Specifies a many-to-many relationship with another class. This associates\ntwo classes via an intermediate …\n"],["has_errors?","ActionController::Responder","classes/ActionController/Responder.html#method-i-has_errors-3F","()","<p>Check whether the resource has errors.\n"],["has_index?","Rails::Generators::GeneratedAttribute","classes/Rails/Generators/GeneratedAttribute.html#method-i-has_index-3F","()",""],["has_key?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-has_key-3F","(error)",""],["has_key?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-has_key-3F","(key)",""],["has_key?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-has_key-3F","(key)",""],["has_many","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_many","(name, options = {}, &extension)","<p>Specifies a one-to-many association. The following methods for retrieval\nand query of collections of …\n"],["has_migrations?","Rails::Engine","classes/Rails/Engine.html#method-i-has_migrations-3F","()",""],["has_one","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_one","(name, options = {})","<p>Specifies a one-to-one association with another class. This method should\nonly be used if the other class …\n"],["has_secure_password","ActiveModel::SecurePassword::ClassMethods","classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password","()","<p>Adds methods to set and authenticate against a BCrypt password. This\nmechanism requires you to have a …\n"],["has_uniq_index?","Rails::Generators::GeneratedAttribute","classes/Rails/Generators/GeneratedAttribute.html#method-i-has_uniq_index-3F","()",""],["hash","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-hash","()","<p>Delegates to id in order to allow two records of the same type and id to\nwork with something like:\n\n<pre>[ Person.find(1), ...</pre>\n"],["hash","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-hash","()","<p>Delegates to id in order to allow two resources of the same type and id to\nwork with something like: …\n"],["hash","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-hash","()",""],["having","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-having","(opts, *rest)",""],["head","ActionController::Head","classes/ActionController/Head.html#method-i-head","(status, options = {})","<p>Return a response that has no content (merely headers). The options\nargument is interpreted to be a hash …\n"],["head","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-head","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating HEAD HTTP method and set/volley the response\n"],["head","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-head","(path, parameters = nil, headers = nil)","<p>Performs a HEAD request with the given parameters. See <code>#get</code>\nfor more details.\n"],["head","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-i-head","(path, headers = {})","<p>Executes a HEAD request. Used to obtain meta-information about resources,\nsuch as whether they exist …\n"],["head?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-head-3F","()","<p>Is this a HEAD request? Equivalent to <code>request.method_symbol ==\n:head</code>.\n"],["headers","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-headers","()","<p>Provides access to the request’s HTTP headers, for example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">request</span>.<span class=\"ruby-identifier\">headers</span>[<span class=\"ruby-string\">&quot;Content-Type&quot;</span>] <span class=\"ruby-comment\"># =&gt; &quot;text/plain&quot;</span>\n</pre>\n"],["headers","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-headers","(args=nil)","<p>Allows you to pass random and unusual headers to the new +Mail::Message+\nobject which will add them to …\n"],["headers","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-headers","()",""],["headers=","ActionController::Testing","classes/ActionController/Testing.html#method-i-headers-3D","(new_headers)","<p>TODO : Rewrite tests using controller.headers= to use Rack env\n"],["help","Rails::Generators","classes/Rails/Generators.html#method-c-help","(command = 'generate')","<p>Show help message with available generators.\n"],["helper","AbstractController::Helpers::ClassMethods","classes/AbstractController/Helpers/ClassMethods.html#method-i-helper","(*args, &block)","<p>The <code>helper</code> class method can take a series of helper module\nnames, a block, or both.\n<p>Parameters\n<p><code>*args</code> - ...\n"],["helper","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-helper","()",""],["helper_attr","ActionController::Helpers::ClassMethods","classes/ActionController/Helpers/ClassMethods.html#method-i-helper_attr","(*attrs)","<p>Declares helper accessors for controller attributes. For example, the\nfollowing adds new <code>name</code> and <code>name=</code> …\n"],["helper_class","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-helper_class","()",""],["helper_method","AbstractController::Helpers::ClassMethods","classes/AbstractController/Helpers/ClassMethods.html#method-i-helper_method","(*meths)","<p>Declare a controller method as a helper. For example, the following makes\nthe <code>current_user</code> controller …\n"],["helper_method","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-helper_method","(*methods)",""],["helpers","ActionController::Helpers::ClassMethods","classes/ActionController/Helpers/ClassMethods.html#method-i-helpers","()","<p>Provides a proxy to access helpers methods from outside the view.\n"],["helpers","Rails::Engine","classes/Rails/Engine.html#method-i-helpers","()",""],["helpers_paths","Rails::Engine","classes/Rails/Engine.html#method-i-helpers_paths","()",""],["hidden_actions","AbstractController::Base","classes/AbstractController/Base.html#method-c-hidden_actions","()","<p>The list of hidden actions to an empty array. Defaults to an empty array.\nThis can be modified by other …\n"],["hidden_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-hidden_field","(method, options = {})",""],["hidden_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-hidden_field","(object_name, method, options = {})","<p>Returns a hidden input tag tailored for accessing a specified attribute\n(identified by <code>method</code>) on an …\n"],["hidden_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-hidden_field_tag","(name, value = nil, options = {})","<p>Creates a hidden form input field used to transmit data that would be lost\ndue to HTTP’s statelessness …\n"],["hidden_namespaces","Rails::Generators","classes/Rails/Generators.html#method-c-hidden_namespaces","()",""],["hide_action","ActionController::HideActions::ClassMethods","classes/ActionController/HideActions/ClassMethods.html#method-i-hide_action","(*args)","<p>Sets all of the actions passed in as hidden actions.\n<p>Parameters\n<p><code>args</code> - A list of actions\n"],["hide_namespace","Rails::Generators","classes/Rails/Generators.html#method-c-hide_namespace","(*namespaces)",""],["hide_namespaces","Rails::Generators","classes/Rails/Generators.html#method-c-hide_namespaces","(*namespaces)",""],["highlight","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-highlight","(text, phrases, *args)","<p>Highlights one or more <code>phrases</code> everywhere in <code>text</code>\nby inserting it into a <code>:highlighter</code> string. The highlighter …\n"],["hook_for","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-hook_for","(*names, &block)","<p>Invoke a generator based on the value supplied by the user to the given\noption named “name”. …\n"],["host","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-host","()","<p>Returns the host for this request, such as example.com.\n"],["host","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-host","()","<p>The hostname used in the last request.\n"],["host=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-host-3D","(host)",""],["host_with_port","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-host_with_port","()","<p>Returns a host:port string for this request, such as “example.com” or\n“example.com:8080”. …\n"],["hour","Numeric","classes/Numeric.html#method-i-hour","()",""],["hours","Numeric","classes/Numeric.html#method-i-hours","()",""],["html?","Mime::Type","classes/Mime/Type.html#method-i-html-3F","()",""],["html_document","ActionDispatch::Assertions::TagAssertions","classes/ActionDispatch/Assertions/TagAssertions.html#method-i-html_document","()",""],["html_escape","ERB::Util","classes/ERB/Util.html#method-c-html_escape","(s)","<p>A utility method for escaping HTML tag characters. This method is also\naliased as <code>h</code>.\n<p>In your ERB templates, …\n"],["html_safe","String","classes/String.html#method-i-html_safe","()",""],["html_safe?","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-html_safe-3F","()",""],["html_safe?","Numeric","classes/Numeric.html#method-i-html_safe-3F","()",""],["html_safe?","Object","classes/Object.html#method-i-html_safe-3F","()",""],["http_basic_authenticate_with","ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods","classes/ActionController/HttpAuthentication/Basic/ControllerMethods/ClassMethods.html#method-i-http_basic_authenticate_with","(options = {})",""],["httpdate","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-httpdate","()",""],["https!","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-https-21","(flag = true)","<p>Specify whether or not the session should mimic a secure HTTPS request.\n\n<pre>session.https!\nsession.https!(false)</pre>\n"],["https?","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-https-3F","()","<p>Return <code>true</code> if the session is mimicking a secure HTTPS\nrequest.\n\n<pre>if session.https?\n  ...\nend</pre>\n"],["human","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-human","(options={})","<p>Transform the model name into a more humane format, using I18n. By default,\nit will underscore then humanize …\n"],["human","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-human","(rule, replacement)","<p>Specifies a humanized form of a string by a regular expression rule or by a\nstring mapping. When using …\n"],["human_attribute_name","ActiveModel::Translation","classes/ActiveModel/Translation.html#method-i-human_attribute_name","(attribute, options = {})","<p>Transforms attribute names into a more human format, such as “First name”\ninstead of “ …\n"],["human_name","Rails::Generators::GeneratedAttribute","classes/Rails/Generators/GeneratedAttribute.html#method-i-human_name","()",""],["human_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-human_name","()",""],["humanize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-humanize","(lower_case_and_underscored_word)","<p>Capitalizes the first word and turns underscores into spaces and strips a\ntrailing “_id”, if …\n"],["humanize","String","classes/String.html#method-i-humanize","()","<p>Capitalizes the first word, turns underscores into spaces, and strips\n‘_id’. Like <code>titleize</code>, this is meant …\n"],["i18n_scope","ActiveModel::Translation","classes/ActiveModel/Translation.html#method-i-i18n_scope","()","<p>Returns the <code>i18n_scope</code> for the class. Overwrite if you want\ncustom lookup.\n"],["i18n_scope","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-i18n_scope","()",""],["id","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id","()","<p>Returns the primary key value\n"],["id","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-id","()","<p>Gets the <code>\\id</code> attribute of the resource.\n"],["id","NilClass","classes/NilClass.html#method-i-id","()","<p>Raises a RuntimeError when you attempt to call <code>id</code> on\n<code>nil</code>.\n"],["id=","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id-3D","(value)","<p>Sets the primary key value\n"],["id=","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-id-3D","(id)","<p>Sets the <code>\\id</code> attribute of the resource.\n"],["id?","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id-3F","()","<p>Queries the primary key value\n"],["id_from_response","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-id_from_response","(response)","<p>Takes a response from a typical create post and pulls the ID out\n"],["identify","ActiveRecord::Fixtures","classes/ActiveRecord/Fixtures.html#method-c-identify","(label)","<p>Returns a consistent, platform-independent identifier for\n<code>label</code>. Identifiers are positive integers less …\n"],["identity","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-i-identity","(event)",""],["if_modified_since","ActionDispatch::Http::Cache::Request","classes/ActionDispatch/Http/Cache/Request.html#method-i-if_modified_since","()",""],["if_modified_since=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-if_modified_since-3D","(last_modified)",""],["if_none_match","ActionDispatch::Http::Cache::Request","classes/ActionDispatch/Http/Cache/Request.html#method-i-if_none_match","()",""],["if_none_match=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-if_none_match-3D","(etag)",""],["image_alt","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-image_alt","(src)",""],["image_path","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-image_path","(source)","<p>Computes the path to an image asset in the public images directory. Full\npaths from the document root …\n"],["image_submit_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-image_submit_tag","(source, options = {})","<p>Displays an image which when clicked will submit the form.\n<p><code>source</code> is passed to AssetTagHelper#path_to_image ...\n"],["image_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-image_tag","(source, options = {})","<p>Returns an html image tag for the <code>source</code>. The\n<code>source</code> can be a full path or a file that exists in your …\n"],["in","Date","classes/Date.html#method-i-in","(seconds)",""],["in","DateTime","classes/DateTime.html#method-i-in","(seconds)",""],["in","Time","classes/Time.html#method-i-in","(seconds)",""],["in?","Object","classes/Object.html#method-i-in-3F","(*args)","<p>Returns true if this object is included in the argument(s). Argument must\nbe any object which responds …\n"],["in_char_class?","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-in_char_class-3F","(codepoint, classes)","<p>Detect whether the codepoint is in a certain character class. Returns\n<code>true</code> when it’s in the specified …\n"],["in_clause_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-in_clause_length","()","<p>Returns the maximum number of elements in an IN (x,y,z) clause. nil means\nno limit.\n"],["in_groups","Array","classes/Array.html#method-i-in_groups","(number, fill_with = nil)","<p>Splits or iterates over the array in <code>number</code> of groups, padding\nany remaining slots with <code>fill_with</code> unless …\n"],["in_groups_of","Array","classes/Array.html#method-i-in_groups_of","(number, fill_with = nil)","<p>Splits or iterates over the array in groups of size <code>number</code>,\npadding any remaining slots with <code>fill_with</code> …\n"],["in_rails_application?","Rails::ScriptRailsLoader","classes/Rails/ScriptRailsLoader.html#method-c-in_rails_application-3F","()",""],["in_rails_application_subdirectory?","Rails::ScriptRailsLoader","classes/Rails/ScriptRailsLoader.html#method-c-in_rails_application_subdirectory-3F","(path = Pathname.new(Dir.pwd))",""],["in_time_zone","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-in_time_zone","(new_zone = ::Time.zone)","<p>Returns the simultaneous time in <code>Time.zone</code>, or the specified\nzone.\n"],["in_time_zone","DateTime","classes/DateTime.html#method-i-in_time_zone","(zone = ::Time.zone)","<p>Returns the simultaneous time in <code>Time.zone</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">zone</span> = <span class=\"ruby-string\">'Hawaii'</span>             <span class=\"ruby-comment\"># =&gt; 'Hawaii'</span>\n<span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>).<span class=\"ruby-identifier\">in_time_zone</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["in_time_zone","Time","classes/Time.html#method-i-in_time_zone","(zone = ::Time.zone)","<p>Returns the simultaneous time in <code>Time.zone</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">zone</span> = <span class=\"ruby-string\">'Hawaii'</span>         <span class=\"ruby-comment\"># =&gt; 'Hawaii'</span>\n<span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>).<span class=\"ruby-identifier\">in_time_zone</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["include?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-include-3F","(error)","<p>Do the error messages include an error with key <code>error</code>?\n"],["include?","ActiveModel::MassAssignmentSecurity::PermissionSet","classes/ActiveModel/MassAssignmentSecurity/PermissionSet.html#method-i-include-3F","(key)",""],["include?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-include-3F","(key)",""],["include?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-include-3F","(key)",""],["include?","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-include-3F","(other)","<p>Returns <code>true</code> if contained string contains <em>other</em>.\nReturns <code>false</code> otherwise.\n<p>Example:\n\n<pre>'Café'.mb_chars.include?('é') ...</pre>\n"],["include?","Test::Unit::Collector::ObjectSpace","classes/Test/Unit/Collector/ObjectSpace.html#method-i-include-3F","(test)",""],["include_all_railties?","Rails::Generators::AppBase","classes/Rails/Generators/AppBase.html#method-i-include_all_railties-3F","()",""],["include_fallbacks_module","I18n::Railtie","classes/I18n/Railtie.html#method-c-include_fallbacks_module","()",""],["include_tag","ActionView::Helpers::AssetTagHelper::AssetIncludeTag","classes/ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html#method-i-include_tag","(*sources)",""],["include_with_range?","Range","classes/Range.html#method-i-include_with_range-3F","(value)","<p>Extends the default Range#include? to support range comparisons.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>) <span class=\"ruby-comment\"># =&gt; true</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">2</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">3</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["included","ActionController::TestCase::RaiseActionExceptions","classes/ActionController/TestCase/RaiseActionExceptions.html#method-c-included","(base)",""],["included","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-c-included","(base)",""],["included","ActiveSupport::Concern","classes/ActiveSupport/Concern.html#method-i-included","(base = nil, &block)",""],["included","ActiveSupport::Memoizable::InstanceMethods","classes/ActiveSupport/Memoizable/InstanceMethods.html#method-c-included","(base)",""],["included","ActiveSupport::Testing::Isolation","classes/ActiveSupport/Testing/Isolation.html#method-c-included","(base)",""],["included","Rails::Initializable","classes/Rails/Initializable.html#method-c-included","(base)",""],["includes","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-includes","(*args)",""],["increment","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-increment","(attribute, by = 1)","<p>Initializes <code>attribute</code> to zero if <code>nil</code> and adds the\nvalue passed as <code>by</code> (default is 1). The increment is …\n"],["increment","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-increment","(name, amount = 1, options = nil)",""],["increment","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-increment","(name, amount = 1, options = nil)","<p>Increment an integer value in the cache.\n"],["increment","ActiveSupport::Cache::NullStore","classes/ActiveSupport/Cache/NullStore.html#method-i-increment","(name, amount = 1, options = nil)",""],["increment","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-increment","(name, amount = 1, options = nil)","<p>Increment an integer value in the cache.\n<p>Options are passed to the underlying cache implementation.\n<p>All …\n"],["increment!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-increment-21","(attribute, by = 1)","<p>Wrapper around <code>increment</code> that saves the record. This method\ndiffers from its non-bang version in that …\n"],["increment_counter","ActiveRecord::CounterCache","classes/ActiveRecord/CounterCache.html#method-i-increment_counter","(counter_name, id)","<p>Increment a number field by one, usually representing a count.\n<p>This is used for caching aggregate values, …\n"],["increment_open_transactions","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-increment_open_transactions","()",""],["indent","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-indent","(content, multiplier = 2)",""],["index","ActionController::Middleware","classes/ActionController/Middleware.html#method-i-index","()",""],["index","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-index","(column_name, options = {})","<p>Adds a new index to the table. <code>column_name</code> can be a single\nSymbol, or an Array of Symbols. See SchemaStatements#add_index …\n"],["index","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-index","(needle, offset=0)","<p>Returns the position <em>needle</em> in the string, counting in codepoints.\nReturns <code>nil</code> if <em>needle</em> isn’t found. …\n"],["index_by","Enumerable","classes/Enumerable.html#method-i-index_by","()","<p>Convert an enumerable to a hash. Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">people</span>.<span class=\"ruby-identifier\">index_by</span>(&amp;:<span class=\"ruby-identifier\">login</span>)\n  =<span class=\"ruby-operator\">&gt;</span> { <span class=\"ruby-string\">&quot;nextangle&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-operator\">&lt;</span><span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">...</span><span class=\"ruby-operator\">&gt;</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["index_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_exists-3F","(table_name, column_name, options = {})","<p>Checks to see if an index exists on a table for a given index definition.\n<p>Examples\n\n<pre># Check an index exists ...</pre>\n"],["index_exists?","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-index_exists-3F","(column_name, options = {})","<p>Checks to see if an index exists. See SchemaStatements#index_exists?\n"],["index_helper","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-index_helper","()",""],["index_name","Rails::Generators::GeneratedAttribute","classes/Rails/Generators/GeneratedAttribute.html#method-i-index_name","()",""],["index_name_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_name_exists-3F","(table_name, index_name, default)","<p>Verify the existence of an index with a given name.\n<p>The default argument is returned if the underlying …\n"],["index_name_for_remove","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_name_for_remove","(table_name, options = {})",""],["index_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-index_name_length","()","<p>Returns the maximum length of an index name.\n"],["index_name_length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-index_name_length","()",""],["indexes","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-indexes","(table_name, name = nil)","<p>Returns an array of indexes for the given table.\n"],["indexes_per_table","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-indexes_per_table","()","<p>Returns the maximum number of indexes per table.\n"],["inflections","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-inflections","()","<p>Yields a singleton instance of Inflector::Inflections so you can specify\nadditional inflector rules. …\n"],["info","Plugin","classes/Plugin.html#method-i-info","()",""],["inheritable_copy","ActiveSupport::InheritableOptions","classes/ActiveSupport/InheritableOptions.html#method-i-inheritable_copy","()",""],["inheritance_column","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-inheritance_column","()","<p>The name of the column containing the object’s class when Single Table\nInheritance is used\n"],["inheritance_column=","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-inheritance_column-3D","(value)","<p>Sets the value of inheritance_column\n"],["inherited","AbstractController::Helpers::ClassMethods","classes/AbstractController/Helpers/ClassMethods.html#method-i-inherited","(klass)","<p>When a class is inherited, wrap its helper module in a new module. This\nensures that the parent class’s …\n"],["inherited","AbstractController::Layouts::ClassMethods","classes/AbstractController/Layouts/ClassMethods.html#method-i-inherited","(klass)",""],["inherited","ActionController::ParamsWrapper::ClassMethods","classes/ActionController/ParamsWrapper/ClassMethods.html#method-i-inherited","(klass)","<p>Sets the default wrapper key or model which will be used to determine\nwrapper key and attribute names. …\n"],["inherited","ActionView::Helpers::AssetTagHelper::AssetIncludeTag","classes/ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html#method-c-inherited","(base)",""],["inherited","ActiveModel::Observing::ClassMethods","classes/ActiveModel/Observing/ClassMethods.html#method-i-inherited","(subclass)","<p>Notify observers when the observed class is subclassed.\n"],["inherited","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-inherited","(base)","<p>Copy validators on inheritance.\n"],["inherited","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-i-inherited","(base)",""],["inherited","Rails::Application","classes/Rails/Application.html#method-c-inherited","(base)",""],["inherited","Rails::Engine","classes/Rails/Engine.html#method-c-inherited","(base)",""],["inherited","Rails::Plugin","classes/Rails/Plugin.html#method-c-inherited","(base)",""],["inherited","Rails::Railtie","classes/Rails/Railtie.html#method-c-inherited","(base)",""],["inherited","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-inherited","(base)",""],["init_fallbacks","I18n::Railtie","classes/I18n/Railtie.html#method-c-init_fallbacks","(fallbacks)",""],["init_with","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-init_with","(coder)","<p>Initialize an empty model object from <code>coder</code>.\n<code>coder</code> must contain the attributes necessary for initializing …\n"],["initialize!","Rails","classes/Rails.html#method-c-initialize-21","()",""],["initialize_copy","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-initialize_copy","(other)",""],["initialize_copy","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-initialize_copy","(other)",""],["initialize_copy","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-initialize_copy","(other)",""],["initialize_copy","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-initialize_copy","(other)",""],["initialize_copy","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-initialize_copy","(other)",""],["initialize_dup","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-initialize_dup","(other)",""],["initialize_dup","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-initialize_dup","(other)","<p>Duped objects have no id assigned and are treated as new records. Note that\nthis is a “shallow” …\n"],["initialize_dup","ActiveRecord::Timestamp","classes/ActiveRecord/Timestamp.html#method-i-initialize_dup","(other)",""],["initialize_generators","Rails::Engine","classes/Rails/Engine.html#method-i-initialize_generators","()",""],["initialize_i18n","I18n::Railtie","classes/I18n/Railtie.html#method-c-initialize_i18n","(app)","<p>Setup i18n configuration\n"],["initialize_schema_migrations_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-initialize_schema_migrations_table","()","<p>Should not be called normally, but this operation is non-destructive. The\nmigrations module handles this …\n"],["initialize_sid","ActionDispatch::Session::Compatibility","classes/ActionDispatch/Session/Compatibility.html#method-i-initialize_sid","()",""],["initialize_template_class","ActionController::Compatibility","classes/ActionController/Compatibility.html#method-i-initialize_template_class","(*)","<p>For old tests\n"],["initialized=","Rails","classes/Rails.html#method-c-initialized-3D","(initialized)",""],["initialized?","Rails","classes/Rails.html#method-c-initialized-3F","()",""],["initializer","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-initializer","(filename, data=nil, &block)","<p>Create a new initializer with the provided code (either in a block or a\nstring).\n<p>Examples\n\n<pre>initializer(&quot;globals.rb&quot;) ...</pre>\n"],["initializer","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializer","(name, opts = {}, &blk)",""],["initializers","Rails::Engine","classes/Rails/Engine.html#method-i-initializers","()",""],["initializers","Rails::Initializable","classes/Rails/Initializable.html#method-i-initializers","()",""],["initializers","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializers","()",""],["initializers_chain","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializers_chain","()",""],["initializers_for","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializers_for","(binding)",""],["inject_index_options","Rails::Generators::GeneratedAttribute","classes/Rails/Generators/GeneratedAttribute.html#method-i-inject_index_options","()",""],["inject_options","Rails::Generators::GeneratedAttribute","classes/Rails/Generators/GeneratedAttribute.html#method-i-inject_options","()",""],["inquiry","String","classes/String.html#method-i-inquiry","()","<p>Wraps the current string in the <code>ActiveSupport::StringInquirer</code>\nclass, which gives you a prettier way to …\n"],["insensitive_attributes","ActiveModel::MassAssignmentSecurity::StrictSanitizer","classes/ActiveModel/MassAssignmentSecurity/StrictSanitizer.html#method-i-insensitive_attributes","()",""],["insert","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-insert","(index, *args, &block)",""],["insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert","(arel, name = nil, pk = nil, id_value = nil, sequence_name = nil, binds = [])","<p>Returns the last auto-generated ID from the affected table.\n<p><code>id_value</code> will be returned unless the value ...\n"],["insert","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-insert","(values)",""],["insert","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-insert","(offset, fragment)","<p>Inserts the passed string at specified codepoint offsets.\n<p>Example:\n\n<pre>'Café'.mb_chars.insert(4, ' périferôl').to_s ...</pre>\n"],["insert_after","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-insert_after","(index, *args, &block)",""],["insert_before","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-insert_before","(index, *args, &block)",""],["insert_fixture","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert_fixture","(fixture, table_name)","<p>Inserts the given fixture into the table. Overridden in adapters that\nrequire something beyond a simple …\n"],["insert_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert_sql","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)","<p>Returns the last auto-generated ID from the affected table.\n"],["insert_sql","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-insert_sql","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)",""],["insert_sql","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-insert_sql","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)","<p>Executes an INSERT query and returns the new record’s ID\n"],["inside_template","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-inside_template","()",""],["inside_template?","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-inside_template-3F","()",""],["inspect","ActionDispatch::MiddlewareStack::Middleware","classes/ActionDispatch/MiddlewareStack/Middleware.html#method-i-inspect","()",""],["inspect","ActionView::Template","classes/ActionView/Template.html#method-i-inspect","()",""],["inspect","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-inspect","()","<p>Returns the contents of the record as a nicely formatted string.\n"],["inspect","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-inspect","()","<p>Returns a string like ‘Post(id:integer, title:string, body:text)’\n"],["inspect","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-inspect","()",""],["inspect","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-inspect","()",""],["inspect","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-inspect","()",""],["inspect","Date","classes/Date.html#method-i-inspect","()",""],["inspect","DateTime","classes/DateTime.html#method-i-inspect","()",""],["inspect","Rails::Info","classes/Rails/Info.html#method-c-inspect","()",""],["install","Plugin","classes/Plugin.html#method-i-install","(method=nil, options = {})",""],["install","RailsEnvironment","classes/RailsEnvironment.html#method-i-install","(name_uri_or_plugin)",""],["installed?","Plugin","classes/Plugin.html#method-i-installed-3F","()",""],["instance","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-c-instance","()",""],["instance","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-instance","()",""],["instance_method_already_implemented?","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-instance_method_already_implemented-3F","(method_name)",""],["instance_method_already_implemented?","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-instance_method_already_implemented-3F","(method_name)",""],["instance_method_names","Module","classes/Module.html#method-i-instance_method_names","(*args)",""],["instance_variable_names","Object","classes/Object.html#method-i-instance_variable_names","()",""],["instantiate","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-instantiate","(record)","<p>Finder methods must instantiate through this method to work with the\nsingle-table inheritance model that …\n"],["instantiate_all_loaded_fixtures","ActiveRecord::Fixtures","classes/ActiveRecord/Fixtures.html#method-c-instantiate_all_loaded_fixtures","(object, load_instances = true)",""],["instantiate_fixtures","ActiveRecord::Fixtures","classes/ActiveRecord/Fixtures.html#method-c-instantiate_fixtures","(object, fixture_set, load_instances = true, rails_3_2_compatibility_argument = true)","<p>The use with parameters  <code>(object, fixture_set_name, fixture_set,\nload_instances = true)</code>  is deprecated, …\n"],["instantiate_observers","ActiveModel::Observing::ClassMethods","classes/ActiveModel/Observing/ClassMethods.html#method-i-instantiate_observers","()","<p>Instantiate the global observers.\n"],["instantiator?","ActiveRecord::DynamicFinderMatch","classes/ActiveRecord/DynamicFinderMatch.html#method-i-instantiator-3F","()",""],["instrument","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-c-instrument","()",""],["instrument","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-c-instrument","(name, payload = {})",""],["instrument","ActiveSupport::Notifications::Instrumenter","classes/ActiveSupport/Notifications/Instrumenter.html#method-i-instrument","(name, payload={})","<p>Instrument the given block by measuring the time taken to execute it and\npublish it. Notice that events …\n"],["instrument=","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-c-instrument-3D","(boolean)","<p>Set to true if cache stores should be instrumented. Default is false.\n"],["instrument_fragment_cache","ActionController::Caching::Fragments","classes/ActionController/Caching/Fragments.html#method-i-instrument_fragment_cache","(name, key)",""],["instrumenter","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-c-instrumenter","()",""],["internal_methods","AbstractController::Base","classes/AbstractController/Base.html#method-c-internal_methods","()","<p>A list of all internal methods for a controller. This finds the first\nabstract superclass of a controller, …\n"],["invalid?","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-invalid-3F","(context = nil)","<p>Performs the opposite of <code>valid?</code>. Returns true if errors were\nadded, false otherwise.\n"],["inverse","ActiveRecord::Migration::CommandRecorder","classes/ActiveRecord/Migration/CommandRecorder.html#method-i-inverse","()","<p>Returns a list that represents commands that are the inverse of the\ncommands stored in <code>commands</code>. For …\n"],["invert","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-invert","()",""],["invoke","Rails::Generators","classes/Rails/Generators.html#method-c-invoke","(namespace, args=ARGV, config={})","<p>Receives a namespace, arguments and the behavior to invoke the generator.\nIt’s used as the default entry …\n"],["ip","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-ip","()",""],["ips_from","ActionDispatch::RemoteIp::GetIp","classes/ActionDispatch/RemoteIp/GetIp.html#method-i-ips_from","(header, allow_proxies = false)",""],["irregular","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-irregular","(singular, plural)","<p>Specifies a new irregular that applies to both pluralization and\nsingularization at the same time. This …\n"],["is_a?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-is_a-3F","(klass)","<p>Say we’re a Time to thwart type checking.\n"],["is_missing?","LoadError","classes/LoadError.html#method-i-is_missing-3F","(location)",""],["is_missing?","LoadError","classes/LoadError.html#method-i-is_missing-3F","(location)",""],["is_utf8?","String","classes/String.html#method-i-is_utf8-3F","()",""],["isdst","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-isdst","()",""],["iso8601","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-iso8601","(fraction_digits = 0)",""],["iso8601","Date","classes/Date.html#method-i-iso8601","()",""],["isolate_namespace","Rails::Engine","classes/Rails/Engine.html#method-c-isolate_namespace","(mod)",""],["j","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-j","(javascript)",""],["j","ERB::Util","classes/ERB/Util.html#method-c-j","(s)",""],["javascript_gemfile_entry","Rails::Generators::AppBase","classes/Rails/Generators/AppBase.html#method-i-javascript_gemfile_entry","()",""],["javascript_include_tag","ActionView::Helpers::AssetTagHelper::JavascriptTagHelpers","classes/ActionView/Helpers/AssetTagHelper/JavascriptTagHelpers.html#method-i-javascript_include_tag","(*sources)","<p>Returns an HTML script tag for each of the <code>sources</code> provided.\n<p>Sources may be paths to JavaScript files. …\n"],["javascript_path","ActionView::Helpers::AssetTagHelper::JavascriptTagHelpers","classes/ActionView/Helpers/AssetTagHelper/JavascriptTagHelpers.html#method-i-javascript_path","(source)","<p>Computes the path to a javascript asset in the public javascripts\ndirectory. If the <code>source</code> filename has …\n"],["javascript_runtime_gemfile_entry","Rails::Generators::AppBase","classes/Rails/Generators/AppBase.html#method-i-javascript_runtime_gemfile_entry","()",""],["javascript_tag","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-javascript_tag","(content_or_options_with_block = nil, html_options = {}, &block)","<p>Returns a JavaScript tag with the <code>content</code> inside. Example:\n\n<pre>javascript_tag &quot;alert('All is good')&quot;</pre>\n<p>Returns: …\n"],["javascripts","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-javascripts","()",""],["joined_includes_values","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-joined_includes_values","()","<p>Joins that are also marked for preloading. In which case we should just\neager load them. Note that this …\n"],["joins","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-joins","(*args)",""],["joins_per_query","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-joins_per_query","()","<p>Returns maximum number of joins in a single query.\n"],["json_escape","ERB::Util","classes/ERB/Util.html#method-c-json_escape","(s)","<p>A utility method for escaping HTML entities in JSON strings using uXXXX\nJavaScript escape sequences for …\n"],["json_resource_errors","ActionController::Responder","classes/ActionController/Responder.html#method-i-json_resource_errors","()",""],["keep","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-keep","(k = nil)","<p>Keeps either the entire current flash or a specific flash entry available\nfor the next action:\n\n<pre>flash.keep ...</pre>\n"],["key?","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-key-3F","(name)",""],["key?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-key-3F","(key)",""],["key?","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-key-3F","(key)",""],["key?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-key-3F","(key)",""],["key?","ActiveRecord::ConnectionAdapters::SQLiteAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter/StatementPool.html#method-i-key-3F","(key)",""],["key?","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-key-3F","(key)",""],["key?","ActiveSupport::Dependencies::ClassCache","classes/ActiveSupport/Dependencies/ClassCache.html#method-i-key-3F","(key)",""],["key?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-key-3F","(key)","<p>Checks the hash for a key matching the argument passed in:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[&quot;key&quot;] ...</pre>\n"],["key?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-key-3F","(key)","<p>Checks the hash for a key matching the argument passed in:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[&quot;key&quot;] ...</pre>\n"],["key_matcher","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-key_matcher","(pattern, options)","<p>Add the namespace defined in the options to a pattern designed to match\nkeys. Implementations that support …\n"],["key_value","Rails::Generators::AppBase","classes/Rails/Generators/AppBase.html#method-i-key_value","(key, value)","<p>Returns Ruby 1.9 style key-value pair if current code is running on Ruby\n1.9.x. Returns the old-style …\n"],["key_value","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-key_value","(key, value)","<p>Returns Ruby 1.9 style key-value pair if current code is running on Ruby\n1.9.x. Returns the old-style …\n"],["keys","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-keys","()",""],["keys","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-keys","()","<p>Returns all message keys\n"],["keys","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-keys","()",""],["kilobyte","Numeric","classes/Numeric.html#method-i-kilobyte","()",""],["kilobytes","Numeric","classes/Numeric.html#method-i-kilobytes","()",""],["kind","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-c-kind","()","<p>Returns the kind of the validator. Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">PresenceValidator</span>.<span class=\"ruby-identifier\">kind</span>   <span class=\"ruby-comment\"># =&gt; :presence</span>\n<span class=\"ruby-constant\">UniquenessValidator</span>.<span class=\"ruby-identifier\">kind</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["kind","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-i-kind","()","<p>Return the kind for this validator.\n"],["kind_of?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-kind_of-3F","(klass)",""],["klass","ActionDispatch::MiddlewareStack::Middleware","classes/ActionDispatch/MiddlewareStack/Middleware.html#method-i-klass","()",""],["klass","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-klass","()","<p>Returns the class for the macro.\n<p><code>composed_of :balance, :class_name =&gt; 'Money'</code> returns the\nMoney class ...\n"],["known_attributes","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-known_attributes","()","<p>Returns the list of known attributes for this resource, gathered from the\nprovided <code>schema</code> Attributes …\n"],["known_attributes","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-known_attributes","()","<p>This is a list of known attributes for this resource. Either gathered from\nthe provided <code>schema</code>, or from …\n"],["l","AbstractController::Translation","classes/AbstractController/Translation.html#method-i-l","(*args)",""],["l","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-l","(*args)",""],["label","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-label","(method, text = nil, options = {}, &block)",""],["label","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-label","(object_name, method, content_or_options = nil, options = nil, &block)","<p>Returns a label tag tailored for labelling an input field for a specified\nattribute (identified by <code>method</code> …\n"],["label_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-label_tag","(name = nil, content_or_options = nil, options = nil, &block)","<p>Creates a label element. Accepts a block.\n<p>Options\n<p>Creates standard HTML attributes for the tag.\n"],["last","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-last","()",""],["last","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-last","(*args)","<p>A convenience wrapper for <code>find(:last, *args)</code>. You can pass in\nall the same arguments to this method as …\n"],["last","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-last","(*args)","<p>A convenience wrapper for <code>find(:last, *args)</code>. You can pass in\nall the same arguments to this method as …\n"],["last","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-last","()",""],["last","String","classes/String.html#method-i-last","(limit = 1)","<p>Returns the last character of the string or the last <code>limit</code>\ncharacters.\n<p>Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;hello&quot;</span>.<span class=\"ruby-identifier\">last</span>     <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["last!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-last-21","()","<p>Same as <code>last</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found. Note that\n<code>last!</code> accepts no …\n"],["last_inserted_id","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-last_inserted_id","(result)",""],["last_inserted_id","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-last_inserted_id","(result)",""],["last_inserted_id","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-last_inserted_id","(result)",""],["last_inserted_id","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-last_inserted_id","(result)",""],["last_modified","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-last_modified","()",""],["last_modified=","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-last_modified-3D","(utc_time)",""],["last_modified?","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-last_modified-3F","()",""],["layout","AbstractController::Layouts::ClassMethods","classes/AbstractController/Layouts/ClassMethods.html#method-i-layout","(layout, conditions = {})","<p>Specify the layout to use for this class.\n<p>If the specified layout is a:\n<p>String &mdash; the String is the template …\n"],["lease","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-lease","()",""],["length","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-length","()",""],["length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-length","()",""],["length","ActiveRecord::ConnectionAdapters::SQLiteAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter/StatementPool.html#method-i-length","()",""],["length","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-length","()",""],["level","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-level","()",""],["level=","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-level-3D","(l)",""],["lib","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-lib","()",""],["lib","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-lib","(filename, data=nil, &block)","<p>Create a new file in the lib/ directory. Code can be specified in a block\nor a data string can be given. …\n"],["lib","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-lib","()",""],["license","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-license","()",""],["limit","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-limit","(value)",""],["limit","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-limit","(limit)","<p>Limit the byte size of the string to a number of bytes without breaking\ncharacters. Usable when the storage …\n"],["limited_update_conditions","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-limited_update_conditions","(where_sql, quoted_table_name, quoted_primary_key)",""],["limited_update_conditions","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-limited_update_conditions","(where_sql, quoted_table_name, quoted_primary_key)",""],["link_to","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to","(*args, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code>. See the valid options …\n"],["link_to_function","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-link_to_function","(name, function, html_options={})","<p>Returns a link whose <code>onclick</code> handler triggers the passed\nJavaScript.\n<p>The helper receives a name, JavaScript …\n"],["link_to_if","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_if","(condition, name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> if <code>condition</code> is true, …\n"],["link_to_unless","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_unless","(condition, name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> unless <code>condition</code> is true, …\n"],["link_to_unless_current","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_unless_current","(name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> unless the current request …\n"],["links","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-i-links","(base_url, contents)",""],["listeners_for","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-listeners_for","(name)",""],["listening?","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-listening-3F","(name)",""],["ljust","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-ljust","(integer, padstr=' ')","<p>Works just like <code>String#ljust</code>, only integer specifies\ncharacters instead of bytes.\n<p>Example:\n\n<pre>&quot;¾ cup&quot;.mb_chars.rjust(8).to_s ...</pre>\n"],["load","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-load","(attributes, remove_root = false)","<p>A method to manually load attributes from a hash. Recursively loads\ncollections of resources.  This method …\n"],["load","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-i-load","()","<p>Loads the Unicode database and returns all the internal objects of\nUnicodeDatabase.\n"],["load_attributes_from_response","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-load_attributes_from_response","(response)",""],["load_console","Rails::Application","classes/Rails/Application.html#method-i-load_console","(app=self)","<p>Load the application console and invoke the registered hooks. Check\n<code>Rails::Railtie.console</code> for more info. …\n"],["load_console","Rails::Engine","classes/Rails/Engine.html#method-i-load_console","(app=self)",""],["load_console","Rails::Railtie","classes/Rails/Railtie.html#method-i-load_console","(app=self)",""],["load_generators","Rails::Engine","classes/Rails/Engine.html#method-i-load_generators","(app=self)",""],["load_generators","Rails::Railtie","classes/Rails/Railtie.html#method-i-load_generators","(app=self)",""],["load_paths","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-load_paths","()",""],["load_seed","Rails::Engine","classes/Rails/Engine.html#method-i-load_seed","()","<p>Load data from db/seeds.rb file. It can be used in to load engines’ seeds,\ne.g.:\n<p>Blog::Engine.load_seed …\n"],["load_session","ActionDispatch::Session::StaleSessionCheck","classes/ActionDispatch/Session/StaleSessionCheck.html#method-i-load_session","(env)",""],["load_tasks","Rails::Application","classes/Rails/Application.html#method-i-load_tasks","(app=self)","<p>Load the application and its railties tasks and invoke the registered\nhooks. Check <code>Rails::Railtie.rake_tasks</code> …\n"],["load_tasks","Rails::Engine","classes/Rails/Engine.html#method-i-load_tasks","(app=self)",""],["load_tasks","Rails::Railtie","classes/Rails/Railtie.html#method-i-load_tasks","(app=self)",""],["loaded?","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-i-loaded-3F","()","<p>Has the session been loaded yet?\n"],["loaded?","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-i-loaded-3F","()",""],["local","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-local","(*args)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from given values. …\n"],["local?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-local-3F","()","<p>True if the request came from localhost, 127.0.0.1.\n"],["local_constant_names","Module","classes/Module.html#method-i-local_constant_names","()","<p>Returns the names of the constants defined locally rather than the\nconstants themselves. See <code>local_constants</code> …\n"],["local_constants","Module","classes/Module.html#method-i-local_constants","()","<p>Returns the constants that have been defined locally by this object and not\nin an ancestor. This method …\n"],["local_offset","DateTime","classes/DateTime.html#method-c-local_offset","()","<p>DateTimes aren’t aware of DST rules, so use a consistent non-DST offset\nwhen creating a DateTime with …\n"],["local_time","Time","classes/Time.html#method-c-local_time","(*args)","<p>Wraps class method <code>time_with_datetime_fallback</code> with\n<code>utc_or_local</code> set to <code>:local</code>.\n"],["local_to_utc","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-local_to_utc","(time, dst=true)","<p>Adjust the given time to the simultaneous time in UTC. Returns a Time.utc()\ninstance.\n"],["localize","AbstractController::Translation","classes/AbstractController/Translation.html#method-i-localize","(*args)",""],["localize","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-localize","(*args)","<p>Delegates to <code>I18n.localize</code> with no additional functionality.\n"],["locals","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-locals","()",""],["localtime","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-localtime","()","<p>Returns a <code>Time.local()</code> instance of the simultaneous time in\nyour system’s <code>ENV['TZ']</code> zone\n"],["location","ActionController::Metal","classes/ActionController/Metal.html#method-i-location","()",""],["location","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-location","()",""],["location=","ActionController::Metal","classes/ActionController/Metal.html#method-i-location-3D","(url)",""],["location=","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-location-3D","(url)",""],["lock","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-lock","(locks = true)",""],["lock!","ActiveRecord::Locking::Pessimistic","classes/ActiveRecord/Locking/Pessimistic.html#method-i-lock-21","(lock = true)","<p>Obtain a row lock on this record. Reloads the record to obtain the\nrequested lock. Pass an SQL locking …\n"],["locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_column","()","<p>The version column used for optimistic locking. Defaults to\n<code>lock_version</code>.\n"],["locking_column=","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_column-3D","(value)",""],["locking_enabled?","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_enabled-3F","()","<p>Returns true if the <code>lock_optimistically</code> flag is set to true\n(which it is, by default) and the table includes …\n"],["log","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-log","(sql, name = \"SQL\", binds = [])",""],["log","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-log","()",""],["log","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-log","(*args)","<p>Define log for backwards compatibility. If just one argument is sent,\ninvoke say, otherwise invoke say_status. …\n"],["log_level","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-log_level","()",""],["log_path","Rails::Server","classes/Rails/Server.html#method-i-log_path","()",""],["log_process_action","ActiveRecord::Railties::ControllerRuntime::ClassMethods","classes/ActiveRecord/Railties/ControllerRuntime/ClassMethods.html#method-i-log_process_action","(payload)",""],["log_subscribers","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-c-log_subscribers","()",""],["logged","ActiveSupport::LogSubscriber::TestHelper::MockLogger","classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-logged","(level)",""],["logger","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-logger","()",""],["logger","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-logger","()","<p>TODO: Ideally, ActionView should have its own logger so it does not depend\non AC.logger\n"],["logger","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-logger","","<p>Accepts a logger conforming to the interface of Log4r or the default Ruby\n1.8+ Logger class, which is …\n"],["logger","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-i-logger","()",""],["logger","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-logger","","<p>The logger for diagnosing and tracing Active Resource calls.\n"],["logger","ActiveResource::LogSubscriber","classes/ActiveResource/LogSubscriber.html#method-i-logger","()",""],["logger","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-c-logger","()",""],["logger","Rails","classes/Rails.html#method-c-logger","()",""],["logger=","Rails","classes/Rails.html#method-c-logger-3D","(logger)",""],["logger?","ActiveModel::MassAssignmentSecurity::LoggerSanitizer","classes/ActiveModel/MassAssignmentSecurity/LoggerSanitizer.html#method-i-logger-3F","()",""],["lookup","Mime::Type","classes/Mime/Type.html#method-c-lookup","(string)",""],["lookup_ancestors","ActiveModel::Translation","classes/ActiveModel/Translation.html#method-i-lookup_ancestors","()","<p>When localizing a string, it goes through the lookup returned by this\nmethod, which is used in ActiveModel::Name#human …\n"],["lookup_by_extension","Mime::Type","classes/Mime/Type.html#method-c-lookup_by_extension","(extension)",""],["lookup_context","AbstractController::ViewPaths","classes/AbstractController/ViewPaths.html#method-i-lookup_context","()","<p>LookupContext is the object responsible to hold all information required to\nlookup templates, i.e. view …\n"],["lookup_store","ActiveSupport::Cache","classes/ActiveSupport/Cache.html#method-c-lookup_store","(*store_option)","<p>Creates a new CacheStore object according to the given options.\n<p>If no arguments are passed to this method, …\n"],["ls","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-i-ls","()",""],["lstrip","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-lstrip","()","<p>Strips entire range of Unicode whitespace from the left of the string.\n"],["mail","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-mail","(headers={}, &block)","<p>The main method that creates the message and renders the email templates.\nThere are two ways to call …\n"],["mail_to","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-mail_to","(email_address, name = nil, html_options = {})","<p>Creates a mailto link tag to the specified <code>email_address</code>,\nwhich is also used as the name of the link …\n"],["mailer","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-mailer","()","<p>Access the mailer instance.\n"],["mailer_name","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-mailer_name","()",""],["mailer_name","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-mailer_name","()",""],["many?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-many-3F","()",""],["many?","Enumerable","classes/Enumerable.html#method-i-many-3F","()","<p>Returns true if the enumerable has more than 1 element. Functionally\nequivalent to enum.to_a.size &gt; …\n"],["mark_for_destruction","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-mark_for_destruction","()","<p>Marks this record to be destroyed as part of the parents save transaction.\nThis does <em>not</em> actually destroy …\n"],["marked_for_destruction?","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-marked_for_destruction-3F","()","<p>Returns whether or not this record will be destroyed as part of the parents\nsave transaction.\n<p>Only useful …\n"],["marshal_dump","ActiveSupport::Testing::ProxyTestResult","classes/ActiveSupport/Testing/ProxyTestResult.html#method-i-marshal_dump","()",""],["marshal_dump","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-marshal_dump","()",""],["marshal_load","ActiveSupport::Testing::ProxyTestResult","classes/ActiveSupport/Testing/ProxyTestResult.html#method-i-marshal_load","(calls)",""],["marshal_load","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-marshal_load","(variables)",""],["mass_assignment_authorizer","ActiveModel::MassAssignmentSecurity","classes/ActiveModel/MassAssignmentSecurity.html#method-i-mass_assignment_authorizer","(role)",""],["mass_assignment_options","ActiveRecord::AttributeAssignment","classes/ActiveRecord/AttributeAssignment.html#method-i-mass_assignment_options","()",""],["mass_assignment_role","ActiveRecord::AttributeAssignment","classes/ActiveRecord/AttributeAssignment.html#method-i-mass_assignment_role","()",""],["mass_assignment_sanitizer=","ActiveModel::MassAssignmentSecurity::ClassMethods","classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-mass_assignment_sanitizer-3D","(value)",""],["match","ActionDispatch::Routing::Mapper::Base","classes/ActionDispatch/Routing/Mapper/Base.html#method-i-match","(path, options=nil)","<p>Matches a url pattern to one or more routes. Any symbols in a pattern are\ninterpreted as url query parameters …\n"],["match","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-match","(path, *rest)",""],["match","ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher","classes/ActiveModel/AttributeMethods/ClassMethods/AttributeMethodMatcher.html#method-i-match","(method_name)",""],["match","ActiveRecord::DynamicFinderMatch","classes/ActiveRecord/DynamicFinderMatch.html#method-c-match","(method)",""],["match","ActiveRecord::DynamicScopeMatch","classes/ActiveRecord/DynamicScopeMatch.html#method-c-match","(method)",""],["match","HTML::Selector","classes/HTML/Selector.html#method-i-match","(element, first_only = false)","<p>Matches an element against the selector.\n<p>For a simple selector this method returns an array with the element …\n"],["match?","ActionDispatch::FileHandler","classes/ActionDispatch/FileHandler.html#method-i-match-3F","(path)",""],["mattr_accessor","Module","classes/Module.html#method-i-mattr_accessor","(*syms)","<p>Extends the module object with module and instance accessors for class\nattributes, just like the native …\n"],["mattr_reader","Module","classes/Module.html#method-i-mattr_reader","(*syms)",""],["mattr_writer","Module","classes/Module.html#method-i-mattr_writer","(*syms)",""],["maximum","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-maximum","(column_name, options = {})","<p>Calculates the maximum value on a given column. The value is returned with\nthe same data type of the …\n"],["mb_chars","String","classes/String.html#method-i-mb_chars","()","<p>Multibyte proxy\n<p><code>mb_chars</code> is a multibyte safe proxy for string methods.\n<p>In Ruby 1.8 and older it creates …\n"],["measure","ActiveSupport::Testing::Performance::Metrics::CpuTime","classes/ActiveSupport/Testing/Performance/Metrics/CpuTime.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::GcRuns","classes/ActiveSupport/Testing/Performance/Metrics/GcRuns.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::GcTime","classes/ActiveSupport/Testing/Performance/Metrics/GcTime.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::Memory","classes/ActiveSupport/Testing/Performance/Metrics/Memory.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::Objects","classes/ActiveSupport/Testing/Performance/Metrics/Objects.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::ProcessTime","classes/ActiveSupport/Testing/Performance/Metrics/ProcessTime.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::Time","classes/ActiveSupport/Testing/Performance/Metrics/Time.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::UserTime","classes/ActiveSupport/Testing/Performance/Metrics/UserTime.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::WallTime","classes/ActiveSupport/Testing/Performance/Metrics/WallTime.html#method-i-measure","()",""],["measure_mode","ActiveSupport::Testing::Performance::Metrics::Base","classes/ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-measure_mode","()",""],["media_type","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-media_type","()",""],["megabyte","Numeric","classes/Numeric.html#method-i-megabyte","()",""],["megabytes","Numeric","classes/Numeric.html#method-i-megabytes","()",""],["member","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-member","()","<p>To add a member route, add a member block into the resource block:\n\n<pre>resources :photos do\n  member do\n  ...</pre>\n"],["member?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-member-3F","(key)",""],["member?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-member-3F","(key)",""],["memoize","ActiveSupport::Memoizable","classes/ActiveSupport/Memoizable.html#method-i-memoize","(*symbols)",""],["memoize_all","ActiveSupport::Memoizable::InstanceMethods","classes/ActiveSupport/Memoizable/InstanceMethods.html#method-i-memoize_all","()",""],["memoized_ivar_for","ActiveSupport::Memoizable","classes/ActiveSupport/Memoizable.html#method-c-memoized_ivar_for","(symbol)",""],["merge","ActiveRecord::SpawnMethods","classes/ActiveRecord/SpawnMethods.html#method-i-merge","(r)",""],["merge","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-merge","(hash)","<p>Merges the instantized and the specified hashes together, giving precedence\nto the values from the second …\n"],["merge","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-merge","(hash)","<p>Merges the instantized and the specified hashes together, giving precedence\nto the values from the second …\n"],["merge","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-merge","(other_hash, &block)",""],["merge!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-merge-21","(other_hash)",""],["merge!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-merge-21","(other_hash)",""],["merge!","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-merge-21","(other_hash)",""],["message","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-message","()",""],["message","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-message","()","<p>Access the message instance.\n"],["message","ActiveRecord::StaleObjectError","classes/ActiveRecord/StaleObjectError.html#method-i-message","()",""],["message","ActiveRecord::UnknownPrimaryKey","classes/ActiveRecord/UnknownPrimaryKey.html#method-i-message","()",""],["method","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-method","()","<p>Returns the original value of the environment’s REQUEST_METHOD, even if it\nwas overridden by middleware. …\n"],["method_added","AbstractController::Base","classes/AbstractController/Base.html#method-c-method_added","(name)",""],["method_defined_within?","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-method_defined_within-3F","(name, klass, sup = klass.superclass)",""],["method_for_action","ActionController::Compatibility","classes/ActionController/Compatibility.html#method-i-method_for_action","(action_name)",""],["method_for_action","ActionController::ImplicitRender","classes/ActionController/ImplicitRender.html#method-i-method_for_action","(action_name)",""],["method_missing","AbstractController::Collector","classes/AbstractController/Collector.html#method-i-method_missing","(symbol, &block)",""],["method_missing","ActionDispatch::Assertions::RoutingAssertions","classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-method_missing","(selector, *args, &block)","<p>ROUTES TODO: These assertions should really work in an integration context\n"],["method_missing","ActionDispatch::BodyProxy","classes/ActionDispatch/BodyProxy.html#method-i-method_missing","(*args, &block)",""],["method_missing","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-method_missing","(sym, *args, &block)","<p>Delegate unhandled messages to the current session instance.\n"],["method_missing","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-method_missing","(method, *args, &block)","<p>Allows access to the object attributes, which are held in the\n<code>@attributes</code> hash, as though they were first-class …\n"],["method_missing","ActiveRecord::Delegation","classes/ActiveRecord/Delegation.html#method-i-method_missing","(method, *args, &block)",""],["method_missing","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-method_missing","(method, *arguments, &block)",""],["method_missing","ActiveSupport::LogSubscriber::TestHelper::MockLogger","classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-method_missing","(level, message)",""],["method_missing","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-method_missing","(method, *args, &block)","<p>Forward all undefined methods to the wrapped string.\n"],["method_missing","ActiveSupport::OrderedOptions","classes/ActiveSupport/OrderedOptions.html#method-i-method_missing","(name, *args)",""],["method_missing","ActiveSupport::StringInquirer","classes/ActiveSupport/StringInquirer.html#method-i-method_missing","(method_name, *arguments)",""],["method_missing","ActiveSupport::TaggedLogging","classes/ActiveSupport/TaggedLogging.html#method-i-method_missing","(method, *args)",""],["method_missing","ActiveSupport::Testing::ProxyTestResult","classes/ActiveSupport/Testing/ProxyTestResult.html#method-i-method_missing","(name, *args)",""],["method_missing","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-method_missing","(sym, *args, &block)","<p>Send the missing method to <code>time</code> instance, and wrap result in a\nnew TimeWithZone with the existing <code>time_zone</code> …\n"],["method_missing","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-method_missing","(*args, &block)",""],["method_name","ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher","classes/ActiveModel/AttributeMethods/ClassMethods/AttributeMethodMatcher.html#method-i-method_name","(attr_name)",""],["method_names","Module","classes/Module.html#method-i-method_names","(*args)",""],["method_symbol","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-method_symbol","()","<p>Returns a symbol form of the #method\n"],["middleware","ActionController::Metal","classes/ActionController/Metal.html#method-c-middleware","()","<p>Alias for middleware_stack\n"],["middleware","ActiveSupport::Cache::Strategy::LocalCache","classes/ActiveSupport/Cache/Strategy/LocalCache.html#method-i-middleware","()","<p>Middleware class can be inserted as a Rack handler to be local cache for\nthe duration of request.\n"],["middleware","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-middleware","()","<p>Returns the middleware stack for the engine.\n"],["middleware","Rails::Server","classes/Rails/Server.html#method-i-middleware","()",""],["midnight","Date","classes/Date.html#method-i-midnight","()",""],["midnight","DateTime","classes/DateTime.html#method-i-midnight","()",""],["midnight","Time","classes/Time.html#method-i-midnight","()",""],["migrate","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-migrate","(direction)",""],["migrate","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-migrate","(direction)","<p>Execute this migration in the named direction\n"],["migration_template","Rails::Generators::Migration","classes/Rails/Generators/Migration.html#method-i-migration_template","(source, destination=nil, config={})","<p>Creates a migration template at the given destination. The difference to\nthe default template method …\n"],["migrations_paths","ActiveRecord::Schema","classes/ActiveRecord/Schema.html#method-i-migrations_paths","()",""],["mime_type","ActionView::Template","classes/ActionView/Template.html#method-i-mime_type","()",""],["mime_type","ActiveResource::Formats::JsonFormat","classes/ActiveResource/Formats/JsonFormat.html#method-i-mime_type","()",""],["mime_type","ActiveResource::Formats::XmlFormat","classes/ActiveResource/Formats/XmlFormat.html#method-i-mime_type","()",""],["minimum","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-minimum","(column_name, options = {})","<p>Calculates the minimum value on a given column. The value is returned with\nthe same data type of the …\n"],["minus_with_coercion","Time","classes/Time.html#method-i-minus_with_coercion","(other)","<p>Time#- can also be used to determine the number of seconds between two Time\ninstances. We’re layering …\n"],["minus_without_coercion","Time","classes/Time.html#method-i-minus_without_coercion","(other)",""],["minus_without_duration","Time","classes/Time.html#method-i-minus_without_duration","(other)",""],["minute","Numeric","classes/Numeric.html#method-i-minute","()",""],["minutes","Numeric","classes/Numeric.html#method-i-minutes","()",""],["missing_name","NameError","classes/NameError.html#method-i-missing_name","()","<p>Extract the name of the missing constant from the exception message.\n"],["missing_name?","NameError","classes/NameError.html#method-i-missing_name-3F","(name)","<p>Was this exception raised because the given name was missing?\n"],["model_name","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-i-model_name","()","<p>Returns an ActiveModel::Name object for module. It can be used to retrieve\nall kinds of naming-related …\n"],["module_namespacing","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-module_namespacing","(&block)","<p>Wrap block with namespace of current application if namespace exists and is\nnot skipped\n"],["modules_for_helpers","AbstractController::Helpers::ClassMethods","classes/AbstractController/Helpers/ClassMethods.html#method-i-modules_for_helpers","(args)","<p>Returns a list of modules, normalized from the acceptable kinds of helpers\nwith the following behavior: …\n"],["modules_for_helpers","ActionController::Helpers::ClassMethods","classes/ActionController/Helpers/ClassMethods.html#method-i-modules_for_helpers","(args)","<p>Overwrite modules_for_helpers to accept :all as argument, which loads all\nhelpers in helpers_path.\n<p>Parameters …\n"],["monday","Date","classes/Date.html#method-i-monday","()","<p>Returns a new <code>Date</code>/<code>DateTime</code> representing the\nstart of this week. Week is assumed to start on a Monday …\n"],["monday","Time","classes/Time.html#method-i-monday","()","<p>Returns a new <code>Date</code>/<code>DateTime</code> representing the\nstart of this week. Week is assumed to start on a Monday …\n"],["month","Integer","classes/Integer.html#method-i-month","()",""],["months","Integer","classes/Integer.html#method-i-months","()","<p>Enables the use of time calculations and declarations, like 45.minutes +\n2.hours + 4.years.\n<p>These methods …\n"],["months_ago","Date","classes/Date.html#method-i-months_ago","(months)","<p>Returns a new Date/DateTime representing the time a number of specified\nmonths ago.\n"],["months_ago","Time","classes/Time.html#method-i-months_ago","(months)","<p>Returns a new Time representing the time a number of specified months ago\n"],["months_since","Date","classes/Date.html#method-i-months_since","(months)","<p>Returns a new Date/DateTime representing the time a number of specified\nmonths in the future.\n"],["months_since","Time","classes/Time.html#method-i-months_since","(months)","<p>Returns a new Time representing the time a number of specified months in\nthe future\n"],["mount","ActionDispatch::Routing::Mapper::Base","classes/ActionDispatch/Routing/Mapper/Base.html#method-i-mount","(app, options = nil)","<p>Mount a Rack-based application to be used within the application.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">mount</span> <span class=\"ruby-constant\">SomeRackApp</span>, :<span class=\"ruby-identifier\">at</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;some_route&quot;</span>\n</pre>\n"],["mountable?","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-mountable-3F","()",""],["ms","Benchmark","classes/Benchmark.html#method-c-ms","()",""],["multipart=","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-multipart-3D","(multipart)",""],["multiple_of?","Integer","classes/Integer.html#method-i-multiple_of-3F","(number)","<p>Check whether the integer is evenly divisible by the argument.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">0</span>.<span class=\"ruby-identifier\">multiple_of?</span>(<span class=\"ruby-value\">0</span>)  <span class=\"ruby-comment\">#=&gt; true</span>\n<span class=\"ruby-value\">6</span>.<span class=\"ruby-identifier\">multiple_of?</span>(<span class=\"ruby-value\">5</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["mute","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-mute","()","<p>Silence the logger within a block.\n"],["mute","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-mute","(&block)",""],["mysql2_connection","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-mysql2_connection","(config)","<p>Establishes a connection to the database that’s used by all Active Record\nobjects.\n"],["mysql_socket","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-mysql_socket","()",""],["name","ActiveSupport::Testing::Performance::Metrics::Base","classes/ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-name","()",""],["name","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-c-name","()",""],["name","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-name","()",""],["names","QualifiedConstUtils","classes/QualifiedConstUtils.html#method-c-names","(path)",""],["namespace","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-namespace","(path, options = {})","<p>See ActionDispatch::Routing::Mapper::Scoping#namespace\n"],["namespace","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-namespace","(path, options = {})","<p>Scopes routes to a specific namespace. For example:\n\n<pre>namespace :admin do\n  resources :posts\nend</pre>\n<p>This generates …\n"],["namespace","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-namespace","(name=nil)","<p>Convenience method to get the namespace from the class name. It’s the same\nas Thor default except that …\n"],["namespace","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-namespace","()",""],["namespaced?","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-namespaced-3F","()",""],["namespaced_class_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-namespaced_class_path","()",""],["namespaced_file_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-namespaced_file_path","()",""],["native_database_types","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-native_database_types","()",""],["native_database_types","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-native_database_types","()","<p>Returns a Hash of mappings from the abstract data types to the native\ndatabase types. See TableDefinition#column …\n"],["navigation_behavior","ActionController::Responder","classes/ActionController/Responder.html#method-i-navigation_behavior","(error)","<p>This is the common behavior for formats associated with browsing, like\n:html, :iphone and so forth.\n"],["navigation_location","ActionController::Responder","classes/ActionController/Responder.html#method-i-navigation_location","()",""],["negotiate_mime","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-negotiate_mime","(order)","<p>Receives an array of mimes and return the first user sent mime that matches\nthe order array.\n"],["nested","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-nested","()",""],["nested_under_indifferent_access","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-nested_under_indifferent_access","()",""],["nested_under_indifferent_access","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-nested_under_indifferent_access","()",""],["nested_under_indifferent_access","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-nested_under_indifferent_access","()",""],["nested_under_indifferent_access","Hash","classes/Hash.html#method-i-nested_under_indifferent_access","()","<p>Called when object is nested under an object that receives\n#with_indifferent_access. This method will …\n"],["new","AbstractController::DoubleRenderError","classes/AbstractController/DoubleRenderError.html#method-c-new","(message = nil)",""],["new","AbstractController::Layouts","classes/AbstractController/Layouts.html#method-c-new","(*)",""],["new","ActionController::Caching::Actions::ActionCachePath","classes/ActionController/Caching/Actions/ActionCachePath.html#method-c-new","(controller, options = {}, infer_extension = true)","<p>If <code>infer_extension</code> is true, the cache path extension is looked\nup from the request’s path and format. …\n"],["new","ActionController::Metal","classes/ActionController/Metal.html#method-c-new","()",""],["new","ActionController::Middleware","classes/ActionController/Middleware.html#method-c-new","(app)",""],["new","ActionController::Middleware","classes/ActionController/Middleware.html#method-c-new","(app)",""],["new","ActionController::Middleware::ActionMiddleware","classes/ActionController/Middleware/ActionMiddleware.html#method-c-new","(controller, app)",""],["new","ActionController::Responder","classes/ActionController/Responder.html#method-c-new","(controller, resources, options={})",""],["new","ActionDispatch::BestStandardsSupport","classes/ActionDispatch/BestStandardsSupport.html#method-c-new","(app, type = true)",""],["new","ActionDispatch::BodyProxy","classes/ActionDispatch/BodyProxy.html#method-c-new","(body, &block)",""],["new","ActionDispatch::Callbacks","classes/ActionDispatch/Callbacks.html#method-c-new","(app)",""],["new","ActionDispatch::Cookies","classes/ActionDispatch/Cookies.html#method-c-new","(app)",""],["new","ActionDispatch::DebugExceptions","classes/ActionDispatch/DebugExceptions.html#method-c-new","(app)",""],["new","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-c-new","(env, exception)",""],["new","ActionDispatch::FileHandler","classes/ActionDispatch/FileHandler.html#method-c-new","(root, cache_control)",""],["new","ActionDispatch::Flash","classes/ActionDispatch/Flash.html#method-c-new","(app)",""],["new","ActionDispatch::Head","classes/ActionDispatch/Head.html#method-c-new","(app)",""],["new","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-c-new","(*args)",""],["new","ActionDispatch::Http::ParameterFilter","classes/ActionDispatch/Http/ParameterFilter.html#method-c-new","(filters)",""],["new","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-c-new","(hash)",""],["new","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-c-new","(app)","<p>Create and initialize a new Session instance.\n"],["new","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-c-new","(*args)",""],["new","ActionDispatch::MiddlewareStack::Middleware","classes/ActionDispatch/MiddlewareStack/Middleware.html#method-c-new","(klass_or_name, *args, &block)",""],["new","ActionDispatch::ParamsParser","classes/ActionDispatch/ParamsParser.html#method-c-new","(app, parsers = {})",""],["new","ActionDispatch::PublicExceptions","classes/ActionDispatch/PublicExceptions.html#method-c-new","(public_path)",""],["new","ActionDispatch::RailsEntityStore","classes/ActionDispatch/RailsEntityStore.html#method-c-new","(store = RAILS_CACHE)",""],["new","ActionDispatch::RailsMetaStore","classes/ActionDispatch/RailsMetaStore.html#method-c-new","(store = RAILS_CACHE)","<p>TODO: Finally deal with the RAILS_CACHE global\n"],["new","ActionDispatch::Reloader","classes/ActionDispatch/Reloader.html#method-c-new","(app, condition=nil)",""],["new","ActionDispatch::RemoteIp","classes/ActionDispatch/RemoteIp.html#method-c-new","(app, check_ip_spoofing = true, custom_proxies = nil)",""],["new","ActionDispatch::RemoteIp::GetIp","classes/ActionDispatch/RemoteIp/GetIp.html#method-c-new","(env, middleware)",""],["new","ActionDispatch::RequestId","classes/ActionDispatch/RequestId.html#method-c-new","(app)",""],["new","ActionDispatch::Rescue","classes/ActionDispatch/Rescue.html#method-c-new","(app, rescuers = {}, &block)",""],["new","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-c-new","(status = 200, header = {}, body = [])",""],["new","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-new","()",""],["new","ActionDispatch::Routing::UrlFor","classes/ActionDispatch/Routing/UrlFor.html#method-c-new","(*)",""],["new","ActionDispatch::Session::CacheStore","classes/ActionDispatch/Session/CacheStore.html#method-c-new","(app, options = {})","<p>Create a new store. The cache to use can be passed in the\n<code>:cache</code> option. If it is not specified,\n<code>Rails.cache</code> …\n"],["new","ActionDispatch::Session::Compatibility","classes/ActionDispatch/Session/Compatibility.html#method-c-new","(app, options = {})",""],["new","ActionDispatch::Session::MemCacheStore","classes/ActionDispatch/Session/MemCacheStore.html#method-c-new","(app, options = {})",""],["new","ActionDispatch::ShowExceptions","classes/ActionDispatch/ShowExceptions.html#method-c-new","(app, exceptions_app = nil)",""],["new","ActionDispatch::Static","classes/ActionDispatch/Static.html#method-c-new","(app, path, cache_control=nil)",""],["new","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-c-new","(env = {})",""],["new","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-c-new","(env = {})",""],["new","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-new","(method_name=nil, *args)","<p>Instantiate a new mailer object. If <code>method_name</code> is not\n<code>nil</code>, the mailer will be initialized according …\n"],["new","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-c-new","(path, pattern=nil)",""],["new","ActionView::FixtureResolver","classes/ActionView/FixtureResolver.html#method-c-new","(hash = {}, pattern=nil)",""],["new","ActionView::Helpers::AssetTagHelper::AssetIncludeTag","classes/ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html#method-c-new","(config, asset_paths)",""],["new","ActionView::Helpers::AtomFeedHelper::AtomBuilder","classes/ActionView/Helpers/AtomFeedHelper/AtomBuilder.html#method-c-new","(xml)",""],["new","ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder","classes/ActionView/Helpers/AtomFeedHelper/AtomFeedBuilder.html#method-c-new","(xml, view, feed_options = {})",""],["new","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-c-new","(object_name, object, template, options, proc)",""],["new","ActionView::Helpers::InstanceTag","classes/ActionView/Helpers/InstanceTag.html#method-c-new","(object_name, method_name, template_object, object = nil)",""],["new","ActionView::Helpers::NumberHelper::InvalidNumberError","classes/ActionView/Helpers/NumberHelper/InvalidNumberError.html#method-c-new","(number)",""],["new","ActionView::PartialRenderer","classes/ActionView/PartialRenderer.html#method-c-new","(*)",""],["new","ActionView::Renderer","classes/ActionView/Renderer.html#method-c-new","(lookup_context)",""],["new","ActionView::Resolver","classes/ActionView/Resolver.html#method-c-new","()",""],["new","ActionView::Resolver::Path","classes/ActionView/Resolver/Path.html#method-c-new","(name, prefix, partial, virtual)",""],["new","ActionView::Template","classes/ActionView/Template.html#method-c-new","(source, identifier, handler, details)",""],["new","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-new","(*)",""],["new","ActionView::TestCase::TestController","classes/ActionView/TestCase/TestController.html#method-c-new","()",""],["new","ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher","classes/ActiveModel/AttributeMethods/ClassMethods/AttributeMethodMatcher.html#method-c-new","(options = {})",""],["new","ActiveModel::BlockValidator","classes/ActiveModel/BlockValidator.html#method-c-new","(options, &block)",""],["new","ActiveModel::EachValidator","classes/ActiveModel/EachValidator.html#method-c-new","(options)","<p>Returns a new validator instance. All options will be available via the\n<code>options</code> reader, however the  …\n"],["new","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-c-new","(base)","<p>Pass in the instance of the object that is using the errors object.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">initialize</span>\n    <span class=\"ruby-operator\">...</span>\n</pre>\n"],["new","ActiveModel::MassAssignmentSecurity::LoggerSanitizer","classes/ActiveModel/MassAssignmentSecurity/LoggerSanitizer.html#method-c-new","(target)",""],["new","ActiveModel::MassAssignmentSecurity::Sanitizer","classes/ActiveModel/MassAssignmentSecurity/Sanitizer.html#method-c-new","(target=nil)",""],["new","ActiveModel::Name","classes/ActiveModel/Name.html#method-c-new","(klass, namespace = nil, name = nil)",""],["new","ActiveModel::Observer","classes/ActiveModel/Observer.html#method-c-new","()","<p>Start observing the declared classes and their subclasses.\n"],["new","ActiveModel::ObserverArray","classes/ActiveModel/ObserverArray.html#method-c-new","(model_class, *args)",""],["new","ActiveModel::Validations::AcceptanceValidator","classes/ActiveModel/Validations/AcceptanceValidator.html#method-c-new","(options)",""],["new","ActiveModel::Validations::LengthValidator","classes/ActiveModel/Validations/LengthValidator.html#method-c-new","(options)",""],["new","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-c-new","(options)","<p>Accepts options that will be made available through the\n<code>options</code> reader.\n"],["new","ActiveRecord::AttributeAssignmentError","classes/ActiveRecord/AttributeAssignmentError.html#method-c-new","(message, exception, attribute)",""],["new","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-new","(attributes = nil, options = {})","<p>New objects can be instantiated as either empty (pass no construction\nparameter) or pre-set with attributes …\n"],["new","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-c-new","(connection, logger, connection_options, config)","<p>FIXME: Make the first parameter more similar for the two adapters\n"],["new","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-c-new","(pools = {})",""],["new","ActiveRecord::ConnectionAdapters::ConnectionManagement","classes/ActiveRecord/ConnectionAdapters/ConnectionManagement.html#method-c-new","(app)",""],["new","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-c-new","(spec)","<p>Creates a new ConnectionPool object. <code>spec</code> is a\nConnectionSpecification object which describes database …\n"],["new","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-c-new","(connection, logger, connection_options, config)",""],["new","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-c-new","(connection, logger, connection_options, config)",""],["new","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-c-new","(connection, max = 1000)",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-c-new","(connection, logger, connection_parameters, config)","<p>Initializes and connects a PostgreSQL adapter.\n"],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-c-new","(connection, max)",""],["new","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-c-new","(connection, logger, config)",""],["new","ActiveRecord::ConnectionAdapters::SQLiteAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter/StatementPool.html#method-c-new","(connection, max)",""],["new","ActiveRecord::ConnectionAdapters::SQLiteAdapter::Version","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter/Version.html#method-c-new","(version_string)",""],["new","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-c-new","(conn)",""],["new","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-c-new","(connection, max = 1000)",""],["new","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-c-new","(table_name, base)",""],["new","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-c-new","(base)",""],["new","ActiveRecord::DynamicFinderMatch","classes/ActiveRecord/DynamicFinderMatch.html#method-c-new","(finder, instantiator, bang, attribute_names)",""],["new","ActiveRecord::DynamicScopeMatch","classes/ActiveRecord/DynamicScopeMatch.html#method-c-new","(scope, attribute_names)",""],["new","ActiveRecord::Fixtures","classes/ActiveRecord/Fixtures.html#method-c-new","(connection, table_name, class_name, fixture_path)",""],["new","ActiveRecord::Fixtures::File","classes/ActiveRecord/Fixtures/File.html#method-c-new","(file)",""],["new","ActiveRecord::IdentityMap::Middleware","classes/ActiveRecord/IdentityMap/Middleware.html#method-c-new","(app)",""],["new","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-c-new","()",""],["new","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-new","()",""],["new","ActiveRecord::Migration::CommandRecorder","classes/ActiveRecord/Migration/CommandRecorder.html#method-c-new","(delegate = nil)",""],["new","ActiveRecord::MigrationProxy","classes/ActiveRecord/MigrationProxy.html#method-c-new","(name, version, filename, scope)",""],["new","ActiveRecord::MultiparameterAssignmentErrors","classes/ActiveRecord/MultiparameterAssignmentErrors.html#method-c-new","(errors)",""],["new","ActiveRecord::QueryCache","classes/ActiveRecord/QueryCache.html#method-c-new","(app)",""],["new","ActiveRecord::RecordInvalid","classes/ActiveRecord/RecordInvalid.html#method-c-new","(record)",""],["new","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-c-new","(macro, name, options, active_record)",""],["new","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-c-new","(klass, table)",""],["new","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-new","(*args, &block)",""],["new","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-c-new","(columns, rows)",""],["new","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-c-new","(attributes = nil, options = {})",""],["new","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-new","(attributes)","<p>Look for normal and marshaled data, self.find_by_session_id’s way of\ntelling us to postpone unmarshaling …\n"],["new","ActiveRecord::StaleObjectError","classes/ActiveRecord/StaleObjectError.html#method-c-new","(record, attempted_action)",""],["new","ActiveRecord::UnknownPrimaryKey","classes/ActiveRecord/UnknownPrimaryKey.html#method-c-new","(model)",""],["new","ActiveRecord::Validations::UniquenessValidator","classes/ActiveRecord/Validations/UniquenessValidator.html#method-c-new","(options)",""],["new","ActiveRecord::WrappedDatabaseException","classes/ActiveRecord/WrappedDatabaseException.html#method-c-new","(message, original_exception)",""],["new","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-new","(attributes = {}, persisted = false)","<p>Constructor method for new resources; the optional <code>attributes</code>\nparameter takes a hash of attributes for …\n"],["new","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-c-new","(site, format = ActiveResource::Formats::JsonFormat)","<p>The <code>site</code> parameter is required and will set the\n<code>site</code> attribute to the URI for the remote resource service. …\n"],["new","ActiveResource::Request","classes/ActiveResource/Request.html#method-c-new","(method, path, body = nil, headers = {})",""],["new","ActiveResource::Response","classes/ActiveResource/Response.html#method-c-new","(body, message = 200, headers = {})",""],["new","ActiveResource::SSLError","classes/ActiveResource/SSLError.html#method-c-new","(message)",""],["new","ActiveResource::TimeoutError","classes/ActiveResource/TimeoutError.html#method-c-new","(message)",""],["new","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-c-new","()",""],["new","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-c-new","(log, level = DEBUG)",""],["new","ActiveSupport::Cache::Entry","classes/ActiveSupport/Cache/Entry.html#method-c-new","(value, options = {})","<p>Create a new cache entry for the specified value. Options supported are\n<code>:compress</code>, <code>:compress_threshold</code> …\n"],["new","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-c-new","(cache_path, options = nil)",""],["new","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-c-new","(*addresses)","<p>Creates a new MemCacheStore object, with the given memcached server\naddresses. Each address is either …\n"],["new","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-c-new","(options = nil)",""],["new","ActiveSupport::Cache::NullStore","classes/ActiveSupport/Cache/NullStore.html#method-c-new","(options = nil)",""],["new","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-c-new","(options = nil)","<p>Create a new cache. The options will be passed to any write method calls\nexcept for :namespace which …\n"],["new","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-c-new","()",""],["new","ActiveSupport::Dependencies::ClassCache","classes/ActiveSupport/Dependencies/ClassCache.html#method-c-new","()",""],["new","ActiveSupport::Dependencies::WatchStack","classes/ActiveSupport/Dependencies/WatchStack.html#method-c-new","()","<p>@watching is a stack of lists of constants being watched. For instance, if\nparent.rb is autoloaded, the …\n"],["new","ActiveSupport::FileUpdateChecker","classes/ActiveSupport/FileUpdateChecker.html#method-c-new","(files, dirs={}, &block)","<p>It accepts two parameters on initialization. The first is an array of files\nand the second is an optional …\n"],["new","ActiveSupport::FileWatcher","classes/ActiveSupport/FileWatcher.html#method-c-new","()",""],["new","ActiveSupport::FileWatcher::Backend","classes/ActiveSupport/FileWatcher/Backend.html#method-c-new","(path, watcher)",""],["new","ActiveSupport::Gzip::Stream","classes/ActiveSupport/Gzip/Stream.html#method-c-new","(*)",""],["new","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-c-new","(constructor = {})",""],["new","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-c-new","(constructor = {})",""],["new","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-c-new","()",""],["new","ActiveSupport::InheritableOptions","classes/ActiveSupport/InheritableOptions.html#method-c-new","(parent = nil)",""],["new","ActiveSupport::JSON::Encoding::Encoder","classes/ActiveSupport/JSON/Encoding/Encoder.html#method-c-new","(options = nil)",""],["new","ActiveSupport::LogSubscriber::TestHelper::MockLogger","classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-c-new","(level = DEBUG)",""],["new","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-c-new","(secret, options = {})",""],["new","ActiveSupport::MessageVerifier","classes/ActiveSupport/MessageVerifier.html#method-c-new","(secret, options = {})",""],["new","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-c-new","(string)","<p>Creates a new Chars instance by wrapping <em>string</em>.\n"],["new","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-c-new","()",""],["new","ActiveSupport::Notifications::Event","classes/ActiveSupport/Notifications/Event.html#method-c-new","(name, start, ending, transaction_id, payload)",""],["new","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-c-new","()",""],["new","ActiveSupport::Notifications::Instrumenter","classes/ActiveSupport/Notifications/Instrumenter.html#method-c-new","(notifier)",""],["new","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-c-new","(*args, &block)","<p>In MRI the Hash class is core and written in C. In particular, methods are\nprogrammed with explicit  …\n"],["new","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-c-new","(*)",""],["new","ActiveSupport::SafeBuffer::SafeConcatError","classes/ActiveSupport/SafeBuffer/SafeConcatError.html#method-c-new","()",""],["new","ActiveSupport::TaggedLogging","classes/ActiveSupport/TaggedLogging.html#method-c-new","(logger)",""],["new","ActiveSupport::Testing::Performance::Benchmarker","classes/ActiveSupport/Testing/Performance/Benchmarker.html#method-c-new","(*args)",""],["new","ActiveSupport::Testing::Performance::Metrics::Base","classes/ActiveSupport/Testing/Performance/Metrics/Base.html#method-c-new","()",""],["new","ActiveSupport::Testing::Performance::Metrics::CpuTime","classes/ActiveSupport/Testing/Performance/Metrics/CpuTime.html#method-c-new","(*args)",""],["new","ActiveSupport::Testing::Performance::Performer","classes/ActiveSupport/Testing/Performance/Performer.html#method-c-new","(harness, metric)",""],["new","ActiveSupport::Testing::Performance::Profiler","classes/ActiveSupport/Testing/Performance/Profiler.html#method-c-new","(*args)",""],["new","ActiveSupport::Testing::ProxyTestResult","classes/ActiveSupport/Testing/ProxyTestResult.html#method-c-new","(calls = [])",""],["new","ActiveSupport::Testing::RemoteError","classes/ActiveSupport/Testing/RemoteError.html#method-c-new","(exception)",""],["new","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-c-new","(utc_time, time_zone, local_time = nil, period = nil)",""],["new","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-new","(name, utc_offset = nil, tzinfo = nil)","<p>Create a new TimeZone object with the given name and offset. The offset is\nthe number of seconds that …\n"],["new","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-new","(name)","<p>Return a TimeZone instance with the given name, or <code>nil</code> if no\nsuch TimeZone instance exists. (This exists …\n"],["new","ArJdbcMySQL::Error","classes/ArJdbcMySQL/Error.html#method-c-new","(msg)",""],["new","HTML::Selector","classes/HTML/Selector.html#method-c-new","(selector, *values)","<p>Creates a new selector from a CSS 2 selector expression.\n<p>The first argument is the selector expression. …\n"],["new","Mime::Type","classes/Mime/Type.html#method-c-new","(string, symbol = nil, synonyms = [])",""],["new","Plugin","classes/Plugin.html#method-c-new","(uri, name = nil)",""],["new","Rails::ActionMethods","classes/Rails/ActionMethods.html#method-c-new","(generator)",""],["new","Rails::Application","classes/Rails/Application.html#method-c-new","()",""],["new","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-c-new","(*)",""],["new","Rails::Application::RoutesReloader","classes/Rails/Application/RoutesReloader.html#method-c-new","()",""],["new","Rails::BacktraceCleaner","classes/Rails/BacktraceCleaner.html#method-c-new","()",""],["new","Rails::Commands::Info","classes/Rails/Commands/Info.html#method-c-new","(base_command)",""],["new","Rails::Commands::Install","classes/Rails/Commands/Install.html#method-c-new","(base_command)",""],["new","Rails::Commands::Plugin","classes/Rails/Commands/Plugin.html#method-c-new","()",""],["new","Rails::Commands::Remove","classes/Rails/Commands/Remove.html#method-c-new","(base_command)",""],["new","Rails::Console","classes/Rails/Console.html#method-c-new","(app)",""],["new","Rails::DBConsole","classes/Rails/DBConsole.html#method-c-new","(app)",""],["new","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-c-new","(root=nil)",""],["new","Rails::Engine::Railties","classes/Rails/Engine/Railties.html#method-c-new","(config)","<p>TODO Write tests for this behavior extracted from Application\n"],["new","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-new","(name)",""],["new","Rails::Generators::AppBase","classes/Rails/Generators/AppBase.html#method-c-new","(*args)",""],["new","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-c-new","(*args)",""],["new","Rails::Generators::GeneratedAttribute","classes/Rails/Generators/GeneratedAttribute.html#method-c-new","(name, type=nil, index_type=false, attr_options={})",""],["new","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-c-new","(*args)",""],["new","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-c-new","(name, context, options, &block)",""],["new","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-c-new","(root, current, *paths)",""],["new","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-c-new","(path)",""],["new","Rails::Plugin","classes/Rails/Plugin.html#method-c-new","(root)",""],["new","Rails::Rack::Debugger","classes/Rails/Rack/Debugger.html#method-c-new","(app)",""],["new","Rails::Rack::LogTailer","classes/Rails/Rack/LogTailer.html#method-c-new","(app, log = nil)",""],["new","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-c-new","(app, taggers = nil)",""],["new","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-c-new","()",""],["new","Rails::Server","classes/Rails/Server.html#method-c-new","(*)",""],["new","RailsEnvironment","classes/RailsEnvironment.html#method-c-new","(dir)",""],["new","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-c-new","(urls_to_fetch, level = 1, cwd = \".\")",""],["new","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-c-new","(tag)",""],["new?","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-new-3F","()","<p>Returns <code>true</code> if this object hasn’t yet been saved, otherwise,\nreturns <code>false</code>.\n<p>Examples\n\n<pre>not_new = Computer.create(:brand ...</pre>\n"],["new_constants","ActiveSupport::Dependencies::WatchStack","classes/ActiveSupport/Dependencies/WatchStack.html#method-i-new_constants","()","<p>return a list of new constants found since the last call to\nwatch_namespaces\n"],["new_element_path","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-new_element_path","(prefix_options = {})","<p>Gets the new element path for REST resources.\n<p>Options\n<p><code>prefix_options</code> - A hash to add a prefix to the request ...\n"],["new_element_path","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-new_element_path","()",""],["new_from_hash_copying_default","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-c-new_from_hash_copying_default","(hash)",""],["new_from_hash_copying_default","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-c-new_from_hash_copying_default","(hash)",""],["new_record?","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-new_record-3F","()","<p>Returns true if this object hasn’t been saved yet – that is, a record for\nthe object doesn’t exist in …\n"],["new_record?","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-new_record-3F","()",""],["new_session","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-new_session","()","<p>create a new session. If a block is given, the new session will be yielded\nto the block before being …\n"],["next_element","HTML::Selector","classes/HTML/Selector.html#method-i-next_element","(element, name = nil)","<p>Return the next element after this one. Skips sibling text nodes.\n<p>With the <code>name</code> argument, returns the …\n"],["next_key","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-next_key","()",""],["next_migration_number","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-next_migration_number","(number)",""],["next_month","Date","classes/Date.html#method-i-next_month","()","<p>Shorthand for months_since(1)\n"],["next_month","Time","classes/Time.html#method-i-next_month","()","<p>Short-hand for months_since(1)\n"],["next_selector","HTML::Selector","classes/HTML/Selector.html#method-i-next_selector","(statement, values)","<p>Called to create a dependent selector (sibling, descendant, etc). Passes\nthe remainder of the statement …\n"],["next_week","Date","classes/Date.html#method-i-next_week","(day = :monday)","<p>Returns a new Date/DateTime representing the start of the given day in next\nweek (default is :monday). …\n"],["next_week","Time","classes/Time.html#method-i-next_week","(day = :monday)","<p>Returns a new Time representing the start of the given day in next week\n(default is :monday).\n"],["next_year","Date","classes/Date.html#method-i-next_year","()","<p>Shorthand for years_since(1)\n"],["next_year","Time","classes/Time.html#method-i-next_year","()","<p>Short-hand for years_since(1)\n"],["no_color!","Rails::Generators","classes/Rails/Generators.html#method-c-no_color-21","()","<p>Remove the color from output.\n"],["nonce","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-nonce","(secret_key, time = Time.now)","<p>Uses an MD5 digest based on time to generate a value to be used only once.\n<p>A server-specified data string …\n"],["normalize","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-normalize","(form = nil)","<p>Returns the KC normalization of the string by default. NFKC is considered\nthe best normalization form …\n"],["normalize","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-normalize","(string, form=nil)","<p>Returns the KC normalization of the string by default. NFKC is considered\nthe best normalization form …\n"],["normalize_name","ActionDispatch::Routing::Mapper","classes/ActionDispatch/Routing/Mapper.html#method-c-normalize_name","(name)",""],["normalize_path","ActionDispatch::Routing::Mapper","classes/ActionDispatch/Routing/Mapper.html#method-c-normalize_path","(path)","<p>Invokes Rack::Mount::Utils.normalize path and ensure that (:locale) becomes\n(/:locale) instead of /(:locale). …\n"],["not_modified?","ActionDispatch::Http::Cache::Request","classes/ActionDispatch/Http/Cache/Request.html#method-i-not_modified-3F","(modified_at)",""],["notice","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-notice","()","<p>Convenience accessor for flash\n"],["notice=","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-notice-3D","(message)","<p>Convenience accessor for flash=\n"],["notify_observers","ActiveModel::Observing::ClassMethods","classes/ActiveModel/Observing/ClassMethods.html#method-i-notify_observers","(*arg)","<p>Notify list of observers of a change.\n"],["now","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-now","()","<p>Sets a flash that will not be available to the next action, only to the\ncurrent.\n\n<pre>flash.now[:message] = ...</pre>\n"],["now","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-now","()","<p>Returns an ActiveSupport::TimeWithZone instance representing the current\ntime in the time zone represented …\n"],["now_is_loaded?","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-now_is_loaded-3F","()",""],["nth_child","HTML::Selector","classes/HTML/Selector.html#method-i-nth_child","(a, b, of_type, reverse)","<p>Returns a lambda that can match an element against the nth-child pseudo\nclass, given the following arguments: …\n"],["number_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-number_field","(object_name, method, options = {})","<p>Returns an input tag of type “number”.\n<p>Options\n<p>Accepts same options as number_field_tag\n"],["number_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-number_field_tag","(name, value = nil, options = {})","<p>Creates a number field.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],["number_to_currency","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_currency","(number, options = {})","<p>Formats a <code>number</code> into a currency string (e.g., $13.65). You\ncan customize the format in the <code>options</code> hash. …\n"],["number_to_human","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_human","(number, options = {})","<p>Pretty prints (formats and approximates) a number in a way it is more\nreadable by humans (eg.: 1200000000 …\n"],["number_to_human_size","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_human_size","(number, options = {})","<p>Formats the bytes in <code>number</code> into a more understandable\nrepresentation (e.g., giving it 1500 yields 1.5 …\n"],["number_to_percentage","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_percentage","(number, options = {})","<p>Formats a <code>number</code> as a percentage string (e.g., 65%). You can\ncustomize the format in the <code>options</code> hash. …\n"],["number_to_phone","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_phone","(number, options = {})","<p>Formats a <code>number</code> into a US phone number (e.g., (555)\n123-9876). You can customize the format in the  …\n"],["number_with_delimiter","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_with_delimiter","(number, options = {})","<p>Formats a <code>number</code> with grouped thousands using\n<code>delimiter</code> (e.g., 12,324). You can customize the format …\n"],["number_with_precision","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_with_precision","(number, options = {})","<p>Formats a <code>number</code> with the specified level of\n<code>:precision</code> (e.g., 112.32 has a precision of 2 if\n<code>:significant</code> …\n"],["object","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-object","()",""],["observe","ActiveModel::Observer","classes/ActiveModel/Observer.html#method-c-observe","(*models)","<p>Attaches the observer to the supplied model classes.\n"],["observed_class","ActiveModel::Observer","classes/ActiveModel/Observer.html#method-c-observed_class","()","<p>The class observed by default is inferred from the observer’s class name:\n\n<pre>assert_equal Person, PersonObserver.observed_class</pre>\n"],["observed_classes","ActiveModel::Observer","classes/ActiveModel/Observer.html#method-c-observed_classes","()","<p>Returns an array of Classes to observe.\n<p>You can override this instead of using the <code>observe</code> helper.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["observed_classes","ActiveRecord::Observer","classes/ActiveRecord/Observer.html#method-i-observed_classes","()",""],["observer_class_for","ActiveModel::ObserverArray","classes/ActiveModel/ObserverArray.html#method-i-observer_class_for","(observer)",""],["observer_instances","ActiveModel::Observing::ClassMethods","classes/ActiveModel/Observing/ClassMethods.html#method-i-observer_instances","()","<p>Gets the current observer instances.\n"],["observers","ActiveModel::Observing::ClassMethods","classes/ActiveModel/Observing/ClassMethods.html#method-i-observers","()","<p>Gets an array of observers observing this model. The array also provides\n<code>enable</code> and <code>disable</code> methods that …\n"],["observers=","ActiveModel::Observing::ClassMethods","classes/ActiveModel/Observing/ClassMethods.html#method-i-observers-3D","(*values)","<p>Active Model Observers Activation\n<p>Activates the observers assigned. Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">ORM</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Observing</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["odd?","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-i-odd-3F","()",""],["offset","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-offset","(value)",""],["on_cdata_block","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_cdata_block","(string)",""],["on_characters","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_characters","(string)",""],["on_end_document","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_end_document","()",""],["on_end_element","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_end_element","(name)",""],["on_load","ActiveSupport","classes/ActiveSupport.html#method-c-on_load","(name, options = {}, &block)",""],["on_start_document","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_start_document","()",""],["on_start_element","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_start_element","(name, attrs = {})",""],["only","ActiveRecord::SpawnMethods","classes/ActiveRecord/SpawnMethods.html#method-i-only","(*onlies)","<p>Removes any condition from the query other than the one(s) specified in\n<code>onlies</code>.\n<p>Example:\n\n<pre>Post.order('id ...</pre>\n"],["only_child","HTML::Selector","classes/HTML/Selector.html#method-i-only_child","(of_type)","<p>Creates a only child lambda. Pass <code>of-type</code> to only look at\nelements of its type.\n"],["opaque","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-opaque","(secret_key)","<p>Opaque based on random generation - but changing each request?\n"],["open","ActionDispatch::RailsEntityStore","classes/ActionDispatch/RailsEntityStore.html#method-i-open","(key)",""],["open","ActiveRecord::Fixtures::File","classes/ActiveRecord/Fixtures/File.html#method-c-open","(file)","<p>Open a fixture file named <code>file</code>.  When called with a block, the\nblock is called with the filehandle and …\n"],["open_log","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-open_log","(log, mode)",""],["open_session","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-open_session","(app = nil)","<p>Open a new session instance. If a block is given, the new session is\nyielded to the block before being …\n"],["opt_parser","Rails::Server","classes/Rails/Server.html#method-i-opt_parser","()",""],["option_groups_from_collection_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-option_groups_from_collection_for_select","(collection, group_method, group_label_method, option_key_method, option_value_method, selected_key = nil)","<p>Returns a string of <code>&lt;option&gt;</code> tags, like\n<code>options_from_collection_for_select</code>, but groups them by …\n"],["optional_port","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-optional_port","()","<p>Returns a number port suffix like 8080 if the port number of this request\nis not the default HTTP port …\n"],["options","Object","classes/Object.html#method-i-options","()",""],["options","Rails::Commands::Info","classes/Rails/Commands/Info.html#method-i-options","()",""],["options","Rails::Commands::Install","classes/Rails/Commands/Install.html#method-i-options","()",""],["options","Rails::Commands::Plugin","classes/Rails/Commands/Plugin.html#method-i-options","()",""],["options","Rails::Commands::Remove","classes/Rails/Commands/Remove.html#method-i-options","()",""],["options_for","ActiveSupport::JSON::Encoding::Encoder","classes/ActiveSupport/JSON/Encoding/Encoder.html#method-i-options_for","(value)",""],["options_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-options_for_select","(container, selected = nil)","<p>Accepts a container (hash, array, enumerable, your type) and returns a\nstring of option tags. Given a …\n"],["options_from_collection_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-options_from_collection_for_select","(collection, value_method, text_method, selected = nil)","<p>Returns a string of option tags that have been compiled by iterating over\nthe <code>collection</code> and assigning …\n"],["options_include_default?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-options_include_default-3F","(options)",""],["ord","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-ord","()","<p>Returns the codepoint of the first character in the string.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'こんにちは'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">ord</span> <span class=\"ruby-comment\"># =&gt; 12371</span>\n</pre>\n"],["ord","String","classes/String.html#method-i-ord","()","<p>Returns the codepoint of the first character of the string, assuming a\nsingle-byte character encoding: …\n"],["order","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-order","(*args)",""],["ordered_railties","Rails::Engine","classes/Rails/Engine.html#method-i-ordered_railties","()",""],["ordinalize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-ordinalize","(number)","<p>Turns a number into an ordinal string used to denote the position in an\nordered sequence such as 1st, …\n"],["ordinalize","Integer","classes/Integer.html#method-i-ordinalize","()","<p>Ordinalize turns a number into an ordinal string used to denote the\nposition in an ordered sequence such …\n"],["orig_delete","ActiveResource::CustomMethods","classes/ActiveResource/CustomMethods.html#method-c-orig_delete","(custom_method_name, options = {})",""],["original_concat","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-original_concat","(value)",""],["original_fullpath","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-original_fullpath","()",""],["original_name","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-original_name","()",""],["original_url","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-original_url","()",""],["orm_class","Rails::Generators::ResourceHelpers","classes/Rails/Generators/ResourceHelpers.html#method-i-orm_class","()","<p>Loads the ORM::Generators::ActiveModel class. This class is responsible to\ntell scaffold entities how …\n"],["orm_instance","Rails::Generators::ResourceHelpers","classes/Rails/Generators/ResourceHelpers.html#method-i-orm_instance","(name=singular_table_name)","<p>Initialize ORM::Generators::ActiveModel to access instance methods.\n"],["output_filename","ActiveSupport::Testing::Performance::Benchmarker","classes/ActiveSupport/Testing/Performance/Benchmarker.html#method-i-output_filename","()",""],["output_filename","ActiveSupport::Testing::Performance::Performer","classes/ActiveSupport/Testing/Performance/Performer.html#method-i-output_filename","()",""],["output_filename","ActiveSupport::Testing::Performance::Profiler","classes/ActiveSupport/Testing/Performance/Profiler.html#method-i-output_filename","(printer_class)",""],["outside_transaction?","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-outside_transaction-3F","()","<p>Checks whether there is currently no transaction active. This is done by\nquerying the database driver, …\n"],["outside_transaction?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-outside_transaction-3F","()",""],["overlaps?","Range","classes/Range.html#method-i-overlaps-3F","(other)","<p>Compare two ranges and see if they overlap each other\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">overlaps?</span>(<span class=\"ruby-value\">4</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">6</span>) <span class=\"ruby-comment\"># =&gt; true</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">overlaps?</span>(<span class=\"ruby-value\">7</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">9</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["param_key","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-param_key","(record_or_class)","<p>Returns string to use for params names. It differs for namespaced models\nregarding whether it’s inside …\n"],["parameter_filter","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-parameter_filter","()",""],["parameter_filter_for","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-parameter_filter_for","(filters)",""],["parameterize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-parameterize","(string, sep = '-')","<p>Replaces special characters in a string so that it may be used as part of a\n‘pretty’ URL.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["parameterize","String","classes/String.html#method-i-parameterize","(sep = '-')","<p>Replaces special characters in a string so that it may be used as part of a\n‘pretty’ URL.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["parameters","ActionDispatch::Http::Parameters","classes/ActionDispatch/Http/Parameters.html#method-i-parameters","()","<p>Returns both GET and POST parameters in a single hash.\n"],["paramify_values","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-paramify_values","(hash_or_array_or_value)",""],["params","ActionController::Metal","classes/ActionController/Metal.html#method-i-params","()",""],["params","ActionDispatch::Http::Parameters","classes/ActionDispatch/Http/Parameters.html#method-i-params","()",""],["params=","ActionController::Metal","classes/ActionController/Metal.html#method-i-params-3D","(val)",""],["parent","Module","classes/Module.html#method-i-parent","()","<p>Returns the module which contains this one according to its name.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">M</span>\n  <span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">N</span>\n  <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-constant\">X</span> = <span class=\"ruby-constant\">M</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">N</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["parent_name","Module","classes/Module.html#method-i-parent_name","()","<p>Returns the name of the module containing this one.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">M</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">N</span>.<span class=\"ruby-identifier\">parent_name</span> <span class=\"ruby-comment\"># =&gt; &quot;M&quot;</span>\n</pre>\n"],["parent_of?","ActiveSupport::Notifications::Event","classes/ActiveSupport/Notifications/Event.html#method-i-parent_of-3F","(event)",""],["parent_prefixes","AbstractController::ViewPaths::ClassMethods","classes/AbstractController/ViewPaths/ClassMethods.html#method-i-parent_prefixes","()",""],["parents","Module","classes/Module.html#method-i-parents","()","<p>Returns all the parents of this module according to its name, ordered from\nnested outwards. The receiver …\n"],["parse","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-parse","(str, now=now)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from parsed string. …\n"],["parse","ActiveSupport::XmlMini_LibXMLSAX","classes/ActiveSupport/XmlMini_LibXMLSAX.html#method-i-parse","(data)",""],["parse","ActiveSupport::XmlMini_NokogiriSAX","classes/ActiveSupport/XmlMini_NokogiriSAX.html#method-i-parse","(data)",""],["parse","Mime::Type","classes/Mime/Type.html#method-c-parse","(accept_header)",""],["parse","Rails::Generators::GeneratedAttribute","classes/Rails/Generators/GeneratedAttribute.html#method-c-parse","(column_definition)",""],["parse!","Rails::Commands::Info","classes/Rails/Commands/Info.html#method-i-parse-21","(args)",""],["parse!","Rails::Commands::Install","classes/Rails/Commands/Install.html#method-i-parse-21","(args)",""],["parse!","Rails::Commands::Plugin","classes/Rails/Commands/Plugin.html#method-i-parse-21","(args=ARGV)",""],["parse!","Rails::Commands::Plugin","classes/Rails/Commands/Plugin.html#method-c-parse-21","(args=ARGV)",""],["parse!","Rails::Commands::Remove","classes/Rails/Commands/Remove.html#method-i-parse-21","(args)",""],["parse!","Rails::Server::Options","classes/Rails/Server/Options.html#method-i-parse-21","(args)",""],["parse_data_with_trailing_star","Mime::Type","classes/Mime/Type.html#method-c-parse_data_with_trailing_star","(input)","<p>input: ‘text’ returned value:  [Mime::JSON, Mime::XML, Mime::ICS,\nMime::HTML, Mime::CSS, Mime::CSV,  …\n"],["parse_error","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-parse_error","()",""],["parse_query","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-parse_query","(qs)",""],["parse_raw_value_as_a_number","ActiveModel::Validations::NumericalityValidator","classes/ActiveModel/Validations/NumericalityValidator.html#method-i-parse_raw_value_as_a_number","(raw_value)",""],["parse_raw_value_as_an_integer","ActiveModel::Validations::NumericalityValidator","classes/ActiveModel/Validations/NumericalityValidator.html#method-i-parse_raw_value_as_an_integer","(raw_value)",""],["parser","URI","classes/URI.html#method-c-parser","()",""],["password","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-password","()","<p>Gets the password for REST HTTP authentication.\n"],["password=","ActiveModel::SecurePassword::InstanceMethodsOnActivation","classes/ActiveModel/SecurePassword/InstanceMethodsOnActivation.html#method-i-password-3D","(unencrypted_password)","<p>Encrypts the password into the password_digest attribute.\n"],["password=","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-password-3D","(password)","<p>Sets the password for REST HTTP authentication.\n"],["password=","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-i-password-3D","(password)","<p>Sets the password for remote service.\n"],["password_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-password_field","(object_name, method, options = {})","<p>Returns an input tag of the “password” type tailored for accessing a\nspecified attribute (identified …\n"],["password_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-password_field_tag","(name = \"password\", value = nil, options = {})","<p>Creates a password field, a masked text field that will hide the users\ninput behind a mask character. …\n"],["past?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-past-3F","()",""],["past?","Date","classes/Date.html#method-i-past-3F","()","<p>Returns true if the Date object’s date lies in the past. Otherwise returns\nfalse.\n"],["past?","DateTime","classes/DateTime.html#method-i-past-3F","()","<p>Tells whether the DateTime object’s datetime lies in the past\n"],["past?","Time","classes/Time.html#method-i-past-3F","()","<p>Tells whether the Time object’s time lies in the past\n"],["path","LoadError","classes/LoadError.html#method-i-path","()",""],["path","LoadError","classes/LoadError.html#method-i-path","()",""],["path=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-path-3D","(path)",""],["path_parameters","ActionDispatch::Http::Parameters","classes/ActionDispatch/Http/Parameters.html#method-i-path_parameters","()","<p>Returns a hash with the parameters used to form the path of the request.\nReturned hash keys are strings: …\n"],["path_to_audio","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-path_to_audio","(source)",""],["path_to_font","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-path_to_font","(source)",""],["path_to_image","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-path_to_image","(source)",""],["path_to_javascript","ActionView::Helpers::AssetTagHelper::JavascriptTagHelpers","classes/ActionView/Helpers/AssetTagHelper/JavascriptTagHelpers.html#method-i-path_to_javascript","(source)",""],["path_to_stylesheet","ActionView::Helpers::AssetTagHelper::StylesheetTagHelpers","classes/ActionView/Helpers/AssetTagHelper/StylesheetTagHelpers.html#method-i-path_to_stylesheet","(source)",""],["path_to_video","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-path_to_video","(source)",""],["paths","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-paths","()",""],["paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-paths","()",""],["pending","ActiveSupport::Testing::Pending","classes/ActiveSupport/Testing/Pending.html#method-i-pending","(description = \"\", &block)",""],["perform_validations","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-perform_validations","(options={})",""],["performed?","ActionController::Metal","classes/ActionController/Metal.html#method-i-performed-3F","()",""],["period","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-period","()","<p>Returns the underlying TZInfo::TimezonePeriod.\n"],["period_for_local","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-period_for_local","(time, dst=true)","<p>Available so that TimeZone instances respond like TZInfo::Timezone\ninstances\n"],["period_for_utc","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-period_for_utc","(time)","<p>Available so that TimeZone instances respond like TZInfo::Timezone\ninstances\n"],["persisted?","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-persisted-3F","()","<p>Returns if the record is persisted, i.e. it’s not a new record and it was\nnot destroyed.\n"],["persisted?","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-persisted-3F","()","<p>Returns <code>true</code> if this object has been saved, otherwise returns\n<code>false</code>.\n<p>Examples\n\n<pre>persisted = Computer.create(:brand ...</pre>\n"],["petabyte","Numeric","classes/Numeric.html#method-i-petabyte","()",""],["petabytes","Numeric","classes/Numeric.html#method-i-petabytes","()",""],["phone_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-phone_field","(object_name, method, options = {})",""],["phone_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-phone_field_tag","(name, value = nil, options = {})",""],["pk_and_sequence_for","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-pk_and_sequence_for","(table)","<p>Returns a table’s primary key and belonging sequence.\n"],["plain?","ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher","classes/ActiveModel/AttributeMethods/ClassMethods/AttributeMethodMatcher.html#method-i-plain-3F","()",""],["pluck","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-pluck","(column_name)","<p>This method is designed to perform select by a single column as direct SQL\nquery Returns <code>Array</code> with values …\n"],["plugin","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-plugin","(name, options)","<p>Install a plugin. You must provide either a Subversion url or Git url.\n<p>For a Git-hosted plugin, you can …\n"],["plugins","Rails::Engine::Railties","classes/Rails/Engine/Railties.html#method-i-plugins","()",""],["plural","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-plural","(record_or_class)","<p>Returns the plural class name of a record or class. Examples:\n\n<pre>ActiveModel::Naming.plural(post)        ...</pre>\n"],["plural","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-plural","(rule, replacement)","<p>Specifies a new pluralization rule and its replacement. The rule can either\nbe a string or a regular …\n"],["plural_file_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-plural_file_name","()",""],["plural_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-plural_name","()",""],["plural_table_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-plural_table_name","()",""],["pluralize","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-pluralize","(count, singular, plural = nil)","<p>Attempts to pluralize the <code>singular</code> word unless\n<code>count</code> is 1. If <code>plural</code> is supplied, it will use\nthat when …\n"],["pluralize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-pluralize","(word)","<p>Returns the plural form of the word in the string.\n<p>Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;post&quot;</span>.<span class=\"ruby-identifier\">pluralize</span>             <span class=\"ruby-comment\"># =&gt; &quot;posts&quot; ...</span>\n</pre>\n"],["pluralize","String","classes/String.html#method-i-pluralize","(count = nil)","<p>Returns the plural form of the word in the string.\n<p>If the optional parameter <code>count</code> is specified, the singular …\n"],["pluralize_table_names?","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-pluralize_table_names-3F","()",""],["polymorphic_path","ActionDispatch::Routing::PolymorphicRoutes","classes/ActionDispatch/Routing/PolymorphicRoutes.html#method-i-polymorphic_path","(record_or_hash_or_array, options = {})","<p>Returns the path component of a URL for the given record. It uses\n<code>polymorphic_url</code> with <code>:routing_type</code> …\n"],["polymorphic_url","ActionDispatch::Routing::PolymorphicRoutes","classes/ActionDispatch/Routing/PolymorphicRoutes.html#method-i-polymorphic_url","(record_or_hash_or_array, options = {})","<p>Constructs a call to a named RESTful route for the given record and returns\nthe resulting URL string. …\n"],["pop_d","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-i-pop_d","()",""],["pop_tags","ActiveSupport::TaggedLogging","classes/ActiveSupport/TaggedLogging.html#method-i-pop_tags","(size = 1)",""],["populate_with_current_scope_attributes","ActiveRecord::Scoping","classes/ActiveRecord/Scoping.html#method-i-populate_with_current_scope_attributes","()",""],["port","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-port","()","<p>Returns the port number of this request as an integer.\n"],["port=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-port-3D","(number)",""],["port_string","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-port_string","()","<p>Returns a string port suffix, including colon, like “:8080” if the port\nnumber of this request …\n"],["post","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-post","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating POST HTTP method and set/volley the response\n"],["post","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-post","(path, parameters = nil, headers = nil)","<p>Performs a POST request with the given parameters. See <code>#get</code>\nfor more details.\n"],["post","ActionDispatch::Routing::Mapper::HttpHelpers","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-post","(*args, &block)","<p>Define a route that only recognizes HTTP POST. For supported arguments, see\n<code>Base#match</code>.\n<p>Example:\n<p>post ‘bacon’, …\n"],["post","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-i-post","(path, body = '', headers = {})","<p>Executes a POST request. Used to create new resources.\n"],["post","ActiveResource::CustomMethods","classes/ActiveResource/CustomMethods.html#method-c-post","(custom_method_name, options = {}, body = '')",""],["post","ActiveResource::CustomMethods","classes/ActiveResource/CustomMethods.html#method-i-post","(method_name, options = {}, body = nil)",""],["post?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-post-3F","()","<p>Is this a POST request? Equivalent to <code>request.request_method_symbol\n== :post</code>.\n"],["post_via_redirect","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-post_via_redirect","(path, parameters = nil, headers = nil)","<p>Performs a POST request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["postgresql_version","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-postgresql_version","()","<p>Returns the version of the connected PostgreSQL server.\n"],["precisionless_round","Float","classes/Float.html#method-i-precisionless_round","(precision = nil)",""],["prefetch_primary_key?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-prefetch_primary_key-3F","(table_name = nil)","<p>Should primary key values be selected from their corresponding sequence\nbefore the insert statement? …\n"],["prefix","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-prefix","(options={})","<p>Gets the prefix for a resource’s nested URL (e.g.,\n<code>prefix/collectionname/1.json</code>) This method is regenerated …\n"],["prefix=","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-prefix-3D","(value = '/')","<p>Sets the prefix for a resource’s nested URL (e.g.,\n<code>prefix/collectionname/1.json</code>). Default value is\n<code>site.path</code> …\n"],["prefix_source","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-prefix_source","()","<p>An attribute reader for the source string for the resource path prefix. \nThis method is regenerated at …\n"],["preload","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-preload","(*args)",""],["prepare!","ActionDispatch::Reloader","classes/ActionDispatch/Reloader.html#method-c-prepare-21","()","<p>Execute all prepare callbacks.\n"],["prepare!","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-prepare-21","()",""],["prepare_controller_class","ActionController::TestCase::Behavior::ClassMethods","classes/ActionController/TestCase/Behavior/ClassMethods.html#method-i-prepare_controller_class","(new_class)",""],["prepare_destination","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-prepare_destination","()",""],["prepend_after_filter","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-prepend_after_filter","","<p>Prepend an after filter. See _insert_callbacks for parameter details.\n"],["prepend_around_filter","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-prepend_around_filter","","<p>Prepend an around filter. See _insert_callbacks for parameter details.\n"],["prepend_before_filter","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-prepend_before_filter","","<p>Prepend a before filter. See _insert_callbacks for parameter details.\n"],["prepend_view_path","AbstractController::ViewPaths","classes/AbstractController/ViewPaths.html#method-i-prepend_view_path","(path)",""],["prepend_view_path","AbstractController::ViewPaths::ClassMethods","classes/AbstractController/ViewPaths/ClassMethods.html#method-i-prepend_view_path","(path)","<p>Prepend a path to the list of view paths for this controller.\n<p>Parameters\n<p><code>path</code> - If a String is provided, ...\n"],["presence","Object","classes/Object.html#method-i-presence","()","<p>Returns object if it’s <code>present?</code> otherwise returns\n<code>nil</code>. <code>object.presence</code> is equivalent to\n<code>object.present</code> …\n"],["present?","Object","classes/Object.html#method-i-present-3F","()","<p>An object is present if it’s not <code>blank?</code>.\n"],["prev_month","Date","classes/Date.html#method-i-prev_month","()","<p>Shorthand for months_ago(1)\n"],["prev_month","Time","classes/Time.html#method-i-prev_month","()","<p>Short-hand for months_ago(1)\n"],["prev_week","Date","classes/Date.html#method-i-prev_week","(day = :monday)","<p>Returns a new <code>Date</code>/<code>DateTime</code> representing the\ngiven <code>day</code> in the previous week. Default is\n<code>:monday</code>. <code>DateTime</code> …\n"],["prev_week","Time","classes/Time.html#method-i-prev_week","(day = :monday)","<p>Returns a new Time representing the start of the given day in the previous\nweek (default is :monday). …\n"],["prev_year","Date","classes/Date.html#method-i-prev_year","()","<p>Shorthand for years_ago(1)\n"],["prev_year","Time","classes/Time.html#method-i-prev_year","()","<p>Short-hand for years_ago(1)\n"],["previous_changes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-previous_changes","()","<p>Map of attributes that were changed when the model was saved.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-comment\"># =&gt; 'bob'</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">name</span> = <span class=\"ruby-string\">'robert'</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["primary_key","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-primary_key","()","<p>Defines the primary key field – can be overridden in subclasses.\nOverwriting will negate any effect …\n"],["primary_key","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-primary_key","(table)","<p>Returns just a table’s primary key\n"],["primary_key","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-primary_key","(table)","<p>Returns just a table’s primary key\n"],["primary_key","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-primary_key","(name)","<p>Appends a primary key definition to the table definition. Can be called\nmultiple times, but this is probably …\n"],["primary_key","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-primary_key","()",""],["primary_key=","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-primary_key-3D","(value)","<p>Sets the name of the primary key column.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Project</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">primary_key</span> = <span class=\"ruby-string\">&quot;sysid&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["primary_keys","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-primary_keys","()",""],["prime_cache","ActiveSupport::Memoizable::InstanceMethods","classes/ActiveSupport/Memoizable/InstanceMethods.html#method-i-prime_cache","(*syms)",""],["process","AbstractController::Base","classes/AbstractController/Base.html#method-i-process","(action, *args)","<p>Calls the action going through the entire action dispatch stack.\n<p>The actual method that is called is determined …\n"],["process","ActionController::Middleware","classes/ActionController/Middleware.html#method-i-process","(action)",""],["process","ActionController::TemplateAssertions","classes/ActionController/TemplateAssertions.html#method-i-process","(*args)",""],["process","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-process","(action, parameters = nil, session = nil, flash = nil, http_method = 'GET')",""],["process_action","AbstractController::Callbacks","classes/AbstractController/Callbacks.html#method-i-process_action","(*args)","<p>Override AbstractController::Base’s process_action to run the\nprocess_action callbacks around the normal …\n"],["process_action","ActionController::Instrumentation","classes/ActionController/Instrumentation.html#method-i-process_action","(*args)",""],["process_action","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-process_action","(event)",""],["process_action","ActionController::ParamsWrapper","classes/ActionController/ParamsWrapper.html#method-i-process_action","(*args)","<p>Performs parameters wrapping upon the request. Will be called automatically\nby the metal call stack. …\n"],["process_attributes_for","HTML::WhiteListSanitizer","classes/HTML/WhiteListSanitizer.html#method-i-process_attributes_for","(node, options)",""],["process_node","HTML::FullSanitizer","classes/HTML/FullSanitizer.html#method-i-process_node","(node, result, options)",""],["process_node","HTML::LinkSanitizer","classes/HTML/LinkSanitizer.html#method-i-process_node","(node, result, options)",""],["process_node","HTML::Sanitizer","classes/HTML/Sanitizer.html#method-i-process_node","(node, result, options)",""],["process_node","HTML::WhiteListSanitizer","classes/HTML/WhiteListSanitizer.html#method-i-process_node","(node, result, options)",""],["process_removed_attributes","ActiveModel::MassAssignmentSecurity::LoggerSanitizer","classes/ActiveModel/MassAssignmentSecurity/LoggerSanitizer.html#method-i-process_removed_attributes","(attrs)",""],["process_removed_attributes","ActiveModel::MassAssignmentSecurity::Sanitizer","classes/ActiveModel/MassAssignmentSecurity/Sanitizer.html#method-i-process_removed_attributes","(attrs)",""],["process_removed_attributes","ActiveModel::MassAssignmentSecurity::StrictSanitizer","classes/ActiveModel/MassAssignmentSecurity/StrictSanitizer.html#method-i-process_removed_attributes","(attrs)",""],["process_view_paths","ActionView::Base","classes/ActionView/Base.html#method-c-process_view_paths","(value)",""],["process_with_new_base_test","ActionController::Testing","classes/ActionController/Testing.html#method-i-process_with_new_base_test","(request, response)","<p>TODO: Clean this up\n"],["profile","ActiveSupport::Testing::Performance::Metrics::Base","classes/ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-profile","()","<p>overridden by each implementation\n"],["properties","Rails::InfoController","classes/Rails/InfoController.html#method-i-properties","()",""],["property","Rails::Info","classes/Rails/Info.html#method-c-property","(name, value = nil)",""],["protect_against_forgery?","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-protect_against_forgery-3F","()",""],["protect_from_forgery","ActionController::RequestForgeryProtection::ClassMethods","classes/ActionController/RequestForgeryProtection/ClassMethods.html#method-i-protect_from_forgery","(options = {})","<p>Turn on request forgery protection. Bear in mind that only non-GET,\nHTML/JavaScript requests are checked. …\n"],["protected_attributes","ActiveModel::MassAssignmentSecurity::ClassMethods","classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-protected_attributes","(role = :default)",""],["protocol","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-protocol","()","<p>Returns ‘https://’ if this is an SSL request and ‘http://’ otherwise.\n"],["provide","ActionView::Helpers::CaptureHelper","classes/ActionView/Helpers/CaptureHelper.html#method-i-provide","(name, content = nil, &block)","<p>The same as <code>content_for</code> but when used with streaming flushes\nstraight back to the layout. In other words, …\n"],["proxy","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-proxy","()","<p>Gets the proxy variable if a proxy is required\n"],["proxy=","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-proxy-3D","(proxy)","<p>Sets the URI of the http proxy to the value in the <code>proxy</code>\nargument.\n"],["proxy=","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-i-proxy-3D","(proxy)","<p>Set the proxy for remote service.\n"],["proxy_class","ActiveSupport::Multibyte","classes/ActiveSupport/Multibyte.html#method-c-proxy_class","()","<p>Returns the current proxy class\n"],["proxy_class=","ActiveSupport::Multibyte","classes/ActiveSupport/Multibyte.html#method-c-proxy_class-3D","(klass)","<p>The proxy class returned when calling mb_chars. You can use this accessor\nto configure your own proxy …\n"],["prune","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-prune","(target_size, max_time = nil)","<p>To ensure entries fit within the specified memory prune the cache by\nremoving the least recently accessed …\n"],["pruning?","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-pruning-3F","()","<p>Returns true if the cache is currently being pruned.\n"],["public_directory","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-public_directory","()",""],["public_path","Rails","classes/Rails.html#method-c-public_path","()",""],["publish","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-c-publish","(name, *args)",""],["publish","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-publish","(name, *args)",""],["push_d","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-i-push_d","(dir)",""],["push_tags","ActiveSupport::TaggedLogging","classes/ActiveSupport/TaggedLogging.html#method-i-push_tags","(*tags)",""],["put","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-put","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating PUT HTTP method and set/volley the response\n"],["put","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-put","(path, parameters = nil, headers = nil)","<p>Performs a PUT request with the given parameters. See <code>#get</code> for\nmore details.\n"],["put","ActionDispatch::Routing::Mapper::HttpHelpers","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-put","(*args, &block)","<p>Define a route that only recognizes HTTP PUT. For supported arguments, see\n<code>Base#match</code>.\n<p>Example:\n<p>put ‘bacon’, …\n"],["put","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-i-put","(path, body = '', headers = {})","<p>Executes a PUT request (see HTTP protocol documentation if unfamiliar).\nUsed to update resources.\n"],["put","ActiveResource::CustomMethods","classes/ActiveResource/CustomMethods.html#method-c-put","(custom_method_name, options = {}, body = '')",""],["put","ActiveResource::CustomMethods","classes/ActiveResource/CustomMethods.html#method-i-put","(method_name, options = {}, body = '')",""],["put?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-put-3F","()","<p>Is this a PUT request? Equivalent to <code>request.request_method_symbol ==\n:put</code>.\n"],["put_via_redirect","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-put_via_redirect","(path, parameters = nil, headers = nil)","<p>Performs a PUT request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["qualified_const_defined?","Module","classes/Module.html#method-i-qualified_const_defined-3F","(path)",""],["qualified_const_get","Module","classes/Module.html#method-i-qualified_const_get","(path)",""],["qualified_const_set","Module","classes/Module.html#method-i-qualified_const_set","(path, value)",""],["query","ActionView::NullResolver","classes/ActionView/NullResolver.html#method-i-query","(path, exts, formats)",""],["query_attribute","ActiveRecord::AttributeMethods::Query","classes/ActiveRecord/AttributeMethods/Query.html#method-i-query_attribute","(attr_name)",""],["query_parameters","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-query_parameters","()",""],["quietly","Kernel","classes/Kernel.html#method-i-quietly","()","<p>Silences both STDOUT and STDERR, even for subprocesses.\n\n<pre>quietly { system 'bundle install' }</pre>\n"],["quote","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-quote","(value, column = nil)","<p>QUOTING ==================================================\n"],["quote","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote","(value, column = nil)","<p>Quotes the column value to help prevent SQL injection attacks.\n"],["quote_column_name","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_column_name","(column_name)","<p>Quotes the column name. Defaults to no quoting.\n"],["quote_string","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-quote_string","(string)","<p>QUOTING ==================================================\n"],["quote_string","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_string","(s)","<p>Quotes a string, escaping any ‘ (single quote) and \\ (backslash)\ncharacters.\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-quote_table_name","(name)","<p>Override to return the quoted table name. Defaults to column quoting.\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-quote_table_name","(name)","<p>Checks the following cases:\n<p>table_name\n<p>“table.name”\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_table_name","(table_name)","<p>Quotes the table name. Defaults to column name quoting.\n"],["quoted_columns_for_index","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-quoted_columns_for_index","(column_names, options = {})",""],["quoted_columns_for_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-quoted_columns_for_index","(column_names, options = {})","<p>Overridden by the mysql adapter for supporting index lengths\n"],["quoted_date","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_date","(value)",""],["quoted_false","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-quoted_false","()",""],["quoted_false","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_false","()",""],["quoted_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-quoted_locking_column","()","<p>Quote the column name used for optimistic locking.\n"],["quoted_primary_key","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-quoted_primary_key","()","<p>Returns a quoted version of the primary key name, used to construct SQL\nstatements.\n"],["quoted_table_name","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-quoted_table_name","()","<p>Returns a quoted version of the table name, used to construct SQL\nstatements.\n"],["quoted_true","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-quoted_true","()",""],["quoted_true","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_true","()",""],["rack_cookies","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-rack_cookies","()",""],["radio_button","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-radio_button","(method, tag_value, options = {})",""],["radio_button","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-radio_button","(object_name, method, tag_value, options = {})","<p>Returns a radio button tag for accessing a specified attribute (identified\nby <code>method</code>) on an object assigned …\n"],["radio_button_checked?","ActionView::Helpers::InstanceTag","classes/ActionView/Helpers/InstanceTag.html#method-c-radio_button_checked-3F","(value, checked_value)",""],["radio_button_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-radio_button_tag","(name, value, checked = false, options = {})","<p>Creates a radio button; use groups of radio buttons named the same to allow\nusers to select from a group …\n"],["rails_gemfile_entry","Rails::Generators::AppBase","classes/Rails/Generators/AppBase.html#method-i-rails_gemfile_entry","()",""],["railtie_name","Rails::Plugin","classes/Rails/Plugin.html#method-i-railtie_name","()",""],["railtie_name","Rails::Railtie","classes/Rails/Railtie.html#method-c-railtie_name","(name = nil)",""],["railtie_namespace","Rails::Railtie","classes/Rails/Railtie.html#method-i-railtie_namespace","()",""],["railties","Rails::Engine","classes/Rails/Engine.html#method-i-railties","()",""],["railties","Rails::Engine::Railties","classes/Rails/Engine/Railties.html#method-c-railties","()",""],["raise","ActiveSupport::BasicObject","classes/ActiveSupport/BasicObject.html#method-i-raise","(*args)","<p>Let ActiveSupport::BasicObject at least raise exceptions.\n"],["raise_if_absolute","QualifiedConstUtils","classes/QualifiedConstUtils.html#method-c-raise_if_absolute","(path)",""],["rake","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-rake","(command, options={})","<p>Runs the supplied rake task\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">rake</span>(<span class=\"ruby-string\">&quot;db:migrate&quot;</span>)\n<span class=\"ruby-identifier\">rake</span>(<span class=\"ruby-string\">&quot;db:migrate&quot;</span>, :<span class=\"ruby-identifier\">env</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;production&quot;</span>)\n<span class=\"ruby-identifier\">rake</span>(<span class=\"ruby-string\">&quot;gems:install&quot;</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["rake_tasks","Rails::Railtie","classes/Rails/Railtie.html#method-c-rake_tasks","(&blk)",""],["rakefile","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-rakefile","()",""],["rakefile","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-rakefile","(filename, data=nil, &block)","<p>Create a new Rakefile with the provided code (either in a block or a\nstring).\n<p>Examples\n\n<pre>rakefile(&quot;bootstrap.rake&quot;) ...</pre>\n"],["rakefile","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-rakefile","()",""],["rakefile_test_tasks","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-rakefile_test_tasks","()",""],["range_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-range_field","(object_name, method, options = {})","<p>Returns an input tag of type “range”.\n<p>Options\n<p>Accepts same options as range_field_tag\n"],["range_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-range_field_tag","(name, value = nil, options = {})","<p>Creates a range form element.\n<p>Options\n<p>Accepts the same options as number_field_tag.\n"],["raw","ActionView::Helpers::OutputSafetyHelper","classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-raw","(stringish)","<p>This method outputs without escaping a string. Since escaping tags is now\ndefault, this can be used when …\n"],["raw_connection","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-raw_connection","()","<p>Provides access to the underlying database driver for this adapter. For\nexample, this method returns …\n"],["raw_host_with_port","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-raw_host_with_port","()","<p>Returns the host for this request, such as “example.com”.\n"],["raw_post","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-raw_post","()","<p>Read the request body. This is useful for web services that need to work\nwith raw requests directly. …\n"],["raw_value","ActiveSupport::Cache::Entry","classes/ActiveSupport/Cache/Entry.html#method-i-raw_value","()","<p>Get the raw value. This value may be serialized and compressed.\n"],["raw_write_attribute","ActiveRecord::AttributeMethods::Write","classes/ActiveRecord/AttributeMethods/Write.html#method-i-raw_write_attribute","(attr_name, value)",""],["read","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-i-read","(*args)",""],["read","ActionDispatch::RailsEntityStore","classes/ActionDispatch/RailsEntityStore.html#method-i-read","(key)",""],["read","ActionDispatch::RailsMetaStore","classes/ActionDispatch/RailsMetaStore.html#method-i-read","(key)",""],["read","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-read","(name, options = nil)","<p>Fetches data from the cache, using the given key. If there is data in the\ncache with the given key, then …\n"],["read_attribute","ActiveRecord::AttributeMethods::Read","classes/ActiveRecord/AttributeMethods/Read.html#method-i-read_attribute","(attr_name)","<p>Returns the value of the attribute identified by <code>attr_name</code>\nafter it has been typecast (for example, “2004-12-12” …\n"],["read_attribute_before_type_cast","ActiveRecord::AttributeMethods::BeforeTypeCast","classes/ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-read_attribute_before_type_cast","(attr_name)",""],["read_attribute_before_type_cast","ActiveRecord::AttributeMethods::Serialization","classes/ActiveRecord/AttributeMethods/Serialization.html#method-i-read_attribute_before_type_cast","(attr_name)",""],["read_entry","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-read_entry","(key, options)",""],["read_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-read_entry","(key, options)",""],["read_fragment","ActionController::Caching::Fragments","classes/ActionController/Caching/Fragments.html#method-i-read_fragment","(key, options = nil)","<p>Reads a cached fragment from the location signified by <code>key</code>\n(see <code>expire_fragment</code> for acceptable formats). …\n"],["read_multi","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-i-read_multi","(*names)","<p>Reads multiple values from the cache using a single call to the servers for\nall keys. Options can be …\n"],["read_multi","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-read_multi","(*names)","<p>Read multiple values at once from the cache. Options can be passed in the\nlast argument.\n<p>Some cache implementation …\n"],["readable_inspect","Date","classes/Date.html#method-i-readable_inspect","()","<p>Overrides the default inspect method with a human readable one, e.g., “Mon,\n21 Feb 2005”\n"],["readable_inspect","DateTime","classes/DateTime.html#method-i-readable_inspect","()","<p>Overrides the default inspect method with a human readable one, e.g., “Mon,\n21 Feb 2005 14:30:00 …\n"],["readme","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-readme","()",""],["readme","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-readme","(path)","<p>Reads the given file at the source root and prints it in the console.\n<p>Example\n\n<pre>readme &quot;README&quot;</pre>\n"],["readme","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-readme","()",""],["readonly","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-readonly","(value = true)",""],["readonly!","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-readonly-21","()","<p>Marks this record as read only.\n"],["readonly?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-readonly-3F","()","<p>Returns <code>true</code> if the record is read only. Records loaded\nthrough joins with piggy-back attributes will …\n"],["readonly_attributes","ActiveRecord::ReadonlyAttributes::ClassMethods","classes/ActiveRecord/ReadonlyAttributes/ClassMethods.html#method-i-readonly_attributes","()","<p>Returns an array of all the attributes that have been specified as\nreadonly.\n"],["receive","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-receive","(raw_mail)","<p>Receives a raw email, parses it into an email object, decodes it,\ninstantiates a new mailer, and passes …\n"],["reconnect!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reconnect-21","()","<p>Disconnects from the database if already connected, and establishes a new\nconnection with the database. …\n"],["reconnect!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-reconnect-21","()",""],["reconnect!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-reconnect-21","()",""],["reconnect!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-reconnect-21","()","<p>Close then reopen the connection.\n"],["record","ActiveRecord::Migration::CommandRecorder","classes/ActiveRecord/Migration/CommandRecorder.html#method-i-record","(*command)","<p>record <code>command</code>. <code>command</code> should be a method name\nand arguments. For example:\n\n<pre>recorder.record(:method_name, ...</pre>\n"],["record","ActiveSupport::Testing::Performance::Benchmarker","classes/ActiveSupport/Testing/Performance/Benchmarker.html#method-i-record","()",""],["record","ActiveSupport::Testing::Performance::Profiler","classes/ActiveSupport/Testing/Performance/Profiler.html#method-i-record","()",""],["record_key_for_dom_id","ActionController::RecordIdentifier","classes/ActionController/RecordIdentifier.html#method-i-record_key_for_dom_id","(record)","<p>Returns a string representation of the key attribute(s) that is suitable\nfor use in an HTML DOM id.  …\n"],["recreate_database","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-recreate_database","(name, options = {})","<p>Drops the database specified on the <code>name</code> attribute and creates\nit again using the provided <code>options</code>.\n"],["recycle!","ActionController::TestResponse","classes/ActionController/TestResponse.html#method-i-recycle-21","()",""],["recycle!","ActionController::Testing","classes/ActionController/Testing.html#method-i-recycle-21","()",""],["redefine_method","Module","classes/Module.html#method-i-redefine_method","(method, &block)",""],["redirect","ActionDispatch::Routing::Redirection","classes/ActionDispatch/Routing/Redirection.html#method-i-redirect","(*args, &block)","<p>Redirect any path to another path:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">match</span> <span class=\"ruby-string\">&quot;/stories&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">redirect</span>(<span class=\"ruby-string\">&quot;/posts&quot;</span>)\n</pre>\n<p>You can also use interpolation …\n"],["redirect_to","ActionController::Flash","classes/ActionController/Flash.html#method-i-redirect_to","(options = {}, response_status_and_flash = {})",""],["redirect_to","ActionController::Instrumentation","classes/ActionController/Instrumentation.html#method-i-redirect_to","(*args)",""],["redirect_to","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-redirect_to","(event)",""],["redirect_to","ActionController::Redirecting","classes/ActionController/Redirecting.html#method-i-redirect_to","(options = {}, response_status = {})","<p>Redirects the browser to the target specified in <code>options</code>. This\nparameter can take one of three forms: …\n"],["redirect_to_url","ActionDispatch::TestProcess","classes/ActionDispatch/TestProcess.html#method-i-redirect_to_url","()",""],["redirect_url","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-redirect_url","()",""],["ref","Mime::Type","classes/Mime/Type.html#method-i-ref","()",""],["reference?","Rails::Generators::GeneratedAttribute","classes/Rails/Generators/GeneratedAttribute.html#method-i-reference-3F","()",""],["references","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-references","(*args)","<p>Adds a reference. Optionally adds a <code>type</code> column, if\n<code>:polymorphic</code> option is provided. <code>references</code> and \n…\n"],["references","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-references","(*args)",""],["reflect_on_aggregation","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_aggregation","(aggregation)","<p>Returns the AggregateReflection object for the named\n<code>aggregation</code> (use the symbol).\n\n<pre>Account.reflect_on_aggregation(:balance) ...</pre>\n"],["reflect_on_all_aggregations","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_aggregations","()","<p>Returns an array of AggregateReflection objects for all the aggregations in\nthe class.\n"],["reflect_on_all_associations","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_associations","(macro = nil)","<p>Returns an array of AssociationReflection objects for all the associations\nin the class. If you only …\n"],["reflect_on_all_autosave_associations","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_autosave_associations","()","<p>Returns an array of AssociationReflection objects for all associations\nwhich have <code>:autosave</code> enabled. …\n"],["reflect_on_association","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_association","(association)","<p>Returns the AssociationReflection object for the <code>association</code>\n(use the symbol).\n\n<pre>Account.reflect_on_association(:owner) ...</pre>\n"],["refresh","ActionView::Template","classes/ActionView/Template.html#method-i-refresh","(view)","<p>Receives a view object and return a template similar to self by using\n@virtual_path.\n<p>This method is useful …\n"],["register","Mime::Type","classes/Mime/Type.html#method-c-register","(string, symbol, mime_type_synonyms = [], extension_synonyms = [], skip_lookup = false)",""],["register_alias","Mime::Type","classes/Mime/Type.html#method-c-register_alias","(string, symbol, extension_synonyms = [])","<p>Registers an alias that’s not used on mime type lookup, but can be\nreferenced directly. Especially useful …\n"],["register_interceptor","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-register_interceptor","(interceptor)","<p>Register an Interceptor which will be called before mail is sent. Either a\nclass or a string can be passed …\n"],["register_interceptors","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-register_interceptors","(*interceptors)","<p>Register one or more Interceptors which will be called before mail is sent.\n"],["register_javascript_expansion","ActionView::Helpers::AssetTagHelper::JavascriptTagHelpers::ClassMethods","classes/ActionView/Helpers/AssetTagHelper/JavascriptTagHelpers/ClassMethods.html#method-i-register_javascript_expansion","(expansions)","<p>Register one or more javascript files to be included when\n<code>symbol</code> is passed to <code>javascript_include_tag</code> …\n"],["register_observer","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-register_observer","(observer)","<p>Register an Observer which will be notified when mail is delivered. Either\na class or a string can be …\n"],["register_observers","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-register_observers","(*observers)","<p>Register one or more Observers which will be notified when mail is\ndelivered.\n"],["register_stylesheet_expansion","ActionView::Helpers::AssetTagHelper::StylesheetTagHelpers::ClassMethods","classes/ActionView/Helpers/AssetTagHelper/StylesheetTagHelpers/ClassMethods.html#method-i-register_stylesheet_expansion","(expansions)","<p>Register one or more stylesheet files to be included when\n<code>symbol</code> is passed to <code>stylesheet_link_tag</code>. This …\n"],["regular_class_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-regular_class_path","()",""],["regular_update","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_update","(other_hash)",""],["regular_update","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_update","(other_hash)",""],["regular_writer","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_writer","(key, value)",""],["regular_writer","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_writer","(key, value)",""],["reinit_with","ActiveRecord::IdentityMap","classes/ActiveRecord/IdentityMap.html#method-i-reinit_with","(coder)","<p>Reinitialize an Identity Map model object from <code>coder</code>.\n<code>coder</code> must contain the attributes necessary for …\n"],["reject","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-reject","(&block)",""],["reject!","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-reject-21","()",""],["release_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-release_connection","(with_id = current_connection_id)","<p>Signal that the thread is finished with the current connection.\n#release_connection releases the connection-thread …\n"],["release_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-release_savepoint","()",""],["release_savepoint","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-release_savepoint","()",""],["release_savepoint","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-release_savepoint","()",""],["release_savepoint","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-release_savepoint","()",""],["reload","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-reload","(options = nil)","<p>Reloads the attributes of the object as usual and clears\n<code>marked_for_destruction</code> flag.\n"],["reload","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-reload","(options = nil)","<p>Reloads the attributes of this object from the database. The optional\noptions argument is passed to find …\n"],["reload","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-reload","()",""],["reload","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-reload","()","<p>A method to reload the attributes of this object from the remote web\nservice.\n<p>Examples\n\n<pre>my_branch = Branch.find(:first) ...</pre>\n"],["reload!","Rails::Application::RoutesReloader","classes/Rails/Application/RoutesReloader.html#method-i-reload-21","()",""],["reload!","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-reload-21","(print=true)","<p>reloads the environment\n"],["reload_dependencies?","Rails::Application","classes/Rails/Application.html#method-i-reload_dependencies-3F","()",""],["reload_routes!","Rails::Application","classes/Rails/Application.html#method-i-reload_routes-21","()","<p>Reload application routes regardless if they changed or not.\n"],["reloader","I18n::Railtie","classes/I18n/Railtie.html#method-c-reloader","()",""],["reloader_paths","I18n::Railtie","classes/I18n/Railtie.html#method-c-reloader_paths","()",""],["remote_addr=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-remote_addr-3D","(addr)",""],["remote_ip","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-remote_ip","()","<p>Originating IP address, usually set by the RemoteIp middleware.\n"],["remove","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove","(*column_names)","<p>Removes the column(s) from the table definition.\n<p>Examples\n\n<pre>t.remove(:qualification)\nt.remove(:qualification, ...</pre>\n"],["remove","ActiveRecord::IdentityMap","classes/ActiveRecord/IdentityMap.html#method-c-remove","(record)",""],["remove_belongs_to","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_belongs_to","(*args)",""],["remove_by_id","ActiveRecord::IdentityMap","classes/ActiveRecord/IdentityMap.html#method-c-remove_by_id","(symbolized_sti_name, id)",""],["remove_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_column","(table_name, *column_names)","<p>Removes the column(s) from the table definition.\n<p>Examples\n\n<pre>remove_column(:suppliers, :qualification)\nremove_columns(:suppliers, ...</pre>\n"],["remove_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-remove_column_sql","(table_name, *column_names)",""],["remove_columns","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_columns","(table_name, *column_names)",""],["remove_connection","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-remove_connection","(klass = self)",""],["remove_connection","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-remove_connection","(klass)","<p>Remove the connection for this class. This will close the active connection\nand the defined connection …\n"],["remove_filters!","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-remove_filters-21","()",""],["remove_hook_for","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-remove_hook_for","(*names)","<p>Remove a previously added hook.\n<p>Examples\n\n<pre>remove_hook_for :orm</pre>\n"],["remove_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_index","(table_name, options = {})","<p>Remove the given index from the table.\n<p>Remove the index_accounts_on_column in the accounts table.\n\n<pre>remove_index ...</pre>\n"],["remove_index","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_index","(options = {})","<p>Removes the given index from the table.\n<p>Examples\n<p>Remove the index_table_name_on_column in the table_name …\n"],["remove_index_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-remove_index_sql","(table_name, options = {})",""],["remove_multiparameter_id","ActiveModel::MassAssignmentSecurity::PermissionSet","classes/ActiveModel/MassAssignmentSecurity/PermissionSet.html#method-i-remove_multiparameter_id","(key)",""],["remove_possible_method","Module","classes/Module.html#method-i-remove_possible_method","(method)",""],["remove_references","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_references","(*args)","<p>Removes a reference. Optionally removes a <code>type</code> column.\n<code>remove_references</code> and <code>remove_belongs_to</code> are\nacceptable. …\n"],["remove_root","ActiveResource::Formats","classes/ActiveResource/Formats.html#method-c-remove_root","(data)",""],["remove_silencers!","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-remove_silencers-21","()","<p>Will remove all silencers, but leave in the filters. This is useful if your\ncontext of debugging suddenly …\n"],["remove_timestamps","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_timestamps","(table_name)","<p>Removes the timestamp columns (created_at and updated_at) from the table\ndefinition.\n<p>Examples\n\n<pre>remove_timestamps(:suppliers)</pre>\n"],["remove_timestamps","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_timestamps","()","<p>Removes the timestamp columns (<code>created_at</code> and\n<code>updated_at</code>) from the table.\n<p>Example\n\n<pre>t.remove_timestamps</pre>\n"],["remove_timestamps_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-remove_timestamps_sql","(table_name)",""],["rename","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-rename","(column_name, new_column_name)","<p>Renames a column.\n<p>Example\n\n<pre>t.rename(:description, :name)</pre>\n"],["rename_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-rename_column","(table_name, column_name, new_column_name)","<p>Renames a column in a table.\n"],["rename_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_column","(table_name, column_name, new_column_name)","<p>Renames a column.\n<p>Example\n\n<pre>rename_column(:suppliers, :description, :name)</pre>\n"],["rename_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-rename_column_sql","(table_name, column_name, new_column_name)",""],["rename_index","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-rename_index","(table_name, old_name, new_name)",""],["rename_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_index","(table_name, old_name, new_name)","<p>Rename an index.\n<p>Rename the index_people_on_last_name index to index_users_on_last_name\n\n<pre>rename_index :people, ...</pre>\n"],["rename_key","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-rename_key","(key, options = {})",""],["rename_table","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n<p>Example:\n\n<pre>rename_table('octopuses', 'octopi')</pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-rename_table","(name, new_name)","<p>Renames a table. Also renames a table’s primary key sequence if the\nsequence name matches the Active …\n"],["rename_table","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-rename_table","(name, new_name)","<p>Renames a table.\n<p>Example:\n\n<pre>rename_table('octopuses', 'octopi')</pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n<p>Example\n\n<pre>rename_table('octopuses', 'octopi')</pre>\n"],["render","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-render","(*args, &block)","<p>Normalize arguments, options and then delegates render_to_body and sticks\nthe result in self.response_body. …\n"],["render","ActionController::Instrumentation","classes/ActionController/Instrumentation.html#method-i-render","(*args)",""],["render","ActionView::Helpers::RenderingHelper","classes/ActionView/Helpers/RenderingHelper.html#method-i-render","(options = {}, locals = {}, &block)","<p>Returns the result of a render that’s dictated by the options hash. The\nprimary options are:\n<p><code>:partial</code> ...\n"],["render","ActionView::PartialRenderer","classes/ActionView/PartialRenderer.html#method-i-render","(context, options, block)",""],["render","ActionView::Renderer","classes/ActionView/Renderer.html#method-i-render","(context, options)","<p>Main render entry point shared by AV and AC.\n"],["render","ActionView::Template","classes/ActionView/Template.html#method-i-render","(view, locals, buffer=nil, &block)","<p>Render a template. If the template was not compiled yet, it is done exactly\nbefore rendering.\n<p>This method …\n"],["render","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-render","(options = {}, local_assigns = {}, &block)",""],["render","ActionView::TestCase::Behavior::Locals","classes/ActionView/TestCase/Behavior/Locals.html#method-i-render","(options = {}, local_assigns = {})",""],["render_body","ActionView::Renderer","classes/ActionView/Renderer.html#method-i-render_body","(context, options)","<p>Render but returns a valid Rack body. If fibers are defined, we return a\nstreaming body that renders …\n"],["render_collection","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-render_collection","(event)",""],["render_collection","ActionView::PartialRenderer","classes/ActionView/PartialRenderer.html#method-i-render_collection","()",""],["render_partial","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-render_partial","(event)",""],["render_partial","ActionView::PartialRenderer","classes/ActionView/PartialRenderer.html#method-i-render_partial","()",""],["render_template","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-render_template","(event)",""],["render_to_body","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-render_to_body","(options = {})","<p>Raw rendering of a template to a Rack-compatible body. :api: plugin\n"],["render_to_body","ActionController::Compatibility","classes/ActionController/Compatibility.html#method-i-render_to_body","(options)",""],["render_to_body","ActionController::Renderers","classes/ActionController/Renderers.html#method-i-render_to_body","(options)",""],["render_to_string","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-render_to_string","(*args, &block)","<p>Raw rendering of a template to a string. Just convert the results of\nrender_response into a String. :api: …\n"],["render_to_string","ActionController::Rendering","classes/ActionController/Rendering.html#method-i-render_to_string","(*)","<p>Overwrite render_to_string because body can now be set to a rack body.\n"],["reorder","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-reorder","(*args)","<p>Replaces any existing order defined on the relation with the specified\norder.\n\n<pre>User.order('email DESC').reorder('id ...</pre>\n"],["reorder_characters","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-reorder_characters","(codepoints)","<p>Re-order codepoints so the string becomes canonical.\n"],["replace","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-replace","(other)","<p>When replacing with another hash, the initial order of our keys must come\nfrom the other hash -ordered …\n"],["report","ActiveSupport::Testing::Performance::Performer","classes/ActiveSupport/Testing/Performance/Performer.html#method-i-report","()",""],["repository","ActiveRecord::IdentityMap","classes/ActiveRecord/IdentityMap.html#method-c-repository","()",""],["request","ActiveResource::LogSubscriber","classes/ActiveResource/LogSubscriber.html#method-i-request","(event)",""],["request_http_basic_authentication","ActionController::HttpAuthentication::Basic::ControllerMethods","classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-request_http_basic_authentication","(realm = \"Application\")",""],["request_http_digest_authentication","ActionController::HttpAuthentication::Digest::ControllerMethods","classes/ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-request_http_digest_authentication","(realm = \"Application\", message = nil)","<p>Render output including the HTTP Digest authentication header\n"],["request_http_token_authentication","ActionController::HttpAuthentication::Token::ControllerMethods","classes/ActionController/HttpAuthentication/Token/ControllerMethods.html#method-i-request_http_token_authentication","(realm = \"Application\")",""],["request_method","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-request_method","()","<p>Returns the HTTP method that the application should see. In the case where\nthe method was overridden …\n"],["request_method=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-request_method-3D","(method)",""],["request_method_symbol","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-request_method_symbol","()","<p>Returns a symbol form of the #request_method\n"],["request_parameters","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-request_parameters","()",""],["request_uri=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-request_uri-3D","(uri)",""],["request_via_redirect","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-request_via_redirect","(http_method, path, parameters = nil, headers = nil)","<p>Performs a request using the specified method, following any subsequent\nredirect. Note that the redirects …\n"],["requests","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-c-requests","()",""],["requests","ActiveResource::HttpMock","classes/ActiveResource/HttpMock.html#method-c-requests","()","<p>Returns an array of all request objects that have been sent to the mock.\nYou can use this to check if …\n"],["require_engine","ActionView::Template::Handlers::Builder","classes/ActionView/Template/Handlers/Builder.html#method-i-require_engine","()",""],["require_fixture_classes","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-require_fixture_classes","(fixture_names = nil)",""],["require_tzinfo","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-require_tzinfo","()",""],["requires_reloading?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-requires_reloading-3F","()","<p>Returns true if its required to reload the connection between requests for\ndevelopment mode. This is …\n"],["requires_reloading?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-requires_reloading-3F","()",""],["rescue_action","ActionController::Compatibility","classes/ActionController/Compatibility.html#method-i-rescue_action","(env)",""],["rescue_action_without_handler","ActionController::TestCase::RaiseActionExceptions","classes/ActionController/TestCase/RaiseActionExceptions.html#method-i-rescue_action_without_handler","(e)",""],["rescue_from","ActionDispatch::Rescue","classes/ActionDispatch/Rescue.html#method-i-rescue_from","(exception, rescuer)",""],["rescue_from","ActiveSupport::Rescuable::ClassMethods","classes/ActiveSupport/Rescuable/ClassMethods.html#method-i-rescue_from","(*klasses, &block)","<p>Rescue exceptions raised in controller actions.\n<p><code>rescue_from</code> receives a series of exception classes or ...\n"],["rescue_responses","ActionDispatch::ShowExceptions","classes/ActionDispatch/ShowExceptions.html#method-c-rescue_responses","()",""],["rescue_template","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-i-rescue_template","()",""],["rescue_templates","ActionDispatch::ShowExceptions","classes/ActionDispatch/ShowExceptions.html#method-c-rescue_templates","()",""],["rescue_with_handler","ActionController::Rescue","classes/ActionController/Rescue.html#method-i-rescue_with_handler","(exception)",""],["rescue_with_handler","ActiveSupport::Rescuable","classes/ActiveSupport/Rescuable.html#method-i-rescue_with_handler","(exception)","<p>Tries to rescue the exception by looking up and calling a registered\nhandler.\n"],["reset","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-reset","()",""],["reset!","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-reset-21","()","<p>Reset the current session. This is useful for testing multiple sessions in\na single test case.\n"],["reset!","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-reset-21","()","<p>Resets the instance. This can be used to reset the state information in an\nexisting session instance, …\n"],["reset!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reset-21","()","<p>Reset the state of this connection, directing the DBMS to clear\ntransactions and other connection-related …\n"],["reset!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-reset-21","()",""],["reset!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-reset-21","()",""],["reset!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-reset-21","()",""],["reset!","ActiveResource::HttpMock","classes/ActiveResource/HttpMock.html#method-c-reset-21","()","<p>Deletes all logged requests and responses.\n"],["reset_cache","ActiveRecord::Fixtures","classes/ActiveRecord/Fixtures.html#method-c-reset_cache","()",""],["reset_callbacks","ActiveSupport::Callbacks::ClassMethods","classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-reset_callbacks","(symbol)","<p>Remove all set callbacks for the given event.\n"],["reset_column_information","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-reset_column_information","()","<p>Resets all the cached information about columns, which will cause them to\nbe reloaded on the next request. …\n"],["reset_counters","ActiveRecord::CounterCache","classes/ActiveRecord/CounterCache.html#method-i-reset_counters","(id, *counters)","<p>Resets one or more counter caches to their correct value using an SQL count\nquery. This is useful when …\n"],["reset_cycle","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-reset_cycle","(name = \"default\")","<p>Resets a cycle so that it starts from the first element the next time it is\ncalled. Pass in <code>name</code> to reset …\n"],["reset_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-reset_locking_column","()","<p>Reset the column used for optimistic locking back to the\n<code>lock_version</code> default.\n"],["reset_runtime","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-c-reset_runtime","()",""],["reset_sequence!","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-reset_sequence-21","(table, column, sequence = nil)","<p>Set the sequence to the max value of the table’s column.\n"],["reset_session","ActionController::RackDelegation","classes/ActionController/RackDelegation.html#method-i-reset_session","()",""],["reset_session","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-reset_session","()","<p>TODO This should be broken apart into AD::Request::Session and probably be\nincluded by the session middleware. …\n"],["resolve","ActionDispatch::RailsEntityStore","classes/ActionDispatch/RailsEntityStore.html#method-c-resolve","(uri)",""],["resolve","ActionDispatch::RailsMetaStore","classes/ActionDispatch/RailsMetaStore.html#method-c-resolve","(uri)",""],["resource","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-resource","(*resources, &block)","<p>Sometimes, you have a resource that clients always look up without\nreferencing an ID. A common example, …\n"],["resource_errors","ActionController::Responder","classes/ActionController/Responder.html#method-i-resource_errors","()",""],["resource_location","ActionController::Responder","classes/ActionController/Responder.html#method-i-resource_location","()","<p>Returns the resource location by retrieving it from the options or\nreturning the resources array.\n"],["resourceful?","ActionController::Responder","classes/ActionController/Responder.html#method-i-resourceful-3F","()","<p>Checks whether the resource responds to the current format or not.\n"],["resources","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-resources","(*resources, &block)","<p>In Rails, a resourceful route provides a mapping between HTTP verbs and\nURLs and controller actions. …\n"],["resources_path_names","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-resources_path_names","(options)",""],["respond","ActionController::Responder","classes/ActionController/Responder.html#method-i-respond","()","<p>Main entry point for responder responsible to dispatch to the proper\nformat.\n"],["respond_to","ActionController::MimeResponds","classes/ActionController/MimeResponds.html#method-i-respond_to","(*mimes, &block)","<p>Without web-service support, an action which collects the data for\ndisplaying a list of people might …\n"],["respond_to","ActionController::MimeResponds::ClassMethods","classes/ActionController/MimeResponds/ClassMethods.html#method-i-respond_to","(*mimes)","<p>Defines mime types that are rendered by default when invoking\n<code>respond_with</code>.\n<p>Examples:\n\n<pre>respond_to :html, ...</pre>\n"],["respond_to","ActiveResource::HttpMock","classes/ActiveResource/HttpMock.html#method-c-respond_to","(*args)","<p>Accepts a block which declares a set of requests and responses for the\nHttpMock to respond to in the …\n"],["respond_to?","ActionDispatch::BodyProxy","classes/ActionDispatch/BodyProxy.html#method-i-respond_to-3F","(*args)",""],["respond_to?","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-respond_to-3F","(method, include_private = false)",""],["respond_to?","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-respond_to-3F","(method)",""],["respond_to?","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-respond_to-3F","(method, include_private_methods = false)",""],["respond_to?","ActiveRecord::Delegation","classes/ActiveRecord/Delegation.html#method-i-respond_to-3F","(method, include_private = false)",""],["respond_to?","ActiveRecord::DynamicMatchers","classes/ActiveRecord/DynamicMatchers.html#method-i-respond_to-3F","(method_id, include_private = false)",""],["respond_to?","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-respond_to-3F","(method, include_priv = false)","<p>A method to determine if an object responds to a message (e.g., a method\ncall). In Active Resource, a …\n"],["respond_to?","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-respond_to-3F","(method, include_private = false)",""],["respond_to?","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-respond_to-3F","(method, include_private=false)","<p>Returns <code>true</code> if <em>obj</em> responds to the given method.\nPrivate methods are included in the search only if …\n"],["respond_to?","ActiveSupport::OrderedOptions","classes/ActiveSupport/OrderedOptions.html#method-i-respond_to-3F","(name)",""],["respond_to?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-respond_to-3F","(sym, include_priv = false)","<p>Ensure proxy class responds to all methods that underlying time instance\nresponds to.\n"],["respond_to?","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-respond_to-3F","(*args)",""],["respond_to?","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-respond_to-3F","(name)",""],["respond_to_without_attributes?","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-respond_to_without_attributes-3F","(method, include_private_methods = false)","<p>A Person object with a name attribute can ask\n<code>person.respond_to?(:name)</code>,\n<code>person.respond_to?(:name=)</code>, …\n"],["respond_to_without_attributes?","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-respond_to_without_attributes-3F","(method, include_priv = false)","<p>For checking <code>respond_to?</code> without searching the attributes\n(which is faster).\n"],["respond_with","ActionController::MimeResponds","classes/ActionController/MimeResponds.html#method-i-respond_with","(*resources, &block)","<p>respond_with wraps a resource around a responder for default\nrepresentation. First it invokes respond_to …\n"],["response_body=","ActionController::Metal","classes/ActionController/Metal.html#method-i-response_body-3D","(val)",""],["response_body=","ActionController::RackDelegation","classes/ActionController/RackDelegation.html#method-i-response_body-3D","(body)",""],["response_code","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-response_code","()","<p>The response code of the request\n"],["response_from_page","ActionDispatch::Assertions::SelectorAssertions","classes/ActionDispatch/Assertions/SelectorAssertions.html#method-i-response_from_page","()","<p><code>assert_select</code> and <code>css_select</code> call this to obtain\nthe content in the HTML page.\n"],["response_overridden?","ActionController::Responder","classes/ActionController/Responder.html#method-i-response_overridden-3F","()",""],["responses","ActiveResource::HttpMock","classes/ActiveResource/HttpMock.html#method-c-responses","()","<p>Returns the list of requests and their mocked responses. Look up a response\nfor a request using <code>responses.assoc</code> …\n"],["retrieve_autoindex","ActionView::Helpers::InstanceTag","classes/ActionView/Helpers/InstanceTag.html#method-i-retrieve_autoindex","(pre_match)",""],["retrieve_connection","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-retrieve_connection","()",""],["retrieve_connection_pool","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-retrieve_connection_pool","(klass)",""],["retrieve_object","ActionView::Helpers::InstanceTag","classes/ActionView/Helpers/InstanceTag.html#method-i-retrieve_object","(object)",""],["reverse","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-reverse","()","<p>Reverses all characters in the string.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'Café'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">reverse</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; 'éfaC'</span>\n</pre>\n"],["reverse_merge","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge","(other_hash)","<p>Performs the opposite of merge, with the keys and values from the first\nhash taking precedence over the …\n"],["reverse_merge","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge","(other_hash)","<p>Performs the opposite of merge, with the keys and values from the first\nhash taking precedence over the …\n"],["reverse_merge","Hash","classes/Hash.html#method-i-reverse_merge","(other_hash)","<p>Merges the caller into <code>other_hash</code>. For example,\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">options</span> = <span class=\"ruby-identifier\">options</span>.<span class=\"ruby-identifier\">reverse_merge</span>(:<span class=\"ruby-identifier\">size</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">25</span>, :<span class=\"ruby-identifier\">velocity</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["reverse_merge!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge-21","(other_hash)",""],["reverse_merge!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge-21","(other_hash)",""],["reverse_merge!","Hash","classes/Hash.html#method-i-reverse_merge-21","(other_hash)","<p>Destructive <code>reverse_merge</code>.\n"],["reverse_order","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-reverse_order","()",""],["reverse_update","Hash","classes/Hash.html#method-i-reverse_update","(other_hash)",""],["revert","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-revert","()",""],["reverting?","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-reverting-3F","()",""],["rfc2822","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-rfc2822","()",""],["rfc3339","Date","classes/Date.html#method-i-rfc3339","()",""],["rfc822","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-rfc822","()",""],["rindex","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-rindex","(needle, offset=nil)","<p>Returns the position <em>needle</em> in the string, counting in codepoints,\nsearching backward from <em>offset</em> or …\n"],["rjust","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-rjust","(integer, padstr=' ')","<p>Works just like <code>String#rjust</code>, only integer specifies\ncharacters instead of bytes.\n<p>Example:\n\n<pre>&quot;¾ cup&quot;.mb_chars.rjust(8).to_s ...</pre>\n"],["rollback_active_record_state!","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-rollback_active_record_state-21","()","<p>Reset id and @new_record if the transaction rolls back.\n"],["rollback_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-rollback_db_transaction","()","<p>Rolls back the transaction (and turns on auto-committing). Must be done if\nthe transaction block raises …\n"],["rollback_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-rollback_db_transaction","()","<p>Aborts a transaction.\n"],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-rollback_to_savepoint","()",""],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-rollback_to_savepoint","()",""],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-rollback_to_savepoint","()",""],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-rollback_to_savepoint","()",""],["rollback_transaction_records","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-rollback_transaction_records","(rollback)","<p>Send a rollback message to all records after they have been rolled back. If\nrollback is false, only rollback …\n"],["root","ActionDispatch::Routing::Mapper::Base","classes/ActionDispatch/Routing/Mapper/Base.html#method-i-root","(options = {})","<p>You can specify what Rails should route “/” to with the root method:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">root</span> :<span class=\"ruby-identifier\">to</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'pages#main'</span>\n</pre>\n"],["root","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-root","(options={})",""],["root","Rails","classes/Rails.html#method-c-root","()",""],["root=","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-root-3D","(value)",""],["round","Float","classes/Float.html#method-i-round","(precision = nil)","<p>Rounds the float with the specified precision.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">x</span> = <span class=\"ruby-value\">1.337</span>\n<span class=\"ruby-identifier\">x</span>.<span class=\"ruby-identifier\">round</span>    <span class=\"ruby-comment\"># =&gt; 1</span>\n<span class=\"ruby-identifier\">x</span>.<span class=\"ruby-identifier\">round</span>(<span class=\"ruby-value\">1</span>) <span class=\"ruby-comment\"># =&gt; 1.3</span>\n<span class=\"ruby-identifier\">x</span>.<span class=\"ruby-identifier\">round</span>(<span class=\"ruby-value\">2</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["route","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-route","(routing_code)","<p>Make an entry in Rails routing file config/routes.rb\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">route</span> <span class=\"ruby-string\">&quot;root :to =&gt; 'welcome'&quot;</span>\n</pre>\n"],["route_key","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-route_key","(record_or_class)","<p>Returns string to use while generating route names. It differs for\nnamespaced models regarding whether …\n"],["route_url","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-route_url","()",""],["routes","Rails::Engine","classes/Rails/Engine.html#method-i-routes","()",""],["routes?","Rails::Engine","classes/Rails/Engine.html#method-i-routes-3F","()",""],["routes_url_helpers","Rails::Engine","classes/Rails/Engine.html#method-i-routes_url_helpers","()",""],["rstrip","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-rstrip","()","<p>Strips entire range of Unicode whitespace from the right of the string.\n"],["ruby_debugger_gemfile_entry","Rails::Generators::AppBase","classes/Rails/Generators/AppBase.html#method-i-ruby_debugger_gemfile_entry","()",""],["run","ActiveSupport::Testing::Isolation::MiniTest","classes/ActiveSupport/Testing/Isolation/MiniTest.html#method-i-run","(runner)",""],["run","ActiveSupport::Testing::Isolation::TestUnit","classes/ActiveSupport/Testing/Isolation/TestUnit.html#method-i-run","(result)",""],["run","ActiveSupport::Testing::Performance::Benchmarker","classes/ActiveSupport/Testing/Performance/Benchmarker.html#method-i-run","()",""],["run","ActiveSupport::Testing::Performance::ForClassicTestUnit","classes/ActiveSupport/Testing/Performance/ForClassicTestUnit.html#method-i-run","(result)",""],["run","ActiveSupport::Testing::Performance::ForMiniTest","classes/ActiveSupport/Testing/Performance/ForMiniTest.html#method-i-run","(runner)",""],["run","ActiveSupport::Testing::Performance::Profiler","classes/ActiveSupport/Testing/Performance/Profiler.html#method-i-run","()",""],["run","ActiveSupport::Testing::SetupAndTeardown::ForClassicTestUnit","classes/ActiveSupport/Testing/SetupAndTeardown/ForClassicTestUnit.html#method-i-run","(result)","<p>This redefinition is unfortunate but test/unit shows us no alternative.\nDoubly unfortunate: hax to support …\n"],["run","ActiveSupport::Testing::SetupAndTeardown::ForMiniTest","classes/ActiveSupport/Testing/SetupAndTeardown/ForMiniTest.html#method-i-run","(runner)",""],["run","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-run","(*args)",""],["run_bundle","Rails::Generators::AppBase","classes/Rails/Generators/AppBase.html#method-i-run_bundle","()",""],["run_callbacks","ActiveSupport::Callbacks","classes/ActiveSupport/Callbacks.html#method-i-run_callbacks","(kind, *args, &block)","<p>Runs the callbacks for the given event.\n<p>Calls the before and around callbacks in the order they were set, …\n"],["run_gc","ActiveSupport::Testing::Performance","classes/ActiveSupport/Testing/Performance.html#method-i-run_gc","()","<p>overridden by each implementation\n"],["run_generator","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-run_generator","(args=self.default_arguments, config={})","<p>Runs the generator configured for this class. The first argument is an\narray like command line arguments: …\n"],["run_in_isolation","ActiveSupport::Testing::Isolation::Forking","classes/ActiveSupport/Testing/Isolation/Forking.html#method-i-run_in_isolation","(&blk)",""],["run_in_isolation","ActiveSupport::Testing::Isolation::Subprocess","classes/ActiveSupport/Testing/Isolation/Subprocess.html#method-i-run_in_isolation","(&blk)","<p>Crazy H4X to get this working in windows / jruby with no forking.\n"],["run_in_transaction?","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-run_in_transaction-3F","()",""],["run_initializers","Rails::Initializable","classes/Rails/Initializable.html#method-i-run_initializers","(group=:default, *args)",""],["run_load_hooks","ActiveSupport","classes/ActiveSupport.html#method-c-run_load_hooks","(name, base = Object)",""],["run_profile","ActiveSupport::Testing::Performance","classes/ActiveSupport/Testing/Performance.html#method-i-run_profile","(metric)",""],["run_test","ActiveSupport::Testing::Performance::ForClassicTestUnit","classes/ActiveSupport/Testing/Performance/ForClassicTestUnit.html#method-i-run_test","(metric, mode)",""],["run_test","ActiveSupport::Testing::Performance::ForMiniTest","classes/ActiveSupport/Testing/Performance/ForMiniTest.html#method-i-run_test","(metric, mode)",""],["run_validations!","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-run_validations-21","()",""],["run_validations!","ActiveModel::Validations::Callbacks","classes/ActiveModel/Validations/Callbacks.html#method-i-run_validations-21","()","<p>Overwrite run validations to include callbacks.\n"],["run_warmup","ActiveSupport::Testing::Performance","classes/ActiveSupport/Testing/Performance.html#method-i-run_warmup","()",""],["runtime","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-c-runtime","()",""],["runtime=","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-c-runtime-3D","(value)",""],["safe_concat","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-safe_concat","(string)",""],["safe_concat","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-safe_concat","(value)",""],["safe_constantize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-safe_constantize","(camel_cased_word)","<p>Tries to find a constant with the name specified in the argument string:\n\n<pre>&quot;Module&quot;.safe_constantize    ...</pre>\n"],["safe_constantize","String","classes/String.html#method-i-safe_constantize","()","<p><code>safe_constantize</code> tries to find a declared constant with the\nname specified in the string. It returns ...\n"],["safe_get","ActiveSupport::Dependencies::ClassCache","classes/ActiveSupport/Dependencies/ClassCache.html#method-i-safe_get","(key)",""],["safe_join","ActionView::Helpers::OutputSafetyHelper","classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-safe_join","(array, sep=$,)","<p>This method returns a html safe string similar to what\n<code>Array#join</code> would return. All items in the array, …\n"],["sample","Array","classes/Array.html#method-i-sample","(n=nil)","<p>Backport of Array#sample based on Marc-Andre Lafortune’s\ngithub.com/marcandre/backports/ Returns a random …\n"],["sanitize","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize","(html, options = {})","<p>This <code>sanitize</code> helper will html encode all tags and strip all\nattributes that aren’t specifically allowed. …\n"],["sanitize","ActiveModel::MassAssignmentSecurity::Sanitizer","classes/ActiveModel/MassAssignmentSecurity/Sanitizer.html#method-i-sanitize","(attributes, authorizer)","<p>Returns all attributes not denied by the authorizer.\n"],["sanitize","HTML::FullSanitizer","classes/HTML/FullSanitizer.html#method-i-sanitize","(text, options = {})",""],["sanitize","HTML::Sanitizer","classes/HTML/Sanitizer.html#method-i-sanitize","(text, options = {})",""],["sanitize_conditions","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_conditions","(condition, table_name = self.table_name)",""],["sanitize_css","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize_css","(style)","<p>Sanitizes a block of CSS code. Used by <code>sanitize</code> when it comes\nacross a style attribute.\n"],["sanitize_css","HTML::WhiteListSanitizer","classes/HTML/WhiteListSanitizer.html#method-i-sanitize_css","(style)","<p>Sanitizes a block of css code. Used by #sanitize when it comes across a\nstyle attribute\n"],["sanitize_dom_id","ActionController::RecordIdentifier","classes/ActionController/RecordIdentifier.html#method-i-sanitize_dom_id","(candidate_id)","<p>Replaces characters that are invalid in HTML DOM ids with valid ones.\n"],["sanitize_for_mass_assignment","ActiveModel::MassAssignmentSecurity","classes/ActiveModel/MassAssignmentSecurity.html#method-i-sanitize_for_mass_assignment","(attributes, role = nil)",""],["sanitize_limit","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-sanitize_limit","(limit)","<p>Sanitizes the given LIMIT parameter in order to prevent SQL injection.\n<p>The <code>limit</code> may be anything that …\n"],["sanitize_sql","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql","(condition, table_name = self.table_name)",""],["sanitize_sql_array","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_array","(ary)","<p>Accepts an array of conditions. The array has each value sanitized and\ninterpolated into the SQL statement. …\n"],["sanitize_sql_for_assignment","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_for_assignment","(assignments)","<p>Accepts an array, hash, or string of SQL conditions and sanitizes them into\na valid SQL fragment for …\n"],["sanitize_sql_for_conditions","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_for_conditions","(condition, table_name = self.table_name)","<p>Accepts an array, hash, or string of SQL conditions and sanitizes them into\na valid SQL fragment for …\n"],["sanitize_sql_hash","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_hash","(attrs, default_table_name = self.table_name)",""],["sanitize_sql_hash_for_assignment","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_hash_for_assignment","(attrs)","<p>Sanitizes a hash of attribute/value pairs into SQL conditions for a SET\nclause.\n\n<pre class=\"ruby\">{ :<span class=\"ruby-identifier\">status</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">nil</span>, :<span class=\"ruby-identifier\">group_id</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["sanitize_sql_hash_for_conditions","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_hash_for_conditions","(attrs, default_table_name = self.table_name)","<p>Sanitizes a hash of attribute/value pairs into SQL conditions for a WHERE\nclause.\n\n<pre class=\"ruby\">{ :<span class=\"ruby-identifier\">name</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;foo'bar&quot;</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["sanitizeable?","HTML::LinkSanitizer","classes/HTML/LinkSanitizer.html#method-i-sanitizeable-3F","(text)",""],["sanitizeable?","HTML::Sanitizer","classes/HTML/Sanitizer.html#method-i-sanitizeable-3F","(text)",""],["save","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-save","(*)","<p>Saves the model.\n<p>If the model is new a record gets created in the database, otherwise the\nexisting record …\n"],["save","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-i-save","()",""],["save","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-save","(options={})","<p>The validation process on save can be skipped by passing <code>:validate\n=&gt; false</code>. The regular Base#save …\n"],["save","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-save","()","<p>Saves (<code>POST</code>) or updates (<code>PUT</code>) a resource. \nDelegates to <code>create</code> if the object is new, <code>update</code>\nif it exists. …\n"],["save","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-save","()","<p>POST create\n"],["save!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-save-21","(*)","<p>Saves the model.\n<p>If the model is new a record gets created in the database, otherwise the\nexisting record …\n"],["save!","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-save-21","(options={})","<p>Attempts to save the record just like Base#save but will raise a\n<code>RecordInvalid</code> exception instead of returning …\n"],["save!","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-save-21","()","<p>Saves the resource.\n<p>If the resource is new, it is created via <code>POST</code>, otherwise the\nexisting resource is …\n"],["save_method","ActiveRecord::DynamicFinderMatch","classes/ActiveRecord/DynamicFinderMatch.html#method-i-save_method","()",""],["save_record?","ActiveRecord::DynamicFinderMatch","classes/ActiveRecord/DynamicFinderMatch.html#method-i-save_record-3F","()",""],["save_with_validation","ActiveResource::Validations","classes/ActiveResource/Validations.html#method-i-save_with_validation","(options={})","<p>Validate a resource and save (POST) it to the remote web service. If any\nlocal validations fail - the …\n"],["say","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-say","(message, subitem=false)",""],["say_with_time","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-say_with_time","(message)",""],["schema","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-schema","(&block)","<p>Creates a schema for this resource - setting the attributes that are known\nprior to fetching an instance …\n"],["schema","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-schema","()","<p>If no schema has been defined for the class (see\n<code>ActiveResource::schema=</code>), the default automatic schema …\n"],["schema=","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-schema-3D","(the_schema)","<p>Alternative, direct way to specify a <code>schema</code> for this Resource.\n<code>schema</code> is more flexible, but this is quick …\n"],["schema_exists?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-schema_exists-3F","(name)","<p>Returns true if schema exists.\n"],["schema_format","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-schema_format","","<p>Specifies the format to use when dumping the database schema with Rails’\nRakefile. If :sql, the schema …\n"],["schema_search_path","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-schema_search_path","()","<p>Returns the active schema search path.\n"],["schema_search_path=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-schema_search_path-3D","(schema_csv)","<p>Sets the schema search path to a string of comma-separated schema names.\nNames beginning with $ have …\n"],["scope","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-scope","(*args)","<p>Scopes a set of routes to the given default options.\n<p>Take the following route definition as an example: …\n"],["scope","ActiveRecord::Scoping::Named::ClassMethods","classes/ActiveRecord/Scoping/Named/ClassMethods.html#method-i-scope","(name, scope_options = {})","<p>Adds a class method for retrieving and querying objects. A scope represents\na narrowing of a database …\n"],["scope_for_create","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-scope_for_create","()",""],["scoped","ActiveRecord::Scoping::Named::ClassMethods","classes/ActiveRecord/Scoping/Named/ClassMethods.html#method-i-scoped","(options = nil)","<p>Returns an anonymous scope.\n\n<pre>posts = Post.scoped\nposts.size # Fires &quot;select count(*) from  posts&quot; and returns ...</pre>\n"],["scoping","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-scoping","()","<p>Scope all queries to the current scope.\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Comment</span>.<span class=\"ruby-identifier\">where</span>(:<span class=\"ruby-identifier\">post_id</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">scoping</span> <span class=\"ruby-keyword\">do</span>\n  <span class=\"ruby-constant\">Comment</span>.<span class=\"ruby-identifier\">first</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["script","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-script","()",""],["script","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-script","(force = false)",""],["search_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-search_field","(object_name, method, options = {})","<p>Returns an input of type “search” for accessing a specified attribute\n(identified by <code>method</code> …\n"],["search_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-search_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “search”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["second","Array","classes/Array.html#method-i-second","()","<p>Equal to <code>self[1]</code>.\n"],["second","Numeric","classes/Numeric.html#method-i-second","()",""],["seconds","Numeric","classes/Numeric.html#method-i-seconds","()","<p>Enables the use of time calculations and declarations, like 45.minutes +\n2.hours + 4.years.\n<p>These methods …\n"],["seconds_since_midnight","DateTime","classes/DateTime.html#method-i-seconds_since_midnight","()","<p>Seconds since midnight: DateTime.now.seconds_since_midnight\n"],["seconds_since_midnight","Time","classes/Time.html#method-i-seconds_since_midnight","()","<p>Seconds since midnight: Time.now.seconds_since_midnight\n"],["seconds_to_utc_offset","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-seconds_to_utc_offset","(seconds, colon = true)","<p>Assumes self represents an offset from UTC in seconds (as returned from\nTime#utc_offset) and turns this …\n"],["secret_token","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-secret_token","(request)",""],["select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-select","(method, choices, options = {}, html_options = {})",""],["select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-select","(object, method, choices, options = {}, html_options = {})","<p>Create a select tag and a series of contained option tags for the provided\nobject and method. The option …\n"],["select","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select","(sql, name = nil, binds = [])","<p>Returns an array of record hashes with the column names as keys and column\nvalues as values.\n"],["select","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-select","(sql, name = nil, binds = [])","<p>Returns an array of record hashes with the column names as keys and column\nvalues as values.\n"],["select","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-select","(value = Proc.new)","<p>Works in two unique ways.\n<p>First: takes a block so it can be used just like Array#select.\n\n<pre>Model.scoped.select ...</pre>\n"],["select","HTML::Selector","classes/HTML/Selector.html#method-i-select","(root)","<p>Selects and returns an array with all matching elements, beginning with one\nnode and traversing through …\n"],["select","HTML::Tag","classes/HTML/Tag.html#method-i-select","(selector, *values)",""],["select_all","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_all","(arel, name = nil, binds = [])","<p>Returns an array of record hashes with the column names as keys and column\nvalues as values.\n"],["select_all","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-select_all","(arel, name = nil, binds = [])",""],["select_date","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_date","(date = Date.current, options = {}, html_options = {})","<p>Returns a set of html select-tags (one for year, month, and day)\npre-selected with the <code>date</code>. It’s possible …\n"],["select_datetime","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_datetime","(datetime = Time.current, options = {}, html_options = {})","<p>Returns a set of html select-tags (one for year, month, day, hour, minute,\nand second) pre-selected with …\n"],["select_day","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_day","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the days 1 through 31 with\nthe current day selected. The …\n"],["select_first","HTML::Selector","classes/HTML/Selector.html#method-i-select_first","(root)","<p>Similar to #select but returns the first matching element. Returns\n<code>nil</code> if no element matches the selector. …\n"],["select_hour","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_hour","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the hours 0 through 23 with\nthe current hour selected. …\n"],["select_minute","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_minute","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the minutes 0 through 59 with\nthe current minute selected. …\n"],["select_month","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_month","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the months January through\nDecember with the current month …\n"],["select_one","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_one","(arel, name = nil)","<p>Returns a record hash with the column names as keys and column values as\nvalues.\n"],["select_rows","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_rows","(sql, name = nil)","<p>Returns an array of arrays containing the field values. Order is the same\nas that returned by <code>columns</code> …\n"],["select_rows","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-select_rows","(sql, name = nil)","<p>Returns an array of arrays containing the field values. Order is the same\nas that returned by <code>columns</code> …\n"],["select_rows","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-select_rows","(sql, name = nil)","<p>DATABASE STATEMENTS ======================================\n"],["select_rows","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-select_rows","(sql, name = nil)","<p>Executes a SELECT query and returns an array of rows. Each row is an array\nof field values.\n"],["select_rows","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-select_rows","(sql, name = nil)",""],["select_second","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_second","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the seconds 0 through 59 with\nthe current second selected. …\n"],["select_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-select_tag","(name, option_tags = nil, options = {})","<p>Creates a dropdown selection box, or if the <code>:multiple</code> option\nis set to true, a multiple choice selection …\n"],["select_time","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_time","(datetime = Time.current, options = {}, html_options = {})","<p>Returns a set of html select-tags (one for hour and minute). You can set\n<code>:time_separator</code> key to format …\n"],["select_value","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_value","(arel, name = nil)","<p>Returns a single value from a record\n"],["select_values","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_values","(arel, name = nil)","<p>Returns an array of the values of the first column in a select:\n\n<pre>select_values(&quot;SELECT id FROM companies ...</pre>\n"],["select_year","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_year","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the five years on each side\nof the current, which is selected. …\n"],["selector","HTML","classes/HTML.html#method-c-selector","(statement, *values)","<p>See HTML::Selector.new\n"],["send_action","ActionController::ImplicitRender","classes/ActionController/ImplicitRender.html#method-i-send_action","(method, *args)",""],["send_data","ActionController::DataStreaming","classes/ActionController/DataStreaming.html#method-i-send_data","(data, options = {})","<p>Sends the given binary data to the browser. This method is similar to\n<code>render :text =&gt; data</code>, but also …\n"],["send_data","ActionController::Instrumentation","classes/ActionController/Instrumentation.html#method-i-send_data","(data, options = {})",""],["send_data","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-send_data","(event)",""],["send_file","ActionController::DataStreaming","classes/ActionController/DataStreaming.html#method-i-send_file","(path, options = {})","<p>Sends the file. This uses a server-appropriate method (such as X-Sendfile)\nvia the Rack::Sendfile middleware. …\n"],["send_file","ActionController::Instrumentation","classes/ActionController/Instrumentation.html#method-i-send_file","(path, options={})",""],["send_file","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-send_file","(event)",""],["sequence_name","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-sequence_name","()",""],["sequence_name=","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-sequence_name-3D","(value)","<p>Sets the name of the sequence to use when generating ids to the given\nvalue, or (if the value is nil …\n"],["serial_sequence","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-serial_sequence","(table, column)",""],["serializable_hash","ActiveModel::Serialization","classes/ActiveModel/Serialization.html#method-i-serializable_hash","(options = nil)",""],["serializable_hash","ActiveRecord::Serialization","classes/ActiveRecord/Serialization.html#method-i-serializable_hash","(options = nil)",""],["serialize","ActiveRecord::AttributeMethods::Serialization::Attribute","classes/ActiveRecord/AttributeMethods/Serialization/Attribute.html#method-i-serialize","()",""],["serialize","ActiveRecord::AttributeMethods::Serialization::ClassMethods","classes/ActiveRecord/AttributeMethods/Serialization/ClassMethods.html#method-i-serialize","(attr_name, class_name = Object)","<p>If you have an attribute that needs to be saved to the database as an\nobject, and retrieved as the same …\n"],["serialized_value","ActiveRecord::AttributeMethods::Serialization::Attribute","classes/ActiveRecord/AttributeMethods/Serialization/Attribute.html#method-i-serialized_value","()",""],["server_port","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-server_port","()",""],["server_software","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-server_software","()","<p>Returns the lowercase name of the HTTP server software.\n"],["session","ActionDispatch::TestProcess","classes/ActionDispatch/TestProcess.html#method-i-session","()",""],["session_auth=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-session_auth-3D","(user)","<p>Set the authorized user for this session\n"],["session_id_column","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-session_id_column","","<p>The session id field defaults to ‘session_id’.\n"],["session_options=","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-session_options-3D","(options)",""],["session_store","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-session_store","(*args)",""],["set","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-set","(key, value)","<p>Set messages for <code>key</code> to <code>value</code>\n"],["set_callback","ActiveSupport::Callbacks::ClassMethods","classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-set_callback","(name, *filter_list, &block)","<p>Install a callback for the given event.\n\n<pre>set_callback :save, :before, :before_meth\nset_callback :save, ...</pre>\n"],["set_content_type","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-set_content_type","(m, user_content_type, class_default)",""],["set_cookie","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-set_cookie","(key, value)",""],["set_default_accessors!","Rails::Generators::AppBase","classes/Rails/Generators/AppBase.html#method-i-set_default_accessors-21","()",""],["set_enablement","ActiveModel::ObserverArray","classes/ActiveModel/ObserverArray.html#method-i-set_enablement","(enabled, observers)",""],["set_environment","Rails::Server","classes/Rails/Server.html#method-i-set_environment","()",""],["set_fixture_class","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-set_fixture_class","(class_names = {})",""],["set_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-set_locking_column","(value = nil, &block)","<p>Set the column to use for optimistic locking. Defaults to\n<code>lock_version</code>.\n"],["set_logger","ActiveSupport::LogSubscriber::TestHelper","classes/ActiveSupport/LogSubscriber/TestHelper.html#method-i-set_logger","(logger)","<p>Overwrite if you use another logger in your log subscriber:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">logger</span>\n  <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>.<span class=\"ruby-identifier\">logger</span> = <span class=\"ruby-ivar\">@logger</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_prefix","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-set_prefix","(value = '/')",""],["set_session","ActionDispatch::Session::CacheStore","classes/ActionDispatch/Session/CacheStore.html#method-i-set_session","(env, sid, session, options)","<p>Set a session in the cache.\n"],["set_standard_conforming_strings","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-set_standard_conforming_strings","()","<p>Enable standard-conforming strings if available.\n"],["setup","ActiveModel::Validations::AcceptanceValidator","classes/ActiveModel/Validations/AcceptanceValidator.html#method-i-setup","(klass)",""],["setup","ActiveModel::Validations::ConfirmationValidator","classes/ActiveModel/Validations/ConfirmationValidator.html#method-i-setup","(klass)",""],["setup","ActiveRecord::Validations::UniquenessValidator","classes/ActiveRecord/Validations/UniquenessValidator.html#method-i-setup","(klass)","<p>Unfortunately, we have to tie Uniqueness validators to a class.\n"],["setup","ActiveSupport::LogSubscriber::TestHelper","classes/ActiveSupport/LogSubscriber/TestHelper.html#method-i-setup","()",""],["setup","ActiveSupport::Testing::SetupAndTeardown::ClassMethods","classes/ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html#method-i-setup","(*args, &block)",""],["setup_controller_request_and_response","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-setup_controller_request_and_response","()",""],["setup_fixture_accessors","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-setup_fixture_accessors","(fixture_names = nil)",""],["setup_fixtures","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-setup_fixtures","()",""],["setup_subscriptions","ActionController::TemplateAssertions","classes/ActionController/TemplateAssertions.html#method-i-setup_subscriptions","()",""],["setup_with_controller","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-setup_with_controller","()",""],["shallow","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-shallow","()",""],["shallow?","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-shallow-3F","()",""],["shift","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-shift","()",""],["show_detailed_exceptions?","ActionController::Rescue","classes/ActionController/Rescue.html#method-i-show_detailed_exceptions-3F","()","<p>Override this method if you want to customize when detailed exceptions must\nbe shown. This method is …\n"],["show_variable","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-show_variable","(name)","<p>SHOW VARIABLES LIKE ‘name’\n"],["silence","ActiveSupport::Benchmarkable","classes/ActiveSupport/Benchmarkable.html#method-i-silence","()","<p>Silence the logger during the execution of the block.\n"],["silence","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-silence","(temporary_level = ERROR)","<p>Silences the logger for the duration of the block.\n"],["silence","ActiveSupport::Deprecation","classes/ActiveSupport/Deprecation.html#method-c-silence","()","<p>Silence deprecation warnings within the block.\n"],["silence","ActiveSupport::TaggedLogging","classes/ActiveSupport/TaggedLogging.html#method-i-silence","(temporary_level = Logger::ERROR, &block)",""],["silence","Kernel","classes/Kernel.html#method-i-silence","(stream)",""],["silence!","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-silence-21","()","<p>Silence the logger.\n"],["silence_auto_explain","ActiveRecord::Explain","classes/ActiveRecord/Explain.html#method-i-silence_auto_explain","()","<p>Silences automatic EXPLAIN logging for the duration of the block.\n<p>This has high priority, no EXPLAINs …\n"],["silence_stream","Kernel","classes/Kernel.html#method-i-silence_stream","(stream)","<p>Silences any stream for the duration of the block.\n\n<pre>silence_stream(STDOUT) do\n  puts 'This will never be ...</pre>\n"],["silence_warnings","Kernel","classes/Kernel.html#method-i-silence_warnings","()","<p>Sets $VERBOSE to nil for the duration of the block and back to its original\nvalue afterwards.\n\n<pre>silence_warnings ...</pre>\n"],["silencer","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-c-silencer","","<p>Set to false to disable the silencer\n"],["simple_format","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-simple_format","(text, html_options={}, options={})","<p>Returns <code>text</code> transformed into HTML using simple formatting\nrules. Two or more consecutive newlines(<code>\\n\\n</code> …\n"],["simple_selector","HTML::Selector","classes/HTML/Selector.html#method-i-simple_selector","(statement, values, can_negate = true)","<p>Creates a simple selector given the statement and array of substitution\nvalues.\n<p>Returns a hash with the …\n"],["since","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-since","(time = ::Time.current)","<p>Calculates a new Time or Date that is as far in the future as this Duration\nrepresents.\n"],["since","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-since","(other)",""],["since","Date","classes/Date.html#method-i-since","(seconds)","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],["since","DateTime","classes/DateTime.html#method-i-since","(seconds)","<p>Returns a new DateTime representing the time a number of seconds since the\ninstance time Do not use this …\n"],["since","Numeric","classes/Numeric.html#method-i-since","(time = ::Time.current)","<p>Reads best with argument:  10.minutes.since(time)\n"],["since","Time","classes/Time.html#method-i-since","(seconds)","<p>Returns a new Time representing the time a number of seconds since the\ninstance time\n"],["singleton_class","Kernel","classes/Kernel.html#method-i-singleton_class","()","<p>Returns the object’s singleton class.\n"],["singular","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-singular","(record_or_class)","<p>Returns the singular class name of a record or class. Examples:\n\n<pre>ActiveModel::Naming.singular(post)    ...</pre>\n"],["singular","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-singular","(rule, replacement)","<p>Specifies a new singularization rule and its replacement. The rule can\neither be a string or a regular …\n"],["singular_route_key","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-singular_route_key","(record_or_class)","<p>Returns string to use while generating route names. It differs for\nnamespaced models regarding whether …\n"],["singular_table_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-singular_table_name","()",""],["singularize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-singularize","(word)","<p>The reverse of <code>pluralize</code>, returns the singular form of a word\nin a string.\n<p>Examples:\n\n<pre>&quot;posts&quot;.singularize ...</pre>\n"],["singularize","String","classes/String.html#method-i-singularize","()","<p>The reverse of <code>pluralize</code>, returns the singular form of a word\nin a string.\n\n<pre>&quot;posts&quot;.singularize        ...</pre>\n"],["site","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-site","()","<p>Gets the URI of the REST resources to map for this class.  The site\nvariable is required for Active Resource’s …\n"],["site=","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-site-3D","(site)","<p>Sets the URI of the REST resources to map for this class to the value in\nthe <code>site</code> argument. The site …\n"],["site=","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-i-site-3D","(site)","<p>Set URI for remote service.\n"],["size","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-size","()",""],["size","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-size","()","<p>Returns the number of error messages.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">add</span>(:<span class=\"ruby-identifier\">name</span>, <span class=\"ruby-string\">&quot;can't be blank&quot;</span>)\n<span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">size</span> <span class=\"ruby-comment\"># =&gt; 1</span>\n<span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">add</span>(:<span class=\"ruby-identifier\">name</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["size","ActiveRecord::Fixtures","classes/ActiveRecord/Fixtures.html#method-i-size","()",""],["size","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-size","()","<p>Returns size of the records.\n"],["size","ActiveSupport::Cache::Entry","classes/ActiveSupport/Cache/Entry.html#method-i-size","()","<p>Returns the size of the cached value. This could be less than value.size if\nthe data is compressed.\n"],["size","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-size","()","<p>Returns the number of codepoints in the string\n"],["skip_after_filter","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-skip_after_filter","","<p>Skip an after filter. See _insert_callbacks for parameter details.\n"],["skip_around_filter","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-skip_around_filter","","<p>Skip an around filter. See _insert_callbacks for parameter details.\n"],["skip_before_filter","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-skip_before_filter","","<p>Skip a before filter. See _insert_callbacks for parameter details.\n"],["skip_callback","ActiveSupport::Callbacks::ClassMethods","classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-skip_callback","(name, *filter_list, &block)","<p>Skip a previously set callback. Like <code>set_callback</code>,\n<code>:if</code> or <code>:unless</code> options may be passed in order to\ncontrol …\n"],["skip_filter","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-skip_filter","(*names, &blk)","<p>Skip before, after, and around filters matching any of the names\n<p>Parameters\n<p><code>names</code> - A list of valid names ...\n"],["slice","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-slice","(*args)","<p>Implements Unicode-aware slice with codepoints. Slicing on one point\nreturns the codepoints for that …\n"],["slice","Hash","classes/Hash.html#method-i-slice","(*keys)","<p>Slice a hash to include only the given keys. This is useful for limiting an\noptions hash to valid keys …\n"],["slice!","Hash","classes/Hash.html#method-i-slice-21","(*keys)","<p>Replaces the hash with only the given keys. Returns a hash contained the\nremoved key/value pairs\n\n<pre class=\"ruby\">{:<span class=\"ruby-identifier\">a</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["source_root","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-source_root","(path=nil)","<p>Returns the source root for this generator using default_source_root as\ndefault.\n"],["split","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-split","(*args)","<p>Works just like <code>String#split</code>, with the exception that the\nitems in the resulting list are Chars instances …\n"],["split","Array","classes/Array.html#method-i-split","(value = nil)","<p>Divides the array into one or more subarrays based on a delimiting\n<code>value</code> or the result of an optional …\n"],["split_args","Rails::Commands::Plugin","classes/Rails/Commands/Plugin.html#method-i-split_args","(args)",""],["sql","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-i-sql","(event)",""],["sql_for_insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-sql_for_insert","(sql, pk, id_value, sequence_name, binds)",""],["sql_for_insert","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-sql_for_insert","(sql, pk, id_value, sequence_name, binds)",""],["sql_query_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-sql_query_length","()","<p>Returns the maximum length of an SQL query.\n"],["sqlite_version","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-sqlite_version","()",""],["squish","String","classes/String.html#method-i-squish","()","<p>Returns the string, first removing all whitespace on both ends of the\nstring, and then changing remaining …\n"],["squish!","String","classes/String.html#method-i-squish-21","()","<p>Performs a destructive squish. See String#squish.\n"],["ssl_options","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-ssl_options","()","<p>Returns the SSL options hash.\n"],["ssl_options=","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-ssl_options-3D","(opts={})","<p>Options that will get applied to an SSL connection.\n<p><code>:key</code> - An OpenSSL::PKey::RSA or OpenSSL::PKey::DSA ...\n"],["ssl_options=","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-i-ssl_options-3D","(opts={})","<p>Hash of options applied to Net::HTTP instance when <code>site</code>\nprotocol is ‘https’.\n"],["stale?","ActionController::ConditionalGet","classes/ActionController/ConditionalGet.html#method-i-stale-3F","(record_or_options, additional_options = {})","<p>Sets the etag and/or last_modified on the response and checks it against\nthe client request. If the request …\n"],["stale_session_check!","ActionDispatch::Session::StaleSessionCheck","classes/ActionDispatch/Session/StaleSessionCheck.html#method-i-stale_session_check-21","()",""],["standard_port","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-standard_port","()","<p>Returns the standard port number for this request’s protocol.\n"],["standard_port?","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-standard_port-3F","()","<p>Returns whether this request is using the standard port\n"],["start","Rails::Console","classes/Rails/Console.html#method-i-start","()",""],["start","Rails::Console","classes/Rails/Console.html#method-c-start","(app)",""],["start","Rails::DBConsole","classes/Rails/DBConsole.html#method-c-start","(app)",""],["start","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-start","()",""],["start","Rails::Server","classes/Rails/Server.html#method-i-start","()",""],["start_document","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-start_document","()",""],["start_element","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-start_element","(name, attrs = [])",""],["start_processing","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-start_processing","(event)",""],["start_transaction","ActiveModel::ObserverArray","classes/ActiveModel/ObserverArray.html#method-i-start_transaction","()",""],["started_request_message","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-i-started_request_message","(request)","<p>Started GET “/session/new” for 127.0.0.1 at 2012-09-26 14:51:42 -0700\n"],["stats","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-i-stats","()","<p>Get the statistics from the memcached servers.\n"],["status","ActionController::Metal","classes/ActionController/Metal.html#method-i-status","()",""],["status=","ActionController::Metal","classes/ActionController/Metal.html#method-i-status-3D","(status)",""],["status=","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-status-3D","(status)",""],["status_code","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-i-status_code","()",""],["status_code_for_exception","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-c-status_code_for_exception","(class_name)",""],["status_message","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-status_message","()",""],["step_with_blockless","Range","classes/Range.html#method-i-step_with_blockless","(*args, &block)","<p>Return an array when step is called without a block.\n"],["sti_name","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-sti_name","()",""],["store","ActiveRecord::Store::ClassMethods","classes/ActiveRecord/Store/ClassMethods.html#method-i-store","(store_attribute, options = {})",""],["store","ActiveSupport::Dependencies::ClassCache","classes/ActiveSupport/Dependencies/ClassCache.html#method-i-store","(klass)",""],["store","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-store","(key, value)",""],["store","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-store","(key, value)",""],["store_accessor","ActiveRecord::Store::ClassMethods","classes/ActiveRecord/Store/ClassMethods.html#method-i-store_accessor","(store_attribute, *keys)",""],["store_application_definition!","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-store_application_definition-21","()",""],["strftime","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-strftime","(format)","<p>Replaces <code>%Z</code> and <code>%z</code> directives with\n<code>zone</code> and <code>formatted_offset</code>, respectively, before\npassing to Time#strftime …\n"],["strict_encode64","Base64","classes/Base64.html#method-c-strict_encode64","(value)","<p>Included in Ruby 1.9\n"],["stringify_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys","()",""],["stringify_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys","()",""],["stringify_keys","Hash","classes/Hash.html#method-i-stringify_keys","()","<p>Return a new hash with all keys converted to strings.\n\n<pre class=\"ruby\">{ :<span class=\"ruby-identifier\">name</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'Rob'</span>, :<span class=\"ruby-identifier\">years</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'28'</span> }.<span class=\"ruby-identifier\">stringify_keys</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["stringify_keys!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys-21","()",""],["stringify_keys!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys-21","()",""],["stringify_keys!","Hash","classes/Hash.html#method-i-stringify_keys-21","()","<p>Destructively convert all keys to strings. Same as\n<code>stringify_keys</code>, but modifies <code>self</code>.\n"],["strip","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-strip","()","<p>Strips entire range of Unicode whitespace from the right and left of the\nstring.\n"],["strip_heredoc","String","classes/String.html#method-i-strip_heredoc","()","<p>Strips indentation in heredocs.\n<p>For example in\n\n<pre>if options[:usage]\n  puts &lt;&lt;-USAGE.strip_heredoc\n    This ...</pre>\n"],["strip_links","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-strip_links","(html)","<p>Strips all link tags from <code>text</code> leaving just the link text.\n<p>Examples\n\n<pre>strip_links('&lt;a href=&quot;http://www.rubyonrails.org&quot;&gt;Ruby ...</pre>\n"],["strip_tags","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-strip_tags","(html)","<p>Strips all HTML tags from the <code>html</code>, including comments. This\nuses the html-scanner tokenizer and so its …\n"],["structure_dump","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-structure_dump","()","<p>Returns a string of <code>CREATE TABLE</code> SQL statement(s) for\nrecreating the entire structure of the database. …\n"],["stylesheet_link_tag","ActionView::Helpers::AssetTagHelper::StylesheetTagHelpers","classes/ActionView/Helpers/AssetTagHelper/StylesheetTagHelpers.html#method-i-stylesheet_link_tag","(*sources)","<p>Returns a stylesheet link tag for the sources specified as arguments. If\nyou don’t specify an extension, …\n"],["stylesheet_path","ActionView::Helpers::AssetTagHelper::StylesheetTagHelpers","classes/ActionView/Helpers/AssetTagHelper/StylesheetTagHelpers.html#method-i-stylesheet_path","(source)","<p>Computes the path to a stylesheet asset in the public stylesheets\ndirectory. If the <code>source</code> filename has …\n"],["stylesheets","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-stylesheets","()",""],["subclasses","Rails::Generators","classes/Rails/Generators.html#method-c-subclasses","()","<p>Track all generators subclasses.\n"],["subclasses","Rails::Railtie","classes/Rails/Railtie.html#method-c-subclasses","()",""],["subdomain","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-subdomain","(tld_length = @@tld_length)","<p>Returns all the subdomains as a string, so <code>&quot;dev.www&quot;</code>\nwould be returned for “dev.www.rubyonrails.org …\n"],["subdomains","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-subdomains","(tld_length = @@tld_length)","<p>Returns all the subdomains as an array, so <code>[&quot;dev&quot;,\n&quot;www&quot;]</code> would be returned for “ …\n"],["submit","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-submit","(value=nil, options={})","<p>Add the submit button for the given form. When no value is given, it checks\nif the object is a new resource …\n"],["submit_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-submit_tag","(value = \"Save changes\", options = {})","<p>Creates a submit button with the text <code>value</code> as the caption.\n<p>Options\n<p><code>:confirm =&gt; 'question?'</code> - If present ...\n"],["subscribe","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-c-subscribe","(*args, &block)",""],["subscribe","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-subscribe","(pattern = nil, block = Proc.new)",""],["subscribed","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-c-subscribed","(callback, *args, &block)",""],["substitute_at","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-substitute_at","(column, index)","<p>Returns a bind substitution value given a <code>column</code> and list of\ncurrent <code>binds</code>\n"],["substitute_at","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-substitute_at","(column, index)",""],["success?","ActiveResource::Response","classes/ActiveResource/Response.html#method-i-success-3F","()","<p>Returns true if code is 2xx, false otherwise.\n"],["sum","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-sum","(*args)","<p>Calculates the sum of values on a given column. The value is returned with\nthe same data type of the …\n"],["sum","Enumerable","classes/Enumerable.html#method-i-sum","(identity = 0, &block)","<p>Calculates a sum from the elements. Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">payments</span>.<span class=\"ruby-identifier\">sum</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">p</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">price</span> * <span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">tax_rate</span> }\n<span class=\"ruby-identifier\">payments</span>.<span class=\"ruby-identifier\">sum</span>(&amp;:<span class=\"ruby-identifier\">price</span>)\n</pre>\n"],["sunday","Date","classes/Date.html#method-i-sunday","()","<p>Returns a new <code>Date</code>/<code>DateTime</code> representing the end\nof this week. Week is assumed to start on a Monday. …\n"],["sunday","Time","classes/Time.html#method-i-sunday","()","<p>Returns a new <code>Date</code>/<code>DateTime</code> representing the end\nof this week. Week is assumed to start on a Monday. …\n"],["superclass_delegating_accessor","Class","classes/Class.html#method-i-superclass_delegating_accessor","(name, options = {})",""],["supports_add_column?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-supports_add_column-3F","()","<p>Returns true if SQLite version is ‘3.1.6’ or greater, false otherwise.\n"],["supports_bulk_alter?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_bulk_alter-3F","()",""],["supports_count_distinct?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_count_distinct-3F","()","<p>Does this adapter support using DISTINCT within COUNT? This is\n<code>true</code> for all adapters except sqlite.\n"],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_ddl_transactions-3F","()","<p>Does this adapter support DDL rollbacks in transactions? That is, would\nCREATE TABLE or ALTER TABLE get …\n"],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_ddl_transactions-3F","()",""],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-supports_ddl_transactions-3F","()","<p>Returns true if SQLite version is ‘2.0.0’ or greater, false otherwise.\n"],["supports_explain?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_explain-3F","()","<p>Does this adapter support explain? As of this writing sqlite3, mysql2, and\npostgresql are the only ones …\n"],["supports_explain?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-supports_explain-3F","()",""],["supports_explain?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_explain-3F","()","<p>Returns true.\n"],["supports_explain?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-supports_explain-3F","()","<p>Returns true.\n"],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_index_sort_order-3F","()","<p>Does this adapter support index sort order?\n"],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_index_sort_order-3F","()","<p>Technically MySQL allows to create indexes with the sort order syntax but\nat the moment (5.5) it doesn’t …\n"],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_index_sort_order-3F","()",""],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-supports_index_sort_order-3F","()",""],["supports_insert_with_returning?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_insert_with_returning-3F","()",""],["supports_migrations?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_migrations-3F","()","<p>Does this adapter support migrations? Backend specific, as the abstract\nadapter always returns <code>false</code> …\n"],["supports_migrations?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_migrations-3F","()","<p>Returns true, since this connection adapter supports migrations.\n"],["supports_migrations?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_migrations-3F","()","<p>Returns true, since this connection adapter supports migrations.\n"],["supports_primary_key?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_primary_key-3F","()","<p>Can this adapter determine the primary key for tables not attached to an\nActive Record class, such as …\n"],["supports_primary_key?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_primary_key-3F","()",""],["supports_savepoints?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_savepoints-3F","()","<p>Does this adapter support savepoints? PostgreSQL and MySQL do, SQLite &lt;\n3.6.8 does not.\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_savepoints-3F","()","<p>Returns true, since this connection adapter supports savepoints.\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_savepoints-3F","()","<p>Returns true, since this connection adapter supports savepoints.\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-supports_savepoints-3F","()","<p>Returns true if SQLite version is ‘3.6.8’ or greater, false otherwise.\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-supports_statement_cache-3F","()","<p>Returns <code>true</code> when the connection adapter supports prepared\nstatement caching, otherwise returns <code>false</code> …\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-supports_statement_cache-3F","()","<p>Returns true, since this connection adapter supports prepared statement\ncaching.\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_statement_cache-3F","()","<p>Returns <code>true</code>, since this connection adapter supports prepared\nstatement caching.\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-supports_statement_cache-3F","()","<p>Returns true, since this connection adapter supports prepared statement\ncaching.\n"],["supports_streaming?","ActionView::Template","classes/ActionView/Template.html#method-i-supports_streaming-3F","()","<p>Returns if the underlying handler supports streaming. If so, a streaming\nbuffer <strong>may</strong> be passed when it …\n"],["supports_streaming?","ActionView::Template::Handlers::ERB","classes/ActionView/Template/Handlers/ERB.html#method-i-supports_streaming-3F","()",""],["suppress","Kernel","classes/Kernel.html#method-i-suppress","(*exception_classes)","<p>Blocks and ignores any exception passed as argument if raised within the\nblock.\n\n<pre>suppress(ZeroDivisionError) ...</pre>\n"],["suppress_messages","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-suppress_messages","()",""],["svn_url?","Plugin","classes/Plugin.html#method-i-svn_url-3F","()",""],["swap","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-swap","(target, *args, &block)",""],["symbolize_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-symbolize_keys","()",""],["symbolize_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-symbolize_keys","()",""],["symbolize_keys","Hash","classes/Hash.html#method-i-symbolize_keys","()","<p>Return a new hash with all keys converted to symbols, as long as they\nrespond to <code>to_sym</code>.\n\n<pre class=\"ruby\">{ <span class=\"ruby-string\">'name'</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'Rob'</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["symbolize_keys!","Hash","classes/Hash.html#method-i-symbolize_keys-21","()","<p>Destructively convert all keys to symbols, as long as they respond to\n<code>to_sym</code>. Same as <code>symbolize_keys</code> …\n"],["symbolized_base_class","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-symbolized_base_class","()",""],["symbolized_path_parameters","ActionDispatch::Http::Parameters","classes/ActionDispatch/Http/Parameters.html#method-i-symbolized_path_parameters","()","<p>The same as <code>path_parameters</code> with explicitly symbolized keys.\n"],["symbolized_sti_name","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-symbolized_sti_name","()",""],["symbols","Mime::Mimes","classes/Mime/Mimes.html#method-i-symbols","()",""],["sync_keys!","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-sync_keys-21","()",""],["synchronize","Module","classes/Module.html#method-i-synchronize","(*methods)","<p>Synchronize access around a method, delegating synchronization to a\nparticular mutex. A mutex (either …\n"],["t","AbstractController::Translation","classes/AbstractController/Translation.html#method-i-t","(*args)",""],["t","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-t","(key, options = {})",""],["table_alias_for","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_alias_for","(table_name)","<p>Truncates a table alias according to the limits of the current adapter.\n"],["table_alias_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-table_alias_length","()","<p>Returns the maximum length of a table alias.\n"],["table_alias_length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-table_alias_length","()","<p>Returns the configured supported identifier length supported by PostgreSQL\n"],["table_exists?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-table_exists-3F","(name)",""],["table_exists?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-table_exists-3F","(name)","<p>Returns true if table exists. If the schema is not specified as part of\n<code>name</code> then it will only find tables …\n"],["table_exists?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-table_exists-3F","(name)",""],["table_exists?","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-table_exists-3F","(name)","<p>A cached lookup for table existence.\n"],["table_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_exists-3F","(table_name)","<p>Checks to see if the table <code>table_name</code> exists on the database.\n<p>Example\n\n<pre>table_exists?(:developers)</pre>\n"],["table_exists?","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_exists-3F","()","<p>Indicates whether the table associated with this class exists\n"],["table_name","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_name","()","<p>Guesses the table name (in forced lower-case) based on the name of the\nclass in the inheritance hierarchy …\n"],["table_name","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-table_name","","<p>The table name defaults to ‘sessions’.\n"],["table_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-table_name","()",""],["table_name=","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_name-3D","(value)","<p>Sets the table name explicitly. Example:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Project</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">table_name</span> = <span class=\"ruby-string\">&quot;project&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["table_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-table_name_length","()","<p>Returns the maximum length of a table name.\n"],["table_rows","ActiveRecord::Fixtures","classes/ActiveRecord/Fixtures.html#method-i-table_rows","()","<p>Return a hash of rows to be inserted. The key is the table, the value is a\nlist of rows to insert to …\n"],["table_structure","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-table_structure","(table_name)",""],["tableize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-tableize","(class_name)","<p>Create the name of a table like Rails does for models to table names. This\nmethod uses the <code>pluralize</code> …\n"],["tableize","String","classes/String.html#method-i-tableize","()","<p>Creates the name of a table like Rails does for models to table names. This\nmethod uses the <code>pluralize</code> …\n"],["tables","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-tables","(name = nil)","<p>Returns the list of all tables in the schema search path or a specified\nschema.\n"],["tag","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-tag","(type, options, *)",""],["tag","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-tag","(name, options = nil, open = false, escape = true)","<p>Returns an empty HTML tag of type <code>name</code> which by default is\nXHTML compliant. Set <code>open</code> to true to create …\n"],["tagged","ActiveSupport::TaggedLogging","classes/ActiveSupport/TaggedLogging.html#method-i-tagged","(*tags)",""],["tail!","Rails::Rack::LogTailer","classes/Rails/Rack/LogTailer.html#method-i-tail-21","()",""],["teardown","ActiveSupport::LogSubscriber::TestHelper","classes/ActiveSupport/LogSubscriber/TestHelper.html#method-i-teardown","()",""],["teardown","ActiveSupport::Testing::SetupAndTeardown::ClassMethods","classes/ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html#method-i-teardown","(*args, &block)",""],["teardown_fixtures","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-teardown_fixtures","()",""],["teardown_subscriptions","ActionController::TemplateAssertions","classes/ActionController/TemplateAssertions.html#method-i-teardown_subscriptions","()",""],["telephone_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-telephone_field","(object_name, method, options = {})","<p>Returns a text_field of type “tel”.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">telephone_field</span>(<span class=\"ruby-string\">&quot;user&quot;</span>, <span class=\"ruby-string\">&quot;phone&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; &lt;input id=&quot;user_phone&quot; ...</span>\n</pre>\n"],["telephone_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-telephone_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “tel”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["template","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-template","(source, *args, &block)",""],["template_exists?","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-template_exists-3F","(name, prefixes = [], partial = false, keys = [], options = {})",""],["templates_path","Rails::Generators","classes/Rails/Generators.html#method-c-templates_path","()",""],["terabyte","Numeric","classes/Numeric.html#method-i-terabyte","()",""],["terabytes","Numeric","classes/Numeric.html#method-i-terabytes","()",""],["test","ActiveSupport::Testing::Declarative","classes/ActiveSupport/Testing/Declarative.html#method-i-test","(name, &block)","<p>test “verify something” do\n\n<pre>...</pre>\n<p>end\n"],["test","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-test","()",""],["test","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-test","()",""],["test_dummy_clean","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-test_dummy_clean","()",""],["test_dummy_config","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-test_dummy_config","()",""],["test_errors_aref","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_errors_aref","()","<p>Errors Testing\n<p>Returns an object that has :[] and :full_messages defined on it. See below\nfor more details. …\n"],["test_errors_full_messages","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_errors_full_messages","()","<p>Returns an Array of all error messages for the object. Each message should\ncontain information about …\n"],["test_model_naming","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_model_naming","()","<p>Naming\n<p>Model.model_name must return a string with some convenience methods:\n:human, :singular, and :plural. …\n"],["test_persisted?","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_persisted-3F","()","<p>Responds to <code>persisted?</code>\n<p>Returns a boolean that specifies whether the object has been persisted yet.\nThis …\n"],["test_to_key","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_to_key","()","<p>Responds to <code>to_key</code>\n<p>Returns an Enumerable of all (primary) key attributes or nil if\nmodel.persisted? is …\n"],["test_to_param","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_to_param","()","<p>Responds to <code>to_param</code>\n<p>Returns a string representing the object’s key suitable for use in URLs or\nnil if …\n"],["test_to_partial_path","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_to_partial_path","()","<p>Responds to <code>to_partial_path</code>\n<p>Returns a string giving a relative path.  This is used for looking up\npartials. …\n"],["test_valid?","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_valid-3F","()","<p>Responds to <code>valid?</code>\n<p>Returns a boolean that specifies whether the object is in a valid or\ninvalid state. …\n"],["tests","ActionController::TestCase::Behavior::ClassMethods","classes/ActionController/TestCase/Behavior/ClassMethods.html#method-i-tests","(controller_class)","<p>Sets the controller class name. Useful if the name can’t be inferred from\ntest class. Normalizes <code>controller_class</code> …\n"],["tests","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-tests","(helper_class)",""],["tests","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-c-tests","(klass)","<p>Sets which generator should be tested:\n\n<pre>tests AppGenerator</pre>\n"],["text_area","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-text_area","(object_name, method, options = {})","<p>Returns a textarea opening and closing tag set tailored for accessing a\nspecified attribute (identified …\n"],["text_area_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-text_area_tag","(name, content = nil, options = {})","<p>Creates a text input area; use a textarea for longer text inputs such as\nblog posts or descriptions. …\n"],["text_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-text_field","(object_name, method, options = {})","<p>Returns an input tag of the “text” type tailored for accessing a specified\nattribute (identified …\n"],["text_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-text_field_tag","(name, value = nil, options = {})","<p>Creates a standard text field; use these text fields to input smaller\nchunks of text like a username …\n"],["third","Array","classes/Array.html#method-i-third","()","<p>Equal to <code>self[2]</code>.\n"],["threadsafe!","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-threadsafe-21","()","<p>Enable threaded mode. Allows concurrent requests to controller actions and\nmultiple database connections. …\n"],["tidy_bytes","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-tidy_bytes","(force = false)","<p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent\nresulting in a valid UTF-8 string. …\n"],["tidy_bytes","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-tidy_bytes","(string, force = false)","<p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent\nresulting in a valid UTF-8 string. …\n"],["time","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-time","()","<p>Returns a Time or DateTime instance that represents the time in\n<code>time_zone</code>.\n"],["time_ago_in_words","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-time_ago_in_words","(from_time, include_seconds = false, options = {})","<p>Like <code>distance_of_time_in_words</code>, but where <code>to_time</code>\nis fixed to <code>Time.now</code>.\n<p>Examples\n\n<pre>time_ago_in_words(3.minutes.from_now) ...</pre>\n"],["time_select","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-time_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for hour, minute and optionally second)\npre-selected for accessing …\n"],["time_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-time_select","(method, options = {}, html_options = {})",""],["time_tag","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-time_tag","(date_or_time, *args)","<p>Returns an html time tag for the given date or time.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">time_tag</span> <span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">today</span>  <span class=\"ruby-comment\"># =&gt;</span>\n  <span class=\"ruby-operator\">&lt;</span><span class=\"ruby-identifier\">time</span> <span class=\"ruby-identifier\">datetime</span>=<span class=\"ruby-string\">&quot;2010-11-04&quot;</span><span class=\"ruby-operator\">&gt;</span><span class=\"ruby-constant\">November</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["time_with_block","ActiveSupport::Testing::Performance::Profiler","classes/ActiveSupport/Testing/Performance/Profiler.html#method-i-time_with_block","()",""],["time_with_datetime_fallback","Time","classes/Time.html#method-c-time_with_datetime_fallback","(utc_or_local, year, month=1, day=1, hour=0, min=0, sec=0, usec=0)","<p>Returns a new Time if requested year can be accommodated by Ruby’s Time\nclass (i.e., if year is within …\n"],["time_zone_options_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_options_for_select","(selected = nil, priority_zones = nil, model = ::ActiveSupport::TimeZone)","<p>Returns a string of option tags for pretty much any time zone in the world.\nSupply a ActiveSupport::TimeZone …\n"],["time_zone_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-time_zone_select","(method, priority_zones = nil, options = {}, html_options = {})",""],["time_zone_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_select","(object, method, priority_zones = nil, options = {}, html_options = {})","<p>Return select and option tags for the given object and method, using\n#time_zone_options_for_select to …\n"],["timeout","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-timeout","()","<p>Gets the number of seconds after which requests to the REST API should time\nout.\n"],["timeout=","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-timeout-3D","(timeout)","<p>Sets the number of seconds after which requests to the REST API should time\nout.\n"],["timeout=","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-i-timeout-3D","(timeout)","<p>Sets the number of seconds after which HTTP requests to the remote service\nshould time out.\n"],["timestamped_migrations","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-timestamped_migrations","","<p>Specify whether or not to use timestamps for migration versions\n"],["timestamps","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-timestamps","()","<p>Adds timestamps (<code>created_at</code> and <code>updated_at</code>)\ncolumns to the table. See SchemaStatements#add_timestamps …\n"],["timestamps","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-timestamps","(*args)","<p>Appends <code>:datetime</code> columns <code>:created_at</code> and\n<code>:updated_at</code> to the table.\n"],["titlecase","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-titlecase","()",""],["titlecase","String","classes/String.html#method-i-titlecase","()",""],["titleize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-titleize","(word)","<p>Capitalizes all the words and replaces some characters in the string to\ncreate a nicer looking title. …\n"],["titleize","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-titleize","()","<p>Capitalizes the first letter of every word, when possible.\n<p>Example:\n\n<pre>&quot;ÉL QUE SE ENTERÓ&quot;.mb_chars.titleize ...</pre>\n"],["titleize","String","classes/String.html#method-i-titleize","()","<p>Capitalizes all the words and replaces some characters in the string to\ncreate a nicer looking title. …\n"],["tmp","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-tmp","()",""],["to","Array","classes/Array.html#method-i-to","(position)","<p>Returns the beginning of the array up to <code>position</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">to</span>(<span class=\"ruby-value\">0</span>)  <span class=\"ruby-comment\"># =&gt; %w( a )</span>\n<span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">to</span>(<span class=\"ruby-value\">2</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to","String","classes/String.html#method-i-to","(position)","<p>Returns the beginning of the string up to the <code>position</code>\ntreating the string as an array (where 0 is the …\n"],["to_a","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-to_a","()",""],["to_a","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-to_a","()","<p>Returns an array of error messages, with the attribute name included\n\n<pre>p.errors.add(:name, &quot;can't be blank&quot;) ...</pre>\n"],["to_a","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-to_a","()",""],["to_a","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-to_a","()",""],["to_a","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_a","()",""],["to_a","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-to_a","()",""],["to_app","Rails::Application","classes/Rails/Application.html#method-i-to_app","()",""],["to_ary","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-to_ary","()",""],["to_boolean_select_tag","ActionView::Helpers::InstanceTag","classes/ActionView/Helpers/InstanceTag.html#method-i-to_boolean_select_tag","(options = {})",""],["to_check_box_tag","ActionView::Helpers::InstanceTag","classes/ActionView/Helpers/InstanceTag.html#method-i-to_check_box_tag","(options = {}, checked_value = \"1\", unchecked_value = \"0\")",""],["to_cleanup","ActionDispatch::Reloader","classes/ActionDispatch/Reloader.html#method-c-to_cleanup","(*args, &block)","<p>Add a cleanup callback. Cleanup callbacks are run after each request is\ncomplete (after #close is called …\n"],["to_content_tag","ActionView::Helpers::InstanceTag","classes/ActionView/Helpers/InstanceTag.html#method-i-to_content_tag","(tag_name, options = {})",""],["to_d","BigDecimal","classes/BigDecimal.html#method-i-to_d","()",""],["to_date","Date","classes/Date.html#method-i-to_date","()","<p>A method to keep Time, Date and DateTime instances interchangeable on\nconversions. In this case, it simply …\n"],["to_date","DateTime","classes/DateTime.html#method-i-to_date","()","<p>Converts self to a Ruby Date object; time portion is discarded.\n"],["to_date","Mysql::Time","classes/Mysql/Time.html#method-i-to_date","()","<p>This monkey patch is for test_additional_columns_from_join_table\n"],["to_date","String","classes/String.html#method-i-to_date","()","<p>Converts a string to a Date value.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;1-1-2012&quot;</span>.<span class=\"ruby-identifier\">to_date</span>   <span class=\"ruby-comment\">#=&gt; Sun, 01 Jan 2012</span>\n<span class=\"ruby-string\">&quot;01/01/2012&quot;</span>.<span class=\"ruby-identifier\">to_date</span> <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["to_date","Time","classes/Time.html#method-i-to_date","()","<p>Converts a Time object to a Date, dropping hour, minute, and second\nprecision.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">my_time</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>  <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["to_date_select_tag","ActionView::Helpers::DateHelperInstanceTag","classes/ActionView/Helpers/DateHelperInstanceTag.html#method-i-to_date_select_tag","(options = {}, html_options = {})",""],["to_datetime","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_datetime","()",""],["to_datetime","Date","classes/Date.html#method-i-to_datetime","()","<p>Converts a Date instance to a DateTime, where the time is set to the\nbeginning of the day and UTC offset …\n"],["to_datetime","DateTime","classes/DateTime.html#method-i-to_datetime","()","<p>To be able to keep Times, Dates and DateTimes interchangeable on\nconversions.\n"],["to_datetime","String","classes/String.html#method-i-to_datetime","()","<p>Converts a string to a DateTime value.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;1-1-2012&quot;</span>.<span class=\"ruby-identifier\">to_datetime</span>            <span class=\"ruby-comment\">#=&gt; Sun, 01 Jan 2012 00:00:00 ...</span>\n</pre>\n"],["to_datetime","Time","classes/Time.html#method-i-to_datetime","()","<p>Converts a Time instance to a Ruby DateTime instance, preserving UTC\noffset.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">my_time</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>    <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["to_datetime_select_tag","ActionView::Helpers::DateHelperInstanceTag","classes/ActionView/Helpers/DateHelperInstanceTag.html#method-i-to_datetime_select_tag","(options = {}, html_options = {})",""],["to_default_s","Array","classes/Array.html#method-i-to_default_s","(format = :default)",""],["to_default_s","Date","classes/Date.html#method-i-to_default_s","(format = :default)",""],["to_default_s","DateTime","classes/DateTime.html#method-i-to_default_s","(format = :default)",""],["to_default_s","Range","classes/Range.html#method-i-to_default_s","(format = :default)",""],["to_default_s","Time","classes/Time.html#method-i-to_default_s","(format = :default)",""],["to_f","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_f","()",""],["to_f","DateTime","classes/DateTime.html#method-i-to_f","()","<p>Converts self to a floating-point number of seconds since the Unix epoch.\n"],["to_format","ActionController::Responder","classes/ActionController/Responder.html#method-i-to_format","()","<p>All other formats follow the procedure below. First we try to render a\ntemplate, if the template is not …\n"],["to_formatted_s","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_formatted_s","(format = :default)",""],["to_formatted_s","Array","classes/Array.html#method-i-to_formatted_s","(format = :default)","<p>Converts a collection of elements into a formatted string by calling\n<code>to_s</code> on all elements and joining …\n"],["to_formatted_s","BigDecimal","classes/BigDecimal.html#method-i-to_formatted_s","(format = DEFAULT_STRING_FORMAT)",""],["to_formatted_s","Date","classes/Date.html#method-i-to_formatted_s","(format = :default)","<p>Convert to a formatted string. See DATE_FORMATS for predefined formats.\n<p>This method is aliased to <code>to_s</code> …\n"],["to_formatted_s","DateTime","classes/DateTime.html#method-i-to_formatted_s","(format = :default)","<p>Convert to a formatted string. See Time::DATE_FORMATS for predefined\nformats.\n<p>This method is aliased to …\n"],["to_formatted_s","Range","classes/Range.html#method-i-to_formatted_s","(format = :default)","<p>Gives a human readable format of the range.\n<p>Example\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">100</span>).<span class=\"ruby-identifier\">to_formatted_s</span> <span class=\"ruby-comment\"># =&gt; &quot;1..100&quot;</span>\n</pre>\n"],["to_formatted_s","Time","classes/Time.html#method-i-to_formatted_s","(format = :default)","<p>Converts to a formatted string. See DATE_FORMATS for builtin formats.\n<p>This method is aliased to <code>to_s</code>. …\n"],["to_hash","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-to_hash","()",""],["to_hash","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-to_hash","()",""],["to_hash","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-to_hash","()",""],["to_hash","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-to_hash","()","<p>Convert to a Hash with String keys.\n"],["to_hash","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-to_hash","()","<p>Convert to a Hash with String keys.\n"],["to_hash","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-to_hash","()",""],["to_html","ActionController::Responder","classes/ActionController/Responder.html#method-i-to_html","()","<p>HTML format does not render the resource, it always attempt to render a\ntemplate.\n"],["to_html","Rails::Info","classes/Rails/Info.html#method-c-to_html","()",""],["to_i","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_i","()",""],["to_i","DateTime","classes/DateTime.html#method-i-to_i","()","<p>Converts self to an integer number of seconds since the Unix epoch.\n"],["to_input_field_tag","ActionView::Helpers::InstanceTag","classes/ActionView/Helpers/InstanceTag.html#method-i-to_input_field_tag","(field_type, options = {})",""],["to_js","ActionController::Responder","classes/ActionController/Responder.html#method-i-to_js","()","<p>to_js simply tries to render a template. If no template is found, raises\nthe error.\n"],["to_json","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-to_json","(options={})",""],["to_json","Object","classes/Object.html#method-i-to_json","(options = nil)","<p>Dumps object in JSON (JavaScript Object Notation). See www.json.org for\nmore info.\n"],["to_key","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_key","()","<p>Returns an Enumerable of all key attributes if any is set, regardless if\nthe object is persisted or not. …\n"],["to_key","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-to_key","()","<p>Returns this record’s primary key value wrapped in an Array if one is\navailable\n"],["to_label_tag","ActionView::Helpers::InstanceTag","classes/ActionView/Helpers/InstanceTag.html#method-i-to_label_tag","(text = nil, options = {}, &block)",""],["to_model","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-to_model","()",""],["to_model","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_model","()","<p>If your object is already designed to implement all of the Active Model you\ncan use the default <code>:to_model</code> …\n"],["to_number_field_tag","ActionView::Helpers::InstanceTag","classes/ActionView/Helpers/InstanceTag.html#method-i-to_number_field_tag","(field_type, options = {})",""],["to_options","Hash","classes/Hash.html#method-i-to_options","()",""],["to_options!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-to_options-21","()",""],["to_options!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-to_options-21","()",""],["to_options!","Hash","classes/Hash.html#method-i-to_options-21","()",""],["to_param","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_param","()","<p>Returns a string representing the object’s key suitable for use in URLs, or\nnil if <code>persisted?</code> is false. …\n"],["to_param","ActiveRecord::Integration","classes/ActiveRecord/Integration.html#method-i-to_param","()","<p>Returns a String, which Action Pack uses for constructing an URL to this\nobject. The default implementation …\n"],["to_param","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-to_param","()",""],["to_param","Array","classes/Array.html#method-i-to_param","()","<p>Calls <code>to_param</code> on all its elements and joins the result with\nslashes. This is used by <code>url_for</code> in Action …\n"],["to_param","FalseClass","classes/FalseClass.html#method-i-to_param","()",""],["to_param","Hash","classes/Hash.html#method-i-to_param","(namespace = nil)","<p>Returns a string representation of the receiver suitable for use as a URL\nquery string:\n\n<pre class=\"ruby\">{:<span class=\"ruby-identifier\">name</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'David'</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_param","NilClass","classes/NilClass.html#method-i-to_param","()",""],["to_param","Object","classes/Object.html#method-i-to_param","()","<p>Alias of <code>to_s</code>.\n"],["to_param","TrueClass","classes/TrueClass.html#method-i-to_param","()",""],["to_partial_path","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-to_partial_path","()",""],["to_partial_path","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_partial_path","()","<p>Returns a string identifying the path associated with the object.\nActionPack uses this to find a suitable …\n"],["to_path","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-to_path","()",""],["to_path","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-i-to_path","()",""],["to_prepare","ActionDispatch::Reloader","classes/ActionDispatch/Reloader.html#method-c-to_prepare","(*args, &block)","<p>Add a prepare callback. Prepare callbacks are run before each request,\nprior to ActionDispatch::Callback’s …\n"],["to_prepare","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-to_prepare","(&blk)","<p>Defines generic callbacks to run before #after_initialize. Useful for\nRails::Railtie subclasses.\n"],["to_prepare_blocks","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-to_prepare_blocks","()","<p>Array of callbacks defined by #to_prepare.\n"],["to_query","Array","classes/Array.html#method-i-to_query","(key)","<p>Converts an array into a string suitable for use as a URL query string,\nusing the given <code>key</code> as the param …\n"],["to_query","Hash","classes/Hash.html#method-i-to_query","(namespace = nil)",""],["to_query","Object","classes/Object.html#method-i-to_query","(key)","<p>Converts an object into a string suitable for use as a URL query string,\nusing the given <code>key</code> as the param …\n"],["to_radio_button_tag","ActionView::Helpers::InstanceTag","classes/ActionView/Helpers/InstanceTag.html#method-i-to_radio_button_tag","(tag_value, options = {})",""],["to_s","ActionDispatch::RemoteIp::GetIp","classes/ActionDispatch/RemoteIp/GetIp.html#method-i-to_s","()",""],["to_s","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-i-to_s","()",""],["to_s","ActionView::FixtureResolver","classes/ActionView/FixtureResolver.html#method-i-to_s","()",""],["to_s","ActiveResource::Request","classes/ActiveResource/Request.html#method-i-to_s","()",""],["to_s","ActiveResource::SSLError","classes/ActiveResource/SSLError.html#method-i-to_s","()",""],["to_s","ActiveResource::TimeoutError","classes/ActiveResource/TimeoutError.html#method-i-to_s","()",""],["to_s","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-to_s","()",""],["to_s","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_s","(format = :default)","<p><code>:db</code> format outputs time in UTC; all others output time in\nlocal. Uses TimeWithZone's <code>strftime</code>, so <code>%Z</code> ...\n"],["to_s","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-to_s","()","<p>Returns a textual representation of this time zone.\n"],["to_s","Array","classes/Array.html#method-i-to_s","(format = :default)",""],["to_s","BigDecimal","classes/BigDecimal.html#method-i-to_s","(format = DEFAULT_STRING_FORMAT)",""],["to_s","Date","classes/Date.html#method-i-to_s","(format = :default)",""],["to_s","DateTime","classes/DateTime.html#method-i-to_s","(format = :default)",""],["to_s","Mime::Type","classes/Mime/Type.html#method-i-to_s","()",""],["to_s","Plugin","classes/Plugin.html#method-i-to_s","()",""],["to_s","Rails::Info","classes/Rails/Info.html#method-c-to_s","()",""],["to_s","Range","classes/Range.html#method-i-to_s","(format = :default)",""],["to_s","SourceAnnotationExtractor::Annotation","classes/SourceAnnotationExtractor/Annotation.html#method-i-to_s","(options={})","<p>Returns a representation of the annotation that looks like this:\n\n<pre>[126] [TODO] This algorithm is simple ...</pre>\n"],["to_s","Time","classes/Time.html#method-i-to_s","(format = :default)",""],["to_sentence","Array","classes/Array.html#method-i-to_sentence","(options = {})","<p>Converts the array to a comma-separated sentence where the last element is\njoined by the connector word. …\n"],["to_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-to_sql","(arel, binds = [])","<p>Converts an arel AST to SQL\n"],["to_sql","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-to_sql","()","<p>Returns a String whose contents are the column definitions concatenated\ntogether. This string can then …\n"],["to_sql","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-to_sql","()",""],["to_str","Mime::Type","classes/Mime/Type.html#method-i-to_str","()",""],["to_sym","Mime::Type","classes/Mime/Type.html#method-i-to_sym","()",""],["to_tag","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-to_tag","(key, value, options)",""],["to_text_area_tag","ActionView::Helpers::InstanceTag","classes/ActionView/Helpers/InstanceTag.html#method-i-to_text_area_tag","(options = {})",""],["to_time","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_time","()","<p>A TimeWithZone acts like a Time, so just return <code>self</code>.\n"],["to_time","Date","classes/Date.html#method-i-to_time","(form = :local)","<p>Converts a Date instance to a Time, where the time is set to the beginning\nof the day. The timezone can …\n"],["to_time","DateTime","classes/DateTime.html#method-i-to_time","()","<p>Attempts to convert self to a Ruby Time object; returns self if out of\nrange of Ruby Time class. If self …\n"],["to_time","String","classes/String.html#method-i-to_time","(form = :utc)","<p>Form can be either :utc (default) or :local.\n"],["to_time","Time","classes/Time.html#method-i-to_time","()","<p>A method to keep Time, Date and DateTime instances interchangeable on\nconversions. In this case, it simply …\n"],["to_time_in_current_zone","Date","classes/Date.html#method-i-to_time_in_current_zone","()","<p>Converts Date to a TimeWithZone in the current zone if Time.zone or\nTime.zone_default is set, otherwise …\n"],["to_time_select_tag","ActionView::Helpers::DateHelperInstanceTag","classes/ActionView/Helpers/DateHelperInstanceTag.html#method-i-to_time_select_tag","(options = {}, html_options = {})",""],["to_xml","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-to_xml","(options={})","<p>Returns an xml formatted representation of the Errors hash.\n\n<pre>p.errors.add(:name, &quot;can't be blank&quot;)\np.errors.add(:name, ...</pre>\n"],["to_xml","ActiveModel::Serializers::Xml","classes/ActiveModel/Serializers/Xml.html#method-i-to_xml","(options = {}, &block)","<p>Returns XML representing the model. Configuration can be passed through\n<code>options</code>.\n<p>Without any <code>options</code>, …\n"],["to_xml","ActiveRecord::Serialization","classes/ActiveRecord/Serialization.html#method-i-to_xml","(options = {}, &block)","<p>Builds an XML document to represent the model. Some configuration is\navailable through <code>options</code>. However …\n"],["to_xml","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-to_xml","(options={})",""],["to_xml","Array","classes/Array.html#method-i-to_xml","(options = {})","<p>Returns a string that represents the array in XML by invoking\n<code>to_xml</code> on each element. Active Record collections …\n"],["to_xml","Hash","classes/Hash.html#method-i-to_xml","(options = {})","<p>Returns a string containing an XML representation of its receiver:\n\n<pre class=\"ruby\">{<span class=\"ruby-string\">&quot;foo&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-string\">&quot;bar&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">2</span>}.<span class=\"ruby-identifier\">to_xml</span>\n<span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["to_yaml","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-to_yaml","(opts = {})",""],["to_yaml","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-to_yaml","(*args)",""],["to_yaml","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_yaml","(options = {})",""],["to_yaml","BigDecimal","classes/BigDecimal.html#method-i-to_yaml","(opts = {})","<p>This emits the number without any scientific notation. This is better than\nself.to_f.to_s since it doesn’t …\n"],["to_yaml_type","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-to_yaml_type","()",""],["today","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-today","()","<p>Return the current date in this time zone.\n"],["today?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-today-3F","()",""],["today?","Date","classes/Date.html#method-i-today-3F","()","<p>Returns true if the Date object’s date is today.\n"],["today?","Time","classes/Time.html#method-i-today-3F","()","<p>Tells whether the Time object’s time is today\n"],["toggle","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-toggle","(attribute)","<p>Assigns to <code>attribute</code> the boolean opposite of\n<code>attribute?</code>. So if the predicate returns <code>true</code> the\nattribute …\n"],["toggle!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-toggle-21","(attribute)","<p>Wrapper around <code>toggle</code> that saves the record. This method\ndiffers from its non-bang version in that it …\n"],["token_and_options","ActionController::HttpAuthentication::Token","classes/ActionController/HttpAuthentication/Token.html#method-i-token_and_options","(request)","<p>Parses the token and options out of the token authorization header. If the\nheader looks like this:\n\n<pre>Authorization: ...</pre>\n"],["tokenize","HTML::Sanitizer","classes/HTML/Sanitizer.html#method-i-tokenize","(text, options)",""],["tokenize","HTML::WhiteListSanitizer","classes/HTML/WhiteListSanitizer.html#method-i-tokenize","(text, options)",""],["tomorrow","Date","classes/Date.html#method-c-tomorrow","()","<p>Returns a new Date representing the date 1 day after today (i.e. tomorrow’s\ndate).\n"],["tomorrow","Date","classes/Date.html#method-i-tomorrow","()","<p>Convenience method which returns a new Date/DateTime representing the time\n1 day since the instance time …\n"],["tomorrow","Time","classes/Time.html#method-i-tomorrow","()","<p>Convenience method which returns a new Time representing the time 1 day\nsince the instance time\n"],["touch","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-touch","(name = nil)","<p>Saves the record with the updated_at/on attributes set to the current time.\nPlease note that no validation …\n"],["transaction","ActiveModel::ObserverArray","classes/ActiveModel/ObserverArray.html#method-i-transaction","()",""],["transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction","(options = {})","<p>Runs the given block in a database transaction, and returns the result of\nthe block.\n<p>Nested transactions …\n"],["transaction","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-transaction","(options = {}, &block)","<p>See ActiveRecord::Transactions::ClassMethods for detailed documentation.\n"],["transaction","ActiveRecord::Transactions::ClassMethods","classes/ActiveRecord/Transactions/ClassMethods.html#method-i-transaction","(options = {}, &block)","<p>See ActiveRecord::Transactions::ClassMethods for detailed documentation.\n"],["transaction_joinable=","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-transaction_joinable-3D","(joinable)",""],["translate","AbstractController::Translation","classes/AbstractController/Translation.html#method-i-translate","(*args)",""],["translate","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-translate","(key, options = {})","<p>Delegates to <code>I18n#translate</code> but also performs three additional\nfunctions.\n<p>First, it’ll pass the <code>:rescue_format</code> …\n"],["translate_exception","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-translate_exception","(e, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-translate_exception","(exception, message)",""],["transliterate","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-transliterate","(string, replacement = \"?\")","<p>Replaces non-ASCII characters with an ASCII approximation, or if none\nexists, a replacement character …\n"],["trigger","ActiveSupport::FileWatcher","classes/ActiveSupport/FileWatcher.html#method-i-trigger","(files)",""],["trigger","ActiveSupport::FileWatcher::Backend","classes/ActiveSupport/FileWatcher/Backend.html#method-i-trigger","(files)",""],["truncate","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-truncate","(text, options = {})","<p>Truncates a given <code>text</code> after a given <code>:length</code> if\n<code>text</code> is longer than <code>:length</code> (defaults to 30). The\nlast …\n"],["truncate","String","classes/String.html#method-i-truncate","(length, options = {})","<p>Truncates a given <code>text</code> after a given <code>length</code> if\n<code>text</code> is longer than <code>length</code>:\n\n<pre>&quot;Once upon a time in a world ...</pre>\n"],["try","NilClass","classes/NilClass.html#method-i-try","(*args)","<p>Calling <code>try</code> on <code>nil</code> always returns\n<code>nil</code>. It becomes specially helpful when navigating through\nassociations …\n"],["try","Object","classes/Object.html#method-i-try","(*a, &b)","<p>Invokes the method identified by the symbol <code>method</code>, passing it\nany arguments and/or the block specified, …\n"],["try_to_load_dependency","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-try_to_load_dependency","(file_name)",""],["tsort_each_child","Rails::Initializable::Collection","classes/Rails/Initializable/Collection.html#method-i-tsort_each_child","(initializer, &block)",""],["tsvector","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::TableDefinition","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/TableDefinition.html#method-i-tsvector","(*args)",""],["tv_sec","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-tv_sec","()",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-type_cast","(value, column)","<p>QUOTING ==================================================\n"],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-type_cast","(value, column)",""],["type_cast","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-type_cast","(value, column)","<p>Cast a <code>value</code> to a type that the database understands. For\nexample, SQLite does not understand dates, …\n"],["type_cast_attribute_for_write","ActiveRecord::AttributeMethods::Serialization","classes/ActiveRecord/AttributeMethods/Serialization.html#method-i-type_cast_attribute_for_write","(column, value)",""],["type_to_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-type_to_sql","(type, limit = nil, precision = nil, scale = nil)","<p>Maps logical Rails types to MySQL-specific data types.\n"],["type_to_sql","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-type_to_sql","(type, limit = nil, precision = nil, scale = nil)","<p>Maps logical Rails types to PostgreSQL-specific data types.\n"],["u_unpack","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-u_unpack","(string)","<p>Unpack the string at codepoints boundaries. Raises an EncodingError when\nthe encoding of the string isn’t …\n"],["uncached","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-uncached","()","<p>Disable the query cache within the block.\n"],["uncached","ActiveRecord::QueryCache::ClassMethods","classes/ActiveRecord/QueryCache/ClassMethods.html#method-i-uncached","(&block)","<p>Disable the query cache within the block if Active Record is configured.\n"],["uncountable","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-uncountable","(*words)","<p>Add uncountable words that shouldn’t be attempted inflected.\n<p>Examples:\n\n<pre>uncountable &quot;money&quot;\nuncountable ...</pre>\n"],["uncountable?","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-uncountable-3F","(record_or_class)","<p>Identifies whether the class name of a record or class is uncountable.\nExamples:\n\n<pre>ActiveModel::Naming.uncountable?(Sheep) ...</pre>\n"],["uncountable?","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-uncountable-3F","()",""],["undefine_attribute_methods","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-undefine_attribute_methods","()","<p>Removes all the previously dynamically defined methods from the class\n"],["undefine_attribute_methods","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-undefine_attribute_methods","()",""],["undefine_attribute_methods","ActiveRecord::AttributeMethods::Read::ClassMethods","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-undefine_attribute_methods","()",""],["underscore","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-underscore","(camel_cased_word)","<p>Makes an underscored, lowercase form from the expression in the string.\n<p>Changes ‘::’ to ‘/’ to convert …\n"],["underscore","String","classes/String.html#method-i-underscore","()","<p>The reverse of <code>camelize</code>. Makes an underscored, lowercase form\nfrom the expression in the string.\n<p><code>underscore</code> ...\n"],["unescape","Object","classes/Object.html#method-i-unescape","(str, escaped = /%[a-fA-F\\d]{2}/)",""],["unescape_bytea","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-unescape_bytea","(value)","<p>Unescapes bytea output from a database to the binary string it represents.\nNOTE: This is NOT an inverse …\n"],["unescape_path","ActionDispatch::FileHandler","classes/ActionDispatch/FileHandler.html#method-i-unescape_path","(path)",""],["uninstall","Plugin","classes/Plugin.html#method-i-uninstall","()",""],["uniq","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-uniq","(value = true)","<p>Specifies whether the records should be unique or not. For example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">select</span>(:<span class=\"ruby-identifier\">name</span>)\n<span class=\"ruby-comment\"># =&gt; Might return ...</span>\n</pre>\n"],["uniq_by","Array","classes/Array.html#method-i-uniq_by","()","<p>Returns an unique array based on the criteria given as a <code>Proc</code>.\n\n<pre class=\"ruby\">[<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>].<span class=\"ruby-identifier\">uniq_by</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">i</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">i</span>.<span class=\"ruby-identifier\">odd?</span> } <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["uniq_by!","Array","classes/Array.html#method-i-uniq_by-21","()","<p>Same as uniq_by, but modifies self.\n"],["unmemoize_all","ActiveSupport::Memoizable::InstanceMethods","classes/ActiveSupport/Memoizable/InstanceMethods.html#method-i-unmemoize_all","()",""],["unregister","Mime::Type","classes/Mime/Type.html#method-c-unregister","(symbol)","<p>This method is opposite of register method.\n<p>Usage:\n<p>Mime::Type.unregister(:mobile)\n"],["unserialize","ActiveRecord::AttributeMethods::Serialization::Attribute","classes/ActiveRecord/AttributeMethods/Serialization/Attribute.html#method-i-unserialize","()",""],["unserialized_value","ActiveRecord::AttributeMethods::Serialization::Attribute","classes/ActiveRecord/AttributeMethods/Serialization/Attribute.html#method-i-unserialized_value","()",""],["unsubscribe","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-c-unsubscribe","(args)",""],["unsubscribe","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-unsubscribe","(subscriber)",""],["until","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-until","(time = ::Time.current)",""],["until","Numeric","classes/Numeric.html#method-i-until","(time = ::Time.current)","<p>Reads best with argument:  10.minutes.until(time)\n"],["up","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-up","()",""],["upcase","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-upcase","()","<p>Convert characters in the string to uppercase.\n<p>Example:\n\n<pre>'Laurent, où sont les tests ?'.mb_chars.upcase.to_s ...</pre>\n"],["update","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-update","(arel, name = nil, binds = [])","<p>Executes the update statement and returns the number of rows affected.\n"],["update","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-update","(id, attributes)","<p>Updates an object (or multiple objects) and saves it to the database, if\nvalidations pass. The resulting …\n"],["update","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-update","()","<p>Update the resource on the remote service.\n"],["update","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-update","(other_hash)","<p>Updates the instantized hash with values from the second:\n\n<pre>hash_1 = HashWithIndifferentAccess.new\nhash_1[:key] ...</pre>\n"],["update","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-update","(other_hash)","<p>Updates the instantized hash with values from the second:\n\n<pre>hash_1 = HashWithIndifferentAccess.new\nhash_1[:key] ...</pre>\n"],["update_all","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-update_all","(updates, conditions = nil, options = {})","<p>Updates all records with details given if they match a set of conditions\nsupplied, limits and order can …\n"],["update_attribute","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_attribute","(name, value)","<p>Updates a single attribute and saves the record. This is especially useful\nfor boolean flags on existing …\n"],["update_attribute","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-update_attribute","(name, value)","<p>Updates a single attribute and then saves the object.\n<p>Note: Unlike ActiveRecord::Base.update_attribute …\n"],["update_attributes","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_attributes","(attributes, options = {})","<p>Updates the attributes of the model from the passed-in hash and saves the\nrecord, all wrapped in a transaction. …\n"],["update_attributes","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-update_attributes","(attributes)","<p>Updates this resource with all the attributes from the passed-in Hash and\nrequests that the record be …\n"],["update_attributes","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-update_attributes","(params=nil)","<p>PUT update\n"],["update_attributes!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_attributes-21","(attributes, options = {})","<p>Updates its receiver just like <code>update_attributes</code> but calls\n<code>save!</code> instead of <code>save</code>, so an exception is …\n"],["update_column","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_column","(name, value)","<p>Updates a single attribute of an object, without calling save.\n<p>Validation is skipped.\n<p>Callbacks are skipped. …\n"],["update_counters","ActiveRecord::CounterCache","classes/ActiveRecord/CounterCache.html#method-i-update_counters","(id, counters)","<p>A generic “counter updater” implementation, intended primarily to be used\nby increment_counter …\n"],["update_counters","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-update_counters","(id, counters)","<p>Make sure the lock version column gets updated when counters are updated.\n"],["update_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-update_sql","(sql, name = nil)","<p>Executes the update statement and returns the number of rows affected.\n"],["update_sql","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-update_sql","(sql, name = nil)","<p>Executes an UPDATE query and returns the number of affected tuples.\n"],["updated","ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder","classes/ActionView/Helpers/AtomFeedHelper/AtomFeedBuilder.html#method-i-updated","(date_or_time = nil)","<p>Accepts a Date or Time object and inserts it in the proper format. If nil\nis passed, current time in …\n"],["updated?","ActiveSupport::FileUpdateChecker","classes/ActiveSupport/FileUpdateChecker.html#method-i-updated-3F","()","<p>Check if any of the entries were updated. If so, the updated_at value is\ncached until the block is executed …\n"],["url","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-url","()","<p>Returns the complete URL used for this request.\n"],["url_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-url_field","(object_name, method, options = {})","<p>Returns a text_field of type “url”.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">url_field</span>(<span class=\"ruby-string\">&quot;user&quot;</span>, <span class=\"ruby-string\">&quot;homepage&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; &lt;input id=&quot;user_homepage&quot; ...</span>\n</pre>\n"],["url_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-url_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “url”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["url_for","ActionController::Metal","classes/ActionController/Metal.html#method-i-url_for","(string)","<p>basic url_for that can be overridden for more robust functionality\n"],["url_for","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-c-url_for","(options = {})",""],["url_for","ActionDispatch::Routing::UrlFor","classes/ActionDispatch/Routing/UrlFor.html#method-i-url_for","(options = nil)","<p>Generate a url based on the options provided, default_url_options and the\nroutes defined in routes.rb. …\n"],["url_for","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-url_for","(options = {})","<p>Returns the URL for the set of <code>options</code> provided. This takes\nthe same options as <code>url_for</code> in Action Controller …\n"],["url_options","ActionController::UrlFor","classes/ActionController/UrlFor.html#method-i-url_options","()",""],["url_options","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-url_options","()",""],["url_options","ActionDispatch::IntegrationTest","classes/ActionDispatch/IntegrationTest.html#method-i-url_options","()",""],["url_options","ActionDispatch::IntegrationTest","classes/ActionDispatch/IntegrationTest.html#method-i-url_options","()",""],["url_options","ActionDispatch::Routing::UrlFor","classes/ActionDispatch/Routing/UrlFor.html#method-i-url_options","()",""],["url_options","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-url_options","()","<p>Need to map default url options to controller one. def\ndefault_url_options(*args) #:nodoc:\n\n<pre>controller.send(:default_url_options, ...</pre>\n"],["us_zones","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-us_zones","()","<p>A convenience method for returning a collection of TimeZone objects for\ntime zones in the USA.\n"],["usage_path","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-usage_path","()",""],["use","ActionController::Metal","classes/ActionController/Metal.html#method-c-use","(*args, &block)","<p>Adds given middleware class and its args to bottom of middleware_stack\n"],["use","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-use","(key = nil, used = true)","<p>Used internally by the <code>keep</code> and <code>discard</code> methods\n\n<pre>use()               # marks the entire flash as used\nuse('msg') ...</pre>\n"],["use","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-use","(*args, &block)",""],["use","ActiveRecord::IdentityMap","classes/ActiveRecord/IdentityMap.html#method-c-use","()",""],["use_accept_header","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-use_accept_header","()",""],["use_checkout?","RailsEnvironment","classes/RailsEnvironment.html#method-i-use_checkout-3F","()",""],["use_externals?","RailsEnvironment","classes/RailsEnvironment.html#method-i-use_externals-3F","()",""],["use_renderer","ActionController::Renderers::ClassMethods","classes/ActionController/Renderers/ClassMethods.html#method-i-use_renderer","(*args)",""],["use_renderers","ActionController::Renderers::ClassMethods","classes/ActionController/Renderers/ClassMethods.html#method-i-use_renderers","(*args)",""],["use_svn?","RailsEnvironment","classes/RailsEnvironment.html#method-i-use_svn-3F","()",""],["use_zone","Time","classes/Time.html#method-c-use_zone","(time_zone)","<p>Allows override of <code>Time.zone</code> locally inside supplied block;\nresets <code>Time.zone</code> to existing value when done. …\n"],["usec","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-usec","()",""],["user","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-user","()","<p>Gets the user for REST HTTP authentication.\n"],["user=","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-user-3D","(user)","<p>Sets the user for REST HTTP authentication.\n"],["user=","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-i-user-3D","(user)","<p>Sets the user for remote service.\n"],["user_agent=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-user_agent-3D","(user_agent)",""],["user_name_and_password","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-user_name_and_password","(request)",""],["uses_transaction","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-uses_transaction","(*methods)",""],["uses_transaction?","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-uses_transaction-3F","(method)",""],["using_limitable_reflections?","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-using_limitable_reflections-3F","(reflections)",""],["using_match_shorthand?","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-using_match_shorthand-3F","(path, options)",""],["utc","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-utc","()","<p>Returns a Time or DateTime instance that represents the time in UTC.\n"],["utc","DateTime","classes/DateTime.html#method-i-utc","()","<p>Adjusts DateTime to UTC by adding its offset value; offset is set to 0\n<p>Example:\n\n<pre>DateTime.civil(2005, 2, ...</pre>\n"],["utc?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-utc-3F","()",""],["utc?","DateTime","classes/DateTime.html#method-i-utc-3F","()","<p>Returns true if offset == 0\n"],["utc_offset","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-utc_offset","()",""],["utc_offset","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-utc_offset","()",""],["utc_offset","DateTime","classes/DateTime.html#method-i-utc_offset","()","<p>Returns the offset value in seconds\n"],["utc_time","Time","classes/Time.html#method-c-utc_time","(*args)","<p>Wraps class method <code>time_with_datetime_fallback</code> with\n<code>utc_or_local</code> set to <code>:utc</code>.\n"],["utc_to_local","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-utc_to_local","(time)","<p>Adjust the given time to the simultaneous time in the time zone represented\nby <code>self</code>. Returns a Time.utc() …\n"],["utf8_enforcer_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-utf8_enforcer_tag","()","<p>Creates the hidden UTF8 enforcer tag. Override this method in a helper to\ncustomize the tag.\n"],["uuid","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-uuid","()","<p>Returns the unique request id, which is based off either the X-Request-Id\nheader that can be generated …\n"],["valid?","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-valid-3F","(context = nil)","<p>Runs all the specified validations and returns true if no errors were added\notherwise false. Context …\n"],["valid?","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-valid-3F","(context = nil)","<p>Runs all the validations within the specified context. Returns true if no\nerrors are found, false otherwise. …\n"],["valid?","ActiveResource::Validations","classes/ActiveResource/Validations.html#method-i-valid-3F","()","<p>Checks for errors on an object (i.e., is resource.errors empty?).\n<p>Runs all the specified local validations …\n"],["valid_accept_header","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-valid_accept_header","()",""],["valid_alter_table_options","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-valid_alter_table_options","( type, options)","<p>See: www.sqlite.org/lang_altertable.html SQLite has an additional\nrestriction on the ALTER TABLE statement …\n"],["valid_const?","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-valid_const-3F","()",""],["valid_const?","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-valid_const-3F","()",""],["valid_scope_name?","ActiveRecord::Scoping::Named::ClassMethods","classes/ActiveRecord/Scoping/Named/ClassMethods.html#method-i-valid_scope_name-3F","(name)",""],["validate","ActiveModel::EachValidator","classes/ActiveModel/EachValidator.html#method-i-validate","(record)","<p>Performs validation on the supplied record. By default this will call\n<code>validates_each</code> to determine validity …\n"],["validate","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validate","(*args, &block)","<p>Adds a validation method or block to the class. This is useful when\noverriding the <code>validate</code> instance …\n"],["validate","ActiveModel::Validations::PresenceValidator","classes/ActiveModel/Validations/PresenceValidator.html#method-i-validate","(record)",""],["validate","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-i-validate","(record)","<p>Override this method in subclasses with validation logic, adding errors to\nthe records <code>errors</code> array where …\n"],["validate_digest_response","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-validate_digest_response","(request, realm, &password_procedure)","<p>Returns false unless the request credentials response value matches the\nexpected value. First try the …\n"],["validate_each","ActiveModel::EachValidator","classes/ActiveModel/EachValidator.html#method-i-validate_each","(record, attribute, value)","<p>Override this method in subclasses with the validation logic, adding errors\nto the records <code>errors</code> array …\n"],["validate_each","ActiveModel::Validations::AcceptanceValidator","classes/ActiveModel/Validations/AcceptanceValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::ConfirmationValidator","classes/ActiveModel/Validations/ConfirmationValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::ExclusionValidator","classes/ActiveModel/Validations/ExclusionValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::FormatValidator","classes/ActiveModel/Validations/FormatValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::InclusionValidator","classes/ActiveModel/Validations/InclusionValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::LengthValidator","classes/ActiveModel/Validations/LengthValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::NumericalityValidator","classes/ActiveModel/Validations/NumericalityValidator.html#method-i-validate_each","(record, attr_name, value)",""],["validate_each","ActiveModel::Validations::WithValidator","classes/ActiveModel/Validations/WithValidator.html#method-i-validate_each","(record, attr, val)",""],["validate_each","ActiveRecord::Validations::AssociatedValidator","classes/ActiveRecord/Validations/AssociatedValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveRecord::Validations::UniquenessValidator","classes/ActiveRecord/Validations/UniquenessValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_fallbacks","I18n::Railtie","classes/I18n/Railtie.html#method-c-validate_fallbacks","(fallbacks)",""],["validate_nonce","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-validate_nonce","(secret_key, request, value, seconds_to_timeout=5*60)","<p>Might want a shorter timeout depending on whether the request is a PUT or\nPOST, and if client is browser …\n"],["validates","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates","(*attributes)","<p>This method is a shortcut to all default validators and any custom\nvalidator classes ending in ‘Validator’. …\n"],["validates!","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates-21","(*attributes)","<p>This method is used to define validation that cannot be corrected by end\nuser and is considered exceptional. …\n"],["validates_acceptance_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_acceptance_of","(*attr_names)","<p>Encapsulates the pattern of wanting to validate the acceptance of a terms\nof service check box (or similar …\n"],["validates_associated","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_associated","(*attr_names)","<p>Validates whether the associated object or objects are all valid\nthemselves. Works with any kind of association. …\n"],["validates_confirmation_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_confirmation_of","(*attr_names)","<p>Encapsulates the pattern of wanting to validate a password or email address\nfield with a confirmation. …\n"],["validates_each","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates_each","(*attr_names, &block)","<p>Validates each attribute against a block.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Validations</span>\n\n  <span class=\"ruby-identifier\">attr_accessor</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["validates_exclusion_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_exclusion_of","(*attr_names)","<p>Validates that the value of the specified attribute is not in a particular\nenumerable object.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["validates_format_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_format_of","(*attr_names)","<p>Validates whether the value of the specified attribute is of the correct\nform, going by the regular expression …\n"],["validates_inclusion_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_inclusion_of","(*attr_names)","<p>Validates whether the value of the specified attribute is available in a\nparticular enumerable object. …\n"],["validates_length_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_length_of","(*attr_names)","<p>Validates that the specified attribute matches the length restrictions\nsupplied. Only one option can …\n"],["validates_numericality_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_numericality_of","(*attr_names)","<p>Validates whether the value of the specified attribute is numeric by trying\nto convert it to a float …\n"],["validates_presence_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_presence_of","(*attr_names)","<p>Validates that the specified attributes are not blank (as defined by\nObject#blank?). Happens by default …\n"],["validates_size_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_size_of","(*attr_names)",""],["validates_uniqueness_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_uniqueness_of","(*attr_names)","<p>Validates whether the value of the specified attributes are unique across\nthe system. Useful for making …\n"],["validates_with","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-validates_with","(*args, &block)","<p>Passes the record off to the class or classes specified and allows them to\nadd errors based on more complex …\n"],["validates_with","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates_with","(*args, &block)","<p>If you pass any additional configuration options, they will be passed to\nthe class and available as  …\n"],["validators","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validators","()","<p>List all validators that are being used to validate the model using\n<code>validates_with</code> method.\n"],["validators_on","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validators_on","(*attributes)","<p>List all validators that being used to validate a specific attribute.\n"],["value","ActionView::Helpers::InstanceTag","classes/ActionView/Helpers/InstanceTag.html#method-i-value","(object)",""],["value","ActionView::Helpers::InstanceTag","classes/ActionView/Helpers/InstanceTag.html#method-c-value","(object, method_name)",""],["value","ActiveSupport::Cache::Entry","classes/ActiveSupport/Cache/Entry.html#method-i-value","()","<p>Get the value stored in the cache.\n"],["value_before_type_cast","ActionView::Helpers::InstanceTag","classes/ActionView/Helpers/InstanceTag.html#method-i-value_before_type_cast","(object)",""],["value_before_type_cast","ActionView::Helpers::InstanceTag","classes/ActionView/Helpers/InstanceTag.html#method-c-value_before_type_cast","(object, method_name)",""],["values","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-values","()","<p>Returns all message values\n"],["values","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-values","()",""],["values_at","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-values_at","(*indices)","<p>Returns an array of the values at the specified indices:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[:a] ...</pre>\n"],["values_at","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-values_at","(*indices)","<p>Returns an array of the values at the specified indices:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[:a] ...</pre>\n"],["vendor","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-vendor","()",""],["vendor","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-vendor","(filename, data=nil, &block)","<p>Create a new file in the vendor/ directory. Code can be specified in a\nblock or a data string can be …\n"],["vendor_javascripts","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-vendor_javascripts","()",""],["vendor_plugins","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-vendor_plugins","()",""],["vendor_stylesheets","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-vendor_stylesheets","()",""],["verified_request?","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-verified_request-3F","()","<p>Returns true or false if a request is verified. Checks:\n<p>is it a GET request?  Gets should be safe and …\n"],["verify","ActiveSupport::MessageVerifier","classes/ActiveSupport/MessageVerifier.html#method-i-verify","(signed_message)",""],["verify!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-verify-21","(*ignored)","<p>Checks whether the connection to the database is still active (i.e. not\nstale). This is done under the …\n"],["verify_authenticity_token","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-verify_authenticity_token","()","<p>The actual before_filter that is used. Modify this to change how you handle\nunverified requests.\n"],["verify_request?","Mime::Type","classes/Mime/Type.html#method-i-verify_request-3F","()","<p>Returns true if Action Pack should check requests using this Mime Type for\npossible request forgery. …\n"],["version","Rails","classes/Rails.html#method-c-version","()",""],["video_path","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-video_path","(source)","<p>Computes the path to a video asset in the public videos directory. Full\npaths from the document root …\n"],["video_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-video_tag","(sources, options = {})","<p>Returns an html video tag for the <code>sources</code>. If\n<code>sources</code> is a string, a single video tag will be returned. …\n"],["view_assigns","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-view_assigns","()","<p>This method should return a hash with assigns. You can overwrite this\nconfiguration per controller. :api: …\n"],["view_context","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-view_context","()","<p>An instance of a view class. The default view class is ActionView::Base\n<p>The view class must have the following …\n"],["view_context_class","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-view_context_class","()",""],["view_context_class","AbstractController::Rendering::ClassMethods","classes/AbstractController/Rendering/ClassMethods.html#method-i-view_context_class","()",""],["view_paths","AbstractController::ViewPaths::ClassMethods","classes/AbstractController/ViewPaths/ClassMethods.html#method-i-view_paths","()","<p>A list of all of the default view paths for this controller.\n"],["view_paths=","AbstractController::ViewPaths::ClassMethods","classes/AbstractController/ViewPaths/ClassMethods.html#method-i-view_paths-3D","(paths)","<p>Set the view paths.\n<p>Parameters\n<p><code>paths</code> - If a PathSet is provided, use that; otherwise, process\nthe parameter ...\n"],["view_paths=","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-view_paths-3D","(paths)","<p>Whenever setting view paths, makes a copy so we can manipulate then in\ninstance objects as we wish.\n"],["view_renderer","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-view_renderer","()","<p>Returns an object that is able to render templates.\n"],["visible_action?","ActionController::HideActions::ClassMethods","classes/ActionController/HideActions/ClassMethods.html#method-i-visible_action-3F","(action_name)",""],["wait","ActiveSupport::LogSubscriber::TestHelper","classes/ActiveSupport/LogSubscriber/TestHelper.html#method-i-wait","()","<p>Wait notifications to be published.\n"],["wait","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-wait","()","<p>This is a sync queue, so there is no waiting.\n"],["wants?","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-c-wants-3F","(string)","<p>Returns <code>true</code> if the Chars class can and should act as a proxy\nfor the string <em>string</em>. Returns <code>false</code> otherwise. …\n"],["warn","ActiveSupport::Deprecation","classes/ActiveSupport/Deprecation.html#method-c-warn","(message = nil, callstack = caller)","<p>Outputs a deprecation warning to the output configured by\n<code>ActiveSupport::Deprecation.behavior</code>\n\n<pre>ActiveSupport::Deprecation.warn(&quot;something ...</pre>\n"],["watch","ActiveSupport::FileWatcher","classes/ActiveSupport/FileWatcher.html#method-i-watch","(pattern, &block)",""],["watch_namespaces","ActiveSupport::Dependencies::WatchStack","classes/ActiveSupport/Dependencies/WatchStack.html#method-i-watch_namespaces","(namespaces)","<p>Add a set of modules to the watch stack, remembering the initial constants\n"],["watchable_args","Rails::Application","classes/Rails/Application.html#method-i-watchable_args","()","<p>Returns an array of file paths appended with a hash of\ndirectories-extensions suitable for ActiveSupport::FileUpdateChecker …\n"],["watchable_dirs","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-watchable_dirs","()","<p>Add directories that should be watched for change. The key of the hashes\nshould be directories and the …\n"],["watchable_files","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-watchable_files","()","<p>Add files that should be watched for change.\n"],["watching?","ActiveSupport::Dependencies::WatchStack","classes/ActiveSupport/Dependencies/WatchStack.html#method-i-watching-3F","()",""],["week","Numeric","classes/Numeric.html#method-i-week","()",""],["weeks","Numeric","classes/Numeric.html#method-i-weeks","()",""],["weeks_ago","Date","classes/Date.html#method-i-weeks_ago","(weeks)","<p>Returns a new Date/DateTime representing the time a number of specified\nweeks ago.\n"],["weeks_ago","Time","classes/Time.html#method-i-weeks_ago","(weeks)","<p>Returns a new Time representing the time a number of specified weeks ago.\n"],["where","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-where","(opts, *rest)",""],["where_values_hash","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-where_values_hash","()",""],["with","AbstractController::Railties::RoutesHelpers","classes/AbstractController/Railties/RoutesHelpers.html#method-c-with","(routes)",""],["with","ActionController::Railties::Paths","classes/ActionController/Railties/Paths.html#method-c-with","(app)",""],["with_backend","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-with_backend","(name)",""],["with_backend","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-with_backend","(name)",""],["with_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-with_connection","()","<p>If a connection already exists yield it to the block. If no connection\nexists checkout a connection, …\n"],["with_default_scope","ActionDispatch::Routing::Mapper::Base","classes/ActionDispatch/Routing/Mapper/Base.html#method-i-with_default_scope","(scope, &block)",""],["with_dummy_app?","Rails::Generators::PluginNewGenerator","classes/Rails/Generators/PluginNewGenerator.html#method-i-with_dummy_app-3F","()",""],["with_exclusive_scope","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-with_exclusive_scope","()",""],["with_exclusive_scope","ActiveRecord::Scoping::ClassMethods","classes/ActiveRecord/Scoping/ClassMethods.html#method-i-with_exclusive_scope","(method_scoping = {}, &block)","<p>Works like with_scope, but discards any nested properties.\n"],["with_fallbacks","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-with_fallbacks","()","<p>Add fallbacks to the view paths. Useful in cases you are rendering a :file.\n"],["with_gc_stats","ActiveSupport::Testing::Performance::Metrics::Base","classes/ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-with_gc_stats","()","<p>overridden by each implementation\n"],["with_indifferent_access","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-with_indifferent_access","()",""],["with_indifferent_access","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-with_indifferent_access","()",""],["with_indifferent_access","Hash","classes/Hash.html#method-i-with_indifferent_access","()","<p>Returns an <code>ActiveSupport::HashWithIndifferentAccess</code> out of its\nreceiver:\n\n<pre class=\"ruby\">{:<span class=\"ruby-identifier\">a</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">1</span>}.<span class=\"ruby-identifier\">with_indifferent_access</span>[<span class=\"ruby-string\">&quot;a&quot;</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["with_local_cache","ActiveSupport::Cache::Strategy::LocalCache","classes/ActiveSupport/Cache/Strategy/LocalCache.html#method-i-with_local_cache","()","<p>Use a local cache for the duration of block.\n"],["with_lock","ActiveRecord::Locking::Pessimistic","classes/ActiveRecord/Locking/Pessimistic.html#method-i-with_lock","(lock = true)","<p>Wraps the passed block in a transaction, locking the object before\nyielding. You pass can the SQL locking …\n"],["with_options","Object","classes/Object.html#method-i-with_options","(options)","<p>An elegant way to factor duplication out of options passed to a series of\nmethod calls. Each method called …\n"],["with_output_file","ActiveSupport::Testing::Performance::Benchmarker","classes/ActiveSupport/Testing/Performance/Benchmarker.html#method-i-with_output_file","()",""],["with_routing","ActionDispatch::Assertions::RoutingAssertions","classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-with_routing","()","<p>A helper to make it easier to test different route configurations. This\nmethod temporarily replaces @routes …\n"],["with_scope","ActiveRecord::Scoping::ClassMethods","classes/ActiveRecord/Scoping/ClassMethods.html#method-i-with_scope","(scope = {}, action = :merge, &block)","<p>with_scope lets you apply options to inner block incrementally. It takes a\nhash and the keys must be …\n"],["with_scope_level","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-with_scope_level","(kind, resource = parent_resource)",""],["with_transaction_returning_status","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-with_transaction_returning_status","()","<p>Executes <code>method</code> within a transaction and captures its return\nvalue as a status flag. If the status is …\n"],["with_warnings","Kernel","classes/Kernel.html#method-i-with_warnings","(flag)","<p>Sets $VERBOSE for the duration of the block and back to its original value\nafterwards.\n"],["without","ActiveRecord::IdentityMap","classes/ActiveRecord/IdentityMap.html#method-c-without","()",""],["without_modules","ActionController::Base","classes/ActionController/Base.html#method-c-without_modules","(*modules)",""],["word_wrap","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-word_wrap","(text, *args)","<p>Wraps the <code>text</code> into lines no longer than\n<code>line_width</code> width. This method breaks on the first whitespace …\n"],["wrap","Array","classes/Array.html#method-c-wrap","(object)","<p>Wraps its argument in an array unless it is already an array (or\narray-like).\n<p>Specifically:\n<p>If the argument …\n"],["wrap_parameters","ActionController::ParamsWrapper::ClassMethods","classes/ActionController/ParamsWrapper/ClassMethods.html#method-i-wrap_parameters","(name_or_model_or_options, options = {})","<p>Sets the name of the wrapper key, or the model which\n<code>ParamsWrapper</code> would use to determine the attribute …\n"],["wrap_with_namespace","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-wrap_with_namespace","(content)",""],["write","ActionDispatch::RailsEntityStore","classes/ActionDispatch/RailsEntityStore.html#method-i-write","(body)",""],["write","ActionDispatch::RailsMetaStore","classes/ActionDispatch/RailsMetaStore.html#method-i-write","(key, value)",""],["write","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-write","(text=\"\")",""],["write","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-write","(name, value, options = nil)","<p>Writes the value to the cache, with the key.\n<p>Options are passed to the underlying cache implementation. …\n"],["write_attribute","ActiveRecord::AttributeMethods::Write","classes/ActiveRecord/AttributeMethods/Write.html#method-i-write_attribute","(attr_name, value)","<p>Updates the attribute identified by <code>attr_name</code> with the\nspecified <code>value</code>. Empty strings for fixnum and …\n"],["write_entry","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-write_entry","(key, entry, options)",""],["write_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-write_entry","(key, value, options)",""],["write_fragment","ActionController::Caching::Fragments","classes/ActionController/Caching/Fragments.html#method-i-write_fragment","(key, content, options = nil)","<p>Writes <code>content</code> to the location signified by  <code>key</code>\n(see <code>expire_fragment</code> for acceptable formats).\n"],["xhr","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-xhr","(request_method, action, parameters = nil, session = nil, flash = nil)",""],["xhr","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-xhr","(request_method, path, parameters = nil, headers = nil)",""],["xhr?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-xhr-3F","()",""],["xml","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::TableDefinition","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/TableDefinition.html#method-i-xml","(*args)",""],["xml","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-xml","(*args)",""],["xml_http_request","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-xml_http_request","(request_method, action, parameters = nil, session = nil, flash = nil)",""],["xml_http_request","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-xml_http_request","(request_method, path, parameters = nil, headers = nil)","<p>Performs an XMLHttpRequest request with the given parameters, mirroring a\nrequest from the Prototype …\n"],["xml_http_request?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-xml_http_request-3F","()","<p>Returns true if the “X-Requested-With” header contains “XMLHttpRequest”\n(case-insensitive). …\n"],["xmlschema","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-xmlschema","(fraction_digits = 0)",""],["xmlschema","Date","classes/Date.html#method-i-xmlschema","()",""],["xmlschema","DateTime","classes/DateTime.html#method-i-xmlschema","()","<p>Converts datetime to an appropriate format for use in XML.\n"],["year","Integer","classes/Integer.html#method-i-year","()",""],["years","Integer","classes/Integer.html#method-i-years","()",""],["years_ago","Date","classes/Date.html#method-i-years_ago","(years)","<p>Returns a new Date/DateTime representing the time a number of specified\nyears ago.\n"],["years_ago","Time","classes/Time.html#method-i-years_ago","(years)","<p>Returns a new Time representing the time a number of specified years ago\n"],["years_since","Date","classes/Date.html#method-i-years_since","(years)","<p>Returns a new Date/DateTime representing the time a number of specified\nyears in the future.\n"],["years_since","Time","classes/Time.html#method-i-years_since","(years)","<p>Returns a new Time representing the time a number of specified years in the\nfuture\n"],["yesterday","Date","classes/Date.html#method-i-yesterday","()","<p>Convenience method which returns a new Date/DateTime representing the time\n1 day ago\n"],["yesterday","Date","classes/Date.html#method-c-yesterday","()","<p>Returns a new Date representing the date 1 day ago (i.e. yesterday’s date).\n"],["yesterday","Time","classes/Time.html#method-i-yesterday","()","<p>Convenience method which returns a new Time representing the time 1 day ago\n"],["zone","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-zone","()","<p>Time uses <code>zone</code> to display the time zone abbreviation, so we’re\nduck-typing it.\n"],["zone","Time","classes/Time.html#method-c-zone","()","<p>Returns the TimeZone for the current request, if this has been set (via\nTime.zone=). If <code>Time.zone</code> has …\n"],["zone=","Time","classes/Time.html#method-c-zone-3D","(time_zone)","<p>Sets <code>Time.zone</code> to a TimeZone object for the current\nrequest/thread.\n<p>This method accepts any of the following: …\n"],["zones_map","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-zones_map","()",""],["RDOC_MAIN","","files/RDOC_MAIN_rdoc.html","","<p>Welcome to Rails\n<p>Rails is a web-application framework that includes everything needed to\ncreate database-backed …\n"],["README","","files/actionmailer/README_rdoc.html","","<p>Action Mailer – Easy email delivery and testing\n<p>Action Mailer is a framework for designing email-service …\n"],["README","","files/actionpack/README_rdoc.html","","<p>Action Pack – From request to response\n<p>Action Pack is a framework for handling and responding to web …\n"],["README","","files/activemodel/README_rdoc.html","","<p>Active Model – model interfaces for Rails\n<p>Active Model provides a known set of interfaces for usage in …\n"],["README","","files/activerecord/README_rdoc.html","","<p>Active Record – Object-relational mapping put on rails\n<p>Active Record connects classes to relational database …\n"],["README","","files/activeresource/README_rdoc.html","","<p>Active Resource\n<p>Active Resource (ARes) connects business objects and Representational State\nTransfer ( …\n"],["README","","files/activesupport/README_rdoc.html","","<p>Active Support – Utility classes and Ruby extensions from Rails\n<p>Active Support is a collection of utility …\n"],["MIT-LICENSE","","files/railties/MIT-LICENSE.html","","<p>Copyright © 2004-2011 David Heinemeier Hansson\n<p>Permission is hereby granted, free of charge, to any …\n"],["README","","files/railties/README_rdoc.html","","<p>Railties – Gluing the Engine to the Rails\n<p>Railties is responsible for gluing all frameworks together. …\n"]]}}